

public static double distance(double x1,double y1,double x2,double y2){
	return Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));
}
public static double index_in_array(double[] the_arr,double to_find){
	int i=0;
	while(i<the_arr.length){
		if(the_arr[i]+0==to_find){
			return the_arr[i];
		}
		else{
			i++;
		}
	}
}
public static boolean matches_pattern(String[] arr,String[] pattern){
	if(pattern.length!=arr.length){
		return false;
	}
	else{
		int i=0;
		while(i<arr.length){
			if((last_char(pattern[i])!='_')&&(!pattern[i].equals(arr[i]))){
				return false;
			}
			else{
				i++;
			}
		}
	}
	return true;
}
public static char last_char(String the_string){
	return the_string.charAt(the_string.length()-1);
}
boolean z=string_matches_pattern("hello stuff","hello 1_");
public static boolean string_matches_pattern(String str1,String pattern){
	return matches_pattern(str1.split(" "),pattern.split(" "));
}
public static String while_loop(String lang,String a,String b){
	if(Arrays.asList(new String[]{"javascript","java","c","c++"}).contains(lang)){
		return "while("+a+"){"+b+"}";
	}
	else{
		return "undefined";
	}
}
public static String if_statement(String lang,String a,String b){
	if(Arrays.asList(new String[]{"javascript","java","c","c++"}).contains(lang)){
		return "if("+a+"){"+b+"}";
	}
	else{
		return "undefined";
	}
}
public static String elif_statement(String lang,String a,String b){
	if(Arrays.asList(new String[]{("java"+"script"),"java","c","c++"}).contains(lang)){
		return "else if("+a+"){"+b+"}";
	}
	else{
		return "undefined";
	}
}
public static boolean infix_arithetic_langs(String lang){
	return (Arrays.asList(new String[]{"javascript","perl","python","java","java","c","c++","perl"}).contains(lang));
}
public static String add(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" + "+b;
	}
	else{
		return "(+ "+a+" "+b+")";
	}
}
public static String subtract(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" - "+b;
	}
	else{
		return "(- "+a+" "+b+")";
	}
}
public static String multiply(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" * "+b;
	}
	else{
		return "(* "+a+" "+b+")";
	}
}
public static String divide(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" / "+b;
	}
	else{
		return "(/ "+a+" "+b+")";
	}
}
public static String less_than(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" < "+b;
	}
	else{
		return "(< "+a+" "+b+")";
	}
}
public static String greater_than(char lang,String a,String b){
	if(infix_arithmetic_langs(lang)){
		return a+" > "+b;
	}
	else{
		return "(> "+a+" "+b+")";
	}
}
public static String indent_line(String line,double number_of_indents){
	double i=0;
	while(i<number_of_indents){
		line="    "+line;
		i++;
	}
	return line;
}