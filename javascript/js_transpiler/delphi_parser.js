/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var delphi_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,18],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,20],$Vc=[1,21],$Vd=[5,23,24,29,32,34,39,41,44,46,49,52,58,60],$Ve=[1,45],$Vf=[1,43],$Vg=[1,46],$Vh=[1,36],$Vi=[1,38],$Vj=[1,47],$Vk=[1,48],$Vl=[10,27],$Vm=[10,24,27,96],$Vn=[2,99],$Vo=[1,68],$Vp=[1,71],$Vq=[2,113],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[5,23,24,29,31,32,34,38,39,41,44,45,46,49,52,55,58,60],$Vv=[1,89],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[10,27,31,36,43,47,61,63,73,74,75,76,77,78,79,80,81,82,83,84,85,96],$VK=[10,25,27,31,36,43,47,61,63,73,74,75,76,77,78,79,80,81,82,83,84,85,90,96],$VL=[1,106],$VM=[1,107],$VN=[31,38,45,55],$VO=[23,24,29,31,32,34,38,39,41,44,45,46,49,52,55,58,60],$VP=[1,137],$VQ=[1,140],$VR=[2,103],$VS=[31,96],$VT=[27,31],$VU=[27,31,96],$VV=[1,180],$VW=[1,192],$VX=[10,27,31,36,43,47,61,63,73,74,75,76,78,80,96],$VY=[10,27,31,36,43,47,61,63,73,74,75,76,77,78,79,80,96],$VZ=[10,27,31,36,43,47,61,63,73,74,75,76,77,78,79,80,81,82,96],$V_=[38,57],$V$=[1,217],$V01=[24,31,39],$V11=[1,241],$V21=[5,23,24,29,31,32,34,38,39,41,44,45,46,49,52,55,58,60,101];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statements_with_vars":8,"initialize_vars":9,";":10,"statements_without_vars":11,"statement":12,"initialize_var1":13,"struct_statements":14,"struct_statement":15,"type":16,"identifiers":17,"set_array_size":18,"statements":19,"access_modifier":20,"public":21,"private":22,"#define":23,"IDENTIFIER":24,"(":25,"exprs":26,")":27,"expr":28,"struct":29,"{":30,"}":31,"enum":32,"enum_statements":33,"function":34,"parameters":35,":":36,"begin":37,"end":38,"void":39,"statement_with_semicolon":40,"while":41,"e":42,"do":43,"repeat":44,"until":45,"case":46,"of":47,"case_statements":48,"for":49,"statement_with_semicolon_":50,"bracket_statements":51,"if":52,"elif":53,"case_statement":54,"break":55,"case_statements_":56,"default":57,"Result":58,":=":59,"const":60,"=":61,"[":62,"]":63,"access_array":64,"++":65,"--":66,"+=":67,"-=":68,"*=":69,"/=":70,"initialize_var_":71,"initialize_var":72,"?":73,"OR":74,"AND":75,"<=":76,"<":77,">=":78,">":79,"!=":80,"+":81,"-":82,"Mod":83,"*":84,"/":85,"not_expr":86,"!":87,"dot_expr":88,"parentheses_expr":89,".":90,"function_call":91,"parentheses_expr_":92,"initialize_struct":93,"NUMBER":94,"STRING_LITERAL":95,",":96,"initialize_struct_":97,"parameter":98,"&":99,"types":100,"else":101,"enum_statement":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",21:"public",22:"private",23:"#define",24:"IDENTIFIER",25:"(",27:")",29:"struct",30:"{",31:"}",32:"enum",34:"function",36:":",37:"begin",38:"end",39:"void",41:"while",43:"do",44:"repeat",45:"until",46:"case",47:"of",49:"for",52:"if",55:"break",57:"default",58:"Result",59:":=",60:"const",61:"=",62:"[",63:"]",65:"++",66:"--",67:"+=",68:"-=",69:"*=",70:"/=",73:"?",74:"OR",75:"AND",76:"<=",77:"<",78:">=",79:">",80:"!=",81:"+",82:"-",83:"Mod",84:"*",85:"/",87:"!",90:".",94:"NUMBER",95:"STRING_LITERAL",96:",",99:"&",101:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,3],[11,2],[11,1],[8,3],[8,1],[14,2],[14,1],[15,3],[15,2],[19,1],[20,1],[20,1],[6,1],[6,2],[12,8],[12,6],[12,6],[12,12],[12,8],[12,2],[12,7],[12,5],[12,6],[12,9],[12,6],[12,5],[50,1],[50,1],[54,6],[56,2],[56,1],[48,4],[48,1],[40,3],[40,4],[40,3],[40,5],[40,7],[40,1],[40,2],[40,3],[40,3],[40,2],[40,2],[40,3],[40,3],[40,3],[40,3],[13,1],[72,1],[71,4],[71,6],[9,3],[9,1],[18,2],[42,5],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,4],[42,4],[42,3],[42,3],[42,2],[42,1],[86,2],[86,1],[88,3],[88,1],[64,4],[89,1],[89,1],[89,3],[89,1],[92,2],[92,3],[92,3],[92,1],[92,1],[92,1],[93,3],[93,1],[97,4],[91,3],[91,4],[16,1],[16,1],[98,3],[35,3],[35,1],[35,0],[26,3],[26,1],[28,2],[28,1],[100,3],[100,1],[53,7],[53,2],[17,3],[17,1],[33,3],[33,1],[102,3],[51,3],[51,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 7: case 11: case 35: case 58: case 81: case 94: case 102:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [["lexically_scoped_vars",$$[$0-2],["statements",$$[$0]]]]
break;
case 8:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 10: case 34:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 12:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 13:
this.$ = ["semicolon", $$[$0-1]];
break;
case 14:
this.$ = ["statements",$$[$0]]
break;
case 18:
this.$ = ["semicolon",$$[$0-1]]
break;
case 19:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 21:
this.$ = ["enum","public",$$[$0-4],$$[$0-2]];
break;
case 22:
this.$ = ["function","public",$$[$0-5],$$[$0-10],$$[$0-8],$$[$0-2]];
break;
case 23:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 24: case 118:
this.$ = ["semicolon",$$[$0-1]];
break;
case 25:
this.$ = ["while",$$[$0-5],$$[$0-2]];
break;
case 26:
this.$ = ["do_while",$$[$0-3],$$[$0]];
break;
case 27:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 30:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 36:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 38: case 96:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 39: case 97:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 40:
this.$ = ["return",$$[$0-1]];
break;
case 41:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 44:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 45: case 46:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 47: case 48:
this.$ = [$$[$0],$$[$0-1]];
break;
case 49: case 50: case 51: case 52: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 74: case 75:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 54:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 55:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 56:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 57: case 93:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 59:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 60:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 72:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 73:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 76:
this.$ = ["-",$$[$0]];
break;
case 78:
this.$ = ["!", [".",$$[$0]]];
break;
case 79:
this.$ = [".", $$[$0]];
break;
case 80: case 101: case 104: case 108: case 112: case 114:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 82:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 85:
this.$ = ["parentheses",$$[$0-1]];
break;
case 87:
this.$ = ["initializer_list","Object",[]];
break;
case 88:
this.$ = ["initialize_struct","Object",$$[$0-1]];
break;
case 89:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 90: case 91: case 92:
this.$ = yytext;
break;
case 95:
this.$ = ["initialize_struct_",$$[$0-2],$$[$0]]
break;
case 100:
this.$ = [$$[$0],$$[$0-2]];
break;
case 103:
this.$ = [];
break;
case 105: case 107: case 109: case 113: case 115:
this.$ = [$$[$0]];
break;
case 106:
this.$ = ["function_call_ref",$$[$0]];
break;
case 110:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 111:
this.$ = ["else",$$[$0]];
break;
case 116:
this.$ = ["enum_statement",$$[$0-2],$$[$0]]
break;
case 117:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,16:10,18:22,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:17},{1:[3]},{5:[1,24],6:25,12:4,13:5,16:10,18:22,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:17},o($Vd,[2,3]),o($Vd,[2,17]),{10:[1,26]},{24:[1,27]},{24:[1,28]},{24:[1,29]},{24:[1,30]},{17:32,24:[1,31],64:33},{10:[1,34]},{24:$Ve,25:$Vf,30:$Vg,42:35,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:49,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},{24:$Ve,25:$Vf,30:$Vg,42:57,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{25:[1,58]},{25:[1,59]},o($Vl,[2,53]),o($Vm,[2,98]),{24:$Vn,25:[1,60],59:[1,61],62:$Vo,65:[1,62],66:[1,63],67:[1,64],68:[1,65],69:[1,66],70:[1,67]},{59:[1,69]},{16:70,24:$Vp,39:$V5},o($Vl,[2,43]),{59:[1,72]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,18]),{25:[1,73]},{30:[1,74]},{30:[1,75]},{25:[1,76]},{10:$Vq,25:[1,77],61:$Vr,62:$Vs,96:$Vt},o($Vl,[2,44]),o($Vl,[2,59]),o($Vu,[2,24]),{43:[1,81],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},{24:$Ve,25:$Vf,30:$Vg,42:96,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VJ,[2,77]),{24:$Ve,25:$Vf,30:$Vg,64:41,88:97,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VJ,[2,79]),o($VJ,[2,81],{25:[1,99],90:[1,98]}),o($VK,[2,83]),o($VK,[2,84]),{24:$Ve,25:$Vf,30:$Vg,42:100,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VK,[2,86]),o($VK,[2,91],{62:$Vo}),{24:$Ve,25:$Vf,26:103,28:105,30:$Vg,31:[1,101],42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,90:$VL,91:42,92:44,93:102,94:$Vj,95:$Vk,97:104,99:$VM},o($VK,[2,90]),o($VK,[2,92]),{45:[1,109]},o($VN,[2,14]),o($VN,[2,4]),{10:[1,110]},o($VN,[2,9],{16:10,40:11,71:17,18:22,64:23,13:111,12:112,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc}),{10:[2,58]},o($VO,[2,7]),{10:[2,54]},{47:[1,113],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},{13:115,16:117,18:22,24:$V1,39:$V5,40:116,50:114,58:$Vb,60:$Vc,64:23,71:17},{24:$Ve,25:$Vf,30:$Vg,42:118,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,26:120,27:[1,119],28:105,30:$Vg,42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk,99:$VM},{24:$Ve,25:$Vf,30:$Vg,42:121,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($Vl,[2,47]),o($Vl,[2,48]),{24:$Ve,25:$Vf,30:$Vg,42:122,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:123,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:124,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:125,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:126,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:127,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:[1,128]},o($Vm,$Vn),{24:$Ve,25:$Vf,30:$Vg,42:129,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,26:130,28:105,30:$Vg,42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk,99:$VM},{14:131,15:132,16:133,18:134,24:$Vp,39:$V5},{24:$VP,33:135,102:136},{24:$VQ,27:$VR,35:138,98:139},{39:[1,141]},{24:$Ve,25:$Vf,30:$Vg,42:142,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:126,63:[1,143],64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{17:144,24:[1,145]},{37:[1,146]},{24:$Ve,25:$Vf,30:$Vg,42:147,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:148,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:149,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:150,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:151,64:41,77:[1,152],82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:153,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:154,64:41,79:[1,155],82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:156,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:157,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:158,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:159,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:160,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:161,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:162,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VJ,[2,76]),o($VJ,[2,78]),{24:$Ve,25:$Vf,30:$Vg,64:41,88:163,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,26:165,27:[1,164],28:105,30:$Vg,42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk,99:$VM},{27:[1,166],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o($VK,[2,87]),{31:[1,167],96:[1,168]},{31:[1,169]},o($VS,[2,94]),o($VT,[2,105],{96:[1,170]}),{24:[1,171]},{24:$Ve,25:$Vf,30:$Vg,42:172,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VU,[2,107],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{24:$Ve,25:$Vf,30:$Vg,42:173,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{8:174,11:53,12:55,16:10,18:22,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:175},{10:[1,176]},o($VO,[2,6]),{46:$VV,48:177,54:179,56:178},{10:[1,181]},o($Vl,[2,31]),o($Vl,[2,32]),{17:32,24:[1,182],64:33},{27:[1,183],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o($Vl,[2,38]),{27:[1,184]},o($Vl,[2,46],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vl,[2,49],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vl,[2,50],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vl,[2,51],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vl,[2,52],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{61:$Vv,63:[1,185],73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o($Vl,[2,40],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{61:[1,186],62:[1,187]},o($Vl,[2,45],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{27:[1,188]},{31:[1,189]},{14:190,15:132,16:133,18:134,24:$Vp,31:[2,11],39:$V5},{17:191,24:$VW,64:33},{10:[1,193]},{31:[1,194]},{31:[2,115],96:[1,195]},{61:[1,196]},{27:[1,197]},{27:[2,102],96:[1,198]},{36:[1,199]},{27:[1,200]},o($Vl,[2,55],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{61:[1,201]},o($Vl,[2,112]),o($Vl,$Vq,{96:$Vt}),{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:202,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},{36:[1,203],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o([10,27,31,36,43,47,63,73,74,96],[2,61],{61:$Vv,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o([10,27,31,36,43,47,63,73,74,75,96],[2,62],{61:$Vv,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VX,[2,63],{77:$VA,79:$VC,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VY,[2,64],{81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{24:$Ve,25:$Vf,30:$Vg,42:204,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VX,[2,65],{77:$VA,79:$VC,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VY,[2,66],{81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{24:$Ve,25:$Vf,30:$Vg,42:205,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VX,[2,67],{77:$VA,79:$VC,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VX,[2,68],{77:$VA,79:$VC,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VZ,[2,69],{83:$VG,84:$VH,85:$VI}),o($VZ,[2,70],{83:$VG,84:$VH,85:$VI}),o($VJ,[2,71]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,80]),o($VK,[2,96]),{27:[1,206]},o($VK,[2,85]),o($VK,[2,88]),{90:$VL,97:207},o($VK,[2,89]),{24:$Ve,25:$Vf,26:208,28:105,30:$Vg,42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk,99:$VM},{61:[1,209]},o($VU,[2,106],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{10:[1,210],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o($VN,[2,5]),{10:[2,57]},o($VN,[2,8]),{38:[1,211]},{38:[2,37],57:[1,212]},o($V_,[2,35],{54:179,56:213,46:$VV}),{24:$Ve,25:$Vf,30:$Vg,42:214,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{24:$Ve,25:$Vf,30:$Vg,42:215,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($Vl,$Vq,{61:$Vr,62:$Vs,96:$Vt}),{16:219,18:22,24:$V1,30:$V$,39:$V5,40:218,51:216,58:$Vb,60:$Vc,64:23},o($Vl,[2,39]),o([10,25,27,31,36,43,47,59,61,63,73,74,75,76,77,78,79,80,81,82,83,84,85,90,96],[2,82]),{24:$Ve,25:$Vf,30:$Vg,42:220,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{63:[1,221]},{25:[1,222]},{10:[1,223]},{31:[2,10]},{10:[1,224]},{10:$Vq,62:$Vo,96:$Vt},o($V01,[2,13]),{10:[1,225]},{24:$VP,33:226,102:136},{94:[1,227]},{36:[1,228]},{24:$VQ,27:$VR,35:229,98:139},{16:230,24:$Vp,39:$V5},{30:[1,231]},{24:$Ve,25:$Vf,30:$Vg,42:232,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{38:[1,233]},{24:$Ve,25:$Vf,30:$Vg,42:234,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($VY,[2,73],{81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VY,[2,72],{81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VK,[2,97]),o($VS,[2,93]),o($VT,[2,104]),{24:$Ve,25:$Vf,30:$Vg,42:235,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},o($Vu,[2,26]),{10:[1,236]},{36:[1,237]},o($V_,[2,34]),{36:[1,238],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},{10:[1,239],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},o($Vu,[2,30],{53:240,101:$V11}),{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:242,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},{10:[1,243]},{17:32,24:$VW,64:33},o($Vl,[2,41],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{61:[1,244]},{24:$Ve,25:$Vf,28:245,30:$Vg,42:108,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk,99:$VM},o($Vu,[2,20]),o($V01,[2,12]),o($Vu,[2,21]),{31:[2,114]},o($VS,[2,116]),{16:246,24:$Vp,39:$V5},{27:[2,101]},o([27,96],[2,100]),{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:247,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},o($Vl,[2,56],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),{10:[1,248]},o([10,27,31,36,43,47,63,96],[2,60],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($VS,[2,95],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vu,[2,27]),{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:249,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:250,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},{13:115,16:117,18:22,24:$V1,39:$V5,40:116,50:251,58:$Vb,60:$Vc,64:23,71:17},o($Vu,[2,29]),{16:219,18:22,24:$V1,30:$V$,39:$V5,40:218,51:253,52:[1,252],58:$Vb,60:$Vc,64:23},{31:[1,254]},o($V21,[2,118]),{24:$Ve,25:$Vf,30:$Vg,42:255,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{27:[1,256]},{10:[1,257]},{31:[1,258]},o($Vu,[2,25]),{38:[2,36]},{55:[1,259]},{27:[1,260]},{25:[1,261]},o($Vu,[2,111]),o($V21,[2,117]),o($Vl,[2,42],{61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI}),o($Vu,[2,19]),{37:[1,262]},o($Vu,[2,23]),{10:[1,263]},{16:219,18:22,24:$V1,30:$V$,39:$V5,40:218,51:264,58:$Vb,60:$Vc,64:23},{24:$Ve,25:$Vf,30:$Vg,42:265,64:41,82:$Vh,86:37,87:$Vi,88:39,89:40,91:42,92:44,94:$Vj,95:$Vk},{7:50,8:51,9:52,11:53,12:55,16:10,18:22,19:266,23:$V0,24:$V1,29:$V2,32:$V3,34:$V4,39:$V5,40:11,41:$V6,44:$V7,46:$V8,49:$V9,52:$Va,58:$Vb,60:$Vc,64:23,71:56,72:54},o([38,46,57],[2,33]),o($Vu,[2,28]),{27:[1,267],61:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI},{38:[1,268]},{16:219,18:22,24:$V1,30:$V$,39:$V5,40:218,51:269,58:$Vb,60:$Vc,64:23},{10:[1,270]},{53:271,101:$V11},o($Vu,[2,22]),o($Vu,[2,110])],
defaultActions: {24:[2,1],54:[2,58],56:[2,54],175:[2,57],190:[2,10],226:[2,114],229:[2,101],249:[2,36]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 94
break;
case 2:return 95
break;
case 3:return 23
break;
case 4:return 34
break;
case 5:return "if"
break;
case 6:return 43
break;
case 7:return "else"
break;
case 8:return 38
break;
case 9:return 32
break;
case 10:return 37
break;
case 11:return "Result"
break;
case 12:return 44
break;
case 13:return "void"
break;
case 14:return "case"
break;
case 15:return "printf"
break;
case 16:return "while"
break;
case 17:return "break"
break;
case 18:return "default"
break;
case 19:return "const"
break;
case 20:return "struct"
break;
case 21:return "switch"
break;
case 22:return "for"
break;
case 23:return 96
break;
case 24:return 10
break;
case 25:return 90
break;
case 26:return 59
break;
case 27:return 36
break;
case 28:return 75
break;
case 29:return 99
break;
case 30:return 74
break;
case 31:return 80
break;
case 32:return 87
break;
case 33:return 78
break;
case 34:return 79
break;
case 35:return 76
break;
case 36:return 77
break;
case 37:return 61
break;
case 38:return 69
break;
case 39:return 84
break;
case 40:return 83
break;
case 41:return 70
break;
case 42:return 85
break;
case 43:return 68
break;
case 44:return 66
break;
case 45:return 82
break;
case 46:return 65
break;
case 47:return 67
break;
case 48:return 81
break;
case 49:return '^'
break;
case 50:return 73
break;
case 51:return 30
break;
case 52:return 31
break;
case 53:return 62
break;
case 54:return 63
break;
case 55:return 25
break;
case 56:return 27
break;
case 57:return 24
break;
case 58:return 5
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:end\b)/,/^(?:enum\b)/,/^(?:begin\b)/,/^(?:Result\b)/,/^(?:repeat\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::=)/,/^(?::)/,/^(?:AND\b)/,/^(?:&)/,/^(?:OR\b)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:<od\b)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = delphi_parser;
exports.Parser = delphi_parser.Parser;
exports.parse = function () { return delphi_parser.parse.apply(delphi_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}