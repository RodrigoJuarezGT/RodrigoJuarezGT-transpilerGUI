/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var typescript_to_futhark = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,12],$Vb=[1,22],$Vc=[1,14],$Vd=[1,21],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[4,8,25,30,32,35,37,40,46,47,48,49,79,95,97,100,101,102],$Vi=[4,8,16,25,29,30,32,35,37,40,46,47,48,49,79,95,97,100,101,102],$Vj=[1,37],$Vk=[1,51],$Vl=[1,53],$Vm=[1,45],$Vn=[1,40],$Vo=[1,42],$Vp=[1,54],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,55],$Vu=[1,56],$Vv=[17,27],$Vw=[1,60],$Vx=[2,114],$Vy=[4,17,27,28,44,52,79,90],$Vz=[4,17,27,28,44,52,79,80,90],$VA=[1,76],$VB=[1,77],$VC=[1,90],$VD=[1,92],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,91],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[1,96],$VR=[1,97],$VS=[15,17,27,29,42,44,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,90],$VT=[15,17,27,29,42,44,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,79,80,90],$VU=[2,94],$VV=[1,140],$VW=[29,90],$VX=[27,80],$VY=[1,183],$VZ=[27,90],$V_=[44,80],$V$=[4,29,104],$V01=[15,17,27,29,59,60,61,80,90],$V11=[15,17,27,29,59,60,61,62,63,80,90],$V21=[15,17,27,29,42,44,59,60,61,62,63,64,65,66,67,80,90],$V31=[15,17,27,29,42,44,59,60,61,62,63,64,65,66,67,68,69,80,90],$V41=[1,214],$V51=[1,236],$V61=[20,29],$V71=[16,29],$V81=[4,8,16,25,29,30,32,35,37,40,46,47,48,49,79,94,95,97,100,101,102],$V91=[4,8,16,25,29,30,32,35,37,40,46,47,48,49,79,95,97,100,101,102,104];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"var_name":3,"IDENTIFIER":4,"module_name":5,"expressions":6,"top_level_statements":7,"EOF":8,"statements_":9,"statement":10,"statements":11,"case_statement":12,"case":13,"e":14,":":15,"break":16,";":17,"case_statements_":18,"case_statements":19,"default":20,"access_modifier":21,"public":22,"private":23,"statement_with_semicolon":24,"switch":25,"(":26,")":27,"{":28,"}":29,"while":30,"bracket_statements":31,"for":32,"statement_with_semicolon_":33,"if_statement":34,"function":35,"func":36,"class":37,"class_statements":38,"extends":39,"interface":40,"parameters":41,"<":42,"type_parameters":43,">":44,"const_or_let":45,"const":46,"let":47,"var":48,"return":49,"assign_var":50,"type":51,"=":52,"++":53,"--":54,"+=":55,"-=":56,"*=":57,"/=":58,"?":59,"||":60,"|":61,"&&":62,"&":63,"!==":64,"===":65,"<=":66,">=":67,"+":68,"-":69,"*":70,"/":71,"%":72,"not_expr":73,"!":74,"dot_expr":75,"parentheses_expr":76,".":77,"access_array":78,"[":79,"]":80,"new":81,"exprs":82,"function_call_parameters":83,"Number":84,"Math":85,"parentheses_expr_":86,"key_values":87,"NUMBER":88,"STRING_LITERAL":89,",":90,"key_value":91,"parameter":92,"elif":93,"else":94,"if":95,"identifiers":96,"Array":97,"tuple_type_":98,"type_":99,"boolean":100,"number":101,"string":102,"class_statement":103,"static":104,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",8:"EOF",13:"case",15:":",16:"break",17:";",20:"default",22:"public",23:"private",25:"switch",26:"(",27:")",28:"{",29:"}",30:"while",32:"for",35:"function",37:"class",39:"extends",40:"interface",42:"<",44:">",46:"const",47:"let",48:"var",49:"return",52:"=",53:"++",54:"--",55:"+=",56:"-=",57:"*=",58:"/=",59:"?",60:"||",61:"|",62:"&&",63:"&",64:"!==",65:"===",66:"<=",67:">=",68:"+",69:"-",70:"*",71:"/",72:"%",74:"!",77:".",79:"[",80:"]",81:"new",84:"Number",85:"Math",88:"NUMBER",89:"STRING_LITERAL",90:",",94:"else",95:"if",97:"Array",100:"boolean",101:"number",102:"string",104:"static"},
productions_: [0,[3,1],[5,1],[6,2],[9,2],[9,1],[11,1],[12,6],[18,2],[18,1],[19,4],[19,1],[21,1],[21,1],[7,2],[7,1],[10,2],[10,7],[10,5],[10,9],[10,1],[10,2],[10,5],[10,7],[10,5],[10,7],[36,9],[36,7],[36,10],[36,12],[33,1],[45,1],[45,1],[45,1],[24,2],[24,1],[50,6],[50,4],[50,4],[50,3],[50,2],[50,2],[50,3],[50,3],[50,3],[50,3],[14,5],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,1],[73,2],[73,1],[75,3],[75,1],[78,4],[76,9],[76,7],[76,3],[76,5],[76,4],[76,4],[76,6],[76,3],[76,1],[76,3],[76,1],[86,2],[86,3],[86,2],[86,3],[86,1],[86,1],[86,1],[87,3],[87,1],[91,3],[92,1],[92,3],[41,3],[41,1],[41,0],[82,3],[82,1],[83,3],[83,1],[93,7],[93,2],[34,6],[34,5],[96,3],[96,1],[31,3],[31,2],[51,3],[51,4],[51,3],[51,1],[99,1],[99,1],[99,1],[99,1],[43,3],[43,1],[98,3],[98,1],[103,4],[103,1],[103,2],[38,2],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = "var_"+$$[$0];
break;
case 2:
this.$ = "Module_"+$$[$0];
break;
case 3:
return $$[$0-1]
break;
case 4:
this.$ = $$[$0-1]+" in "+$$[$0];
break;
case 5: case 9: case 15: case 67: case 93: case 123:
this.$ =
 $$[$0];
break;
case 6:
this.$ = $$[$0]
break;
case 7:
this.$ = ["case",$$[$0-4]," -> ",$$[$0-2]].join(" ")
break;
case 8:
this.$ = $$[$0-1]+$$[$0];
break;
case 10:
this.$ = $$[$0-3]+["default:",$$[$0]].join("");
break;
case 14: case 122:
this.$ = $$[$0-1]+"\\n"+$$[$0];
break;
case 16: case 106:
this.$ = $$[$0-1];
break;
case 17:
this.$ = ["match ",$$[$0-4]," ",$$[$0-1]].join("");
break;
case 18:
this.$ = ["while(",$$[$0-2],")",$$[$0]].join("");
break;
case 19:
this.$ = ["for(",$$[$0-6],";",$$[$0-4],";",$$[$0-2],")",$$[$0]].join("");
break;
case 21: case 34: case 65: case 88: case 90: case 96: case 98: case 104: case 114: case 118: case 121:
this.$ = $$[$0];
break;
case 22:
this.$ = "module "+$$[$0-3]+" = {"+$$[$0-1]+"}";
break;
case 23:
this.$ = ["module ",$$[$0-5]," = {",$$[$0-1]," open ",$$[$0-3],"}"].join("");
break;
case 24:
this.$ = "module type "+$$[$0-3]+" = {"+$$[$0-1]+"}";
break;
case 25:
this.$ = ["module type ",$$[$0-5]," = {",$$[$0-1]," include ",$$[$0-3],"}"].join("");
break;
case 26:
this.$ = [$$[$0-3],$$[$0-8],"(",$$[$0-6],")",$$[$0-1]].join(" ");
break;
case 27:
this.$ = ["let",$$[$0-6],$$[$0-4],"=",$$[$0-1]].join(" ");
break;
case 28:
this.$ = ["let",$$[$0-9],$$[$0-7],$$[$0-4]," = ",$$[$0-1]].join(" ");
break;
case 29:
this.$ = ["let",$$[$0-11],$$[$0-9],$$[$0-6],":",$$[$0-3]," = ",$$[$0-1]].join(" ");
break;
case 36:
this.$ = ["let ",$$[$0-4],":",$$[$0-2],"=",$$[$0]].join(" ");
break;
case 37:
this.$ = "let "+$$[$0-2]+" = "+$$[$0];
break;
case 38:
this.$ = "type "+$$[$0-2]+" = "+$$[$0];
break;
case 39:
this.$ = [$$[$0-2],"=",$$[$0]].join(" ");
break;
case 40:
this.$ = ["let",$$[$0-1],"=",$$[$0-1],"+1.0"].join(" ");
break;
case 41:
this.$ = ["let",$$[$0-1],"=",$$[$0-1],"-1.0"].join(" ");
break;
case 42:
this.$ = ["let",$$[$0-2],"=",$$[$0-2],"+",$$[$0]].join(" ");
break;
case 43:
this.$ = ["let",$$[$0-2],"=",$$[$0-2],"-",$$[$0]].join(" ");
break;
case 44:
this.$ = ["let",$$[$0-2],"=",$$[$0-2],"*",$$[$0]].join(" ");
break;
case 45:
this.$ = ["let",$$[$0-2],"=",$$[$0-2],"/",$$[$0]].join(" ");
break;
case 46:
this.$ = ["(if ",$$[$0-4]," then ",$$[$0-2]," else ",$$[$0],")"].join("")
break;
case 47: case 48: case 49: case 50: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]].join(" ");
break;
case 51:
this.$ = [$$[$0-2],'!=',$$[$0]].join(" ");
break;
case 52:
this.$ = [$$[$0-2],'==',$$[$0]].join(" ");
break;
case 62:
this.$ = "-"+$$[$0];
break;
case 64:
this.$ = "!"+$$[$0];
break;
case 66:
this.$ = $$[$0-2]+"."+$$[$0];
break;
case 68:
this.$ = $$[$0-3]+"["+$$[$0-1]+"]";
break;
case 69:
this.$ = ["(\\",$$[$0-6],":",$$[$0-3],"->",$$[$0-1],")"].join("");
break;
case 70:
this.$ = ["(\\",$$[$0-4],"->",$$[$0-1],")"].join("");
break;
case 71:
this.$= $$[$0-2]+"()";
break;
case 72:
this.$= [$$[$0-3],"(",$$[$0-1],")"].join("");
break;
case 73:
this.$= ["(",$$[$0-3]," ",$$[$0-1],")"].join("");
break;
case 74:
this.$= ["float(",$$[$0-1],")"].join("");
break;
case 75:
this.$ = $$[$0-3]+"("+$$[$0-1]+")";
break;
case 76:

		if($$[$0] == "E"){
			this.$ = Math.E;
		}
		else if($$[$0] == "LOG10E"){
			this.$ = Math.LOG10E;
		}
		else if($$[$0] == "SQRT1_2"){
			this.$ = Math.SQRT1_2;
		}
		else if($$[$0] == "SQRT2"){
			this.$ = Math.SQRT2;
		}
		else if($$[$0] == "PI"){
			this.$ = Math.PI;
		}
	
break;
case 78:
this.$ = "("+$+")";
break;
case 80:
this.$ = "{}";
break;
case 81:
this.$ = "{"+$$[$0-1]+"}";
break;
case 82:
this.$ = "[]";
break;
case 83:
this.$ = "["+$$[$0-1]+"]";
break;
case 84: case 85: case 86:
this.$ = yytext;
break;
case 87: case 95: case 103: case 117:
this.$ = $$[$0-2]+","+$$[$0];
break;
case 89:
this.$ = $$[$0-2]+":"+$$[$0]
break;
case 91:
this.$ = "("+$$[$0-2]+":"+$$[$0]+")";
break;
case 92: case 97:
this.$ = $$[$0-2]+" "+$$[$0];
break;
case 94:
this.$ = ""
break;
case 99:
this.$ = ["else if ",$$[$0-3]," then ",$$[$0-1],$$[$0]].join(" ");
break;
case 100:
this.$ = ["else ",$$[$0]].join("");
break;
case 101:
this.$ = ["if ",$$[$0-3]," then ",$$[$0-1],$$[$0]].join(" ");
break;
case 102:
this.$ = ["if ",$$[$0-2]," then ",$$[$0]].join(" ");
break;
case 105:
this.$= $$[$0-1];
break;
case 107:
this.$ = "[]"+$$[$0-2];
break;
case 108:
this.$ = "[]"+$$[$0-1];
break;
case 109:
this.$="("+$$[$0-1]+")";
break;
case 111:
this.$= "bool";
break;
case 112:
this.$= "f32";
break;
case 113:
this.$="[]u8"
break;
case 115:
this.$ = "'"+$$[$0-2]+" "+$$[$0];
break;
case 116:
this.$ = "'"+$$[$0];
break;
case 119:
this.$ = "val "+$$[$0-3]+":"+$$[$0-1];
break;
}
},
table: [{3:17,4:$V0,6:1,7:2,10:3,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{1:[3]},{3:17,4:$V0,8:[1,28],10:29,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($Vh,[2,15]),{17:[1,30]},{26:[1,31]},{26:[1,32]},{26:[1,33]},o($Vi,[2,20]),{3:35,4:$V0,36:34},{4:$Vj,5:36},{4:$Vj,5:38},{3:46,4:$V0,14:39,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($Vv,[2,35]),{26:[1,57]},{3:58,4:$V0},{3:59,4:$V0,79:$Vw},o([4,79],$Vx,{52:[1,61],53:[1,62],54:[1,63],55:[1,64],56:[1,65],57:[1,66],58:[1,67]}),{4:[2,31]},{4:[2,32]},{4:[2,33]},{42:[1,68]},{3:71,4:$V0,98:69,99:70,100:$Ve,101:$Vf,102:$Vg},o($Vy,[2,110]),o([4,15,17,26,27,28,29,42,44,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,79,80,90],[2,1]),o($Vz,[2,111]),o($Vz,[2,112]),o($Vz,[2,113]),{1:[2,3]},o($Vh,[2,14]),o($Vi,[2,16]),{3:46,4:$V0,14:72,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:73,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:17,4:$V0,24:75,33:74,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($Vi,[2,21]),{26:$VA,42:$VB},{28:[1,78],39:[1,79]},o([26,28,39],[2,2]),{28:[1,80],39:[1,81]},o($Vv,[2,34],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{3:46,4:$V0,14:98,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VS,[2,63]),{3:46,4:$V0,26:$Vk,28:$Vl,35:$Vm,75:99,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VS,[2,65]),o($VS,[2,67],{77:[1,100],79:[1,101]}),{26:[1,102]},o($VT,[2,85],{26:[1,103]}),{4:$Vj,5:104},{26:[1,105]},{77:[1,106]},o($VT,[2,77]),{3:46,4:$V0,14:107,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VT,[2,79]),{3:111,4:$V0,29:[1,108],87:109,91:110},{3:46,4:$V0,14:114,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,80:[1,112],81:$Vq,82:113,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VT,[2,84]),o($VT,[2,86]),{3:46,4:$V0,14:115,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{15:[1,116],52:[1,117]},{52:[1,118]},{80:[1,119]},{3:46,4:$V0,14:120,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($Vv,[2,40]),o($Vv,[2,41]),{3:46,4:$V0,14:121,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:122,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:123,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:124,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:71,4:$V0,51:125,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{80:[1,126]},{80:[2,118],90:[1,127]},o([17,27,28,44,52,79,80,90],$Vx),{27:[1,128],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{27:[1,129],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{17:[1,130]},o($Vv,[2,30]),{3:133,4:$V0,27:$VU,41:131,92:132},{3:135,4:$V0,43:134},{3:138,4:$V0,36:139,38:136,103:137,104:$VV},{4:$Vj,5:141},{3:138,4:$V0,36:139,38:142,103:137,104:$VV},{4:$Vj,5:143},{3:46,4:$V0,14:144,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:145,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:146,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:147,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:148,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:149,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:150,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:151,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:152,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:153,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:154,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:155,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:156,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:157,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:158,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:159,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VS,[2,62]),o($VS,[2,64]),{3:46,4:$V0,26:$Vk,28:$Vl,35:$Vm,75:160,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:161,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:133,4:$V0,27:$VU,41:162,92:132},{3:46,4:$V0,14:165,26:$Vk,27:[1,163],28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,83:164,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{26:[1,166]},{3:46,4:$V0,14:114,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,82:167,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:168,4:$V0},{27:[1,169],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($VT,[2,80]),{29:[1,170],90:[1,171]},o($VW,[2,88]),{15:[1,172]},o($VT,[2,82]),{80:[1,173]},o($VX,[2,96],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,90:[1,174]}),{27:[1,175],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{3:71,4:$V0,51:176,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:46,4:$V0,14:177,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:46,4:$V0,14:178,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($Vy,[2,107]),o($Vv,[2,39],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vv,[2,42],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vv,[2,43],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vv,[2,44],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vv,[2,45],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{44:[1,179],79:$Vw},o($Vy,[2,109]),{3:135,4:$V0,43:180},{28:[1,181]},{3:17,4:$V0,24:184,28:$VY,31:182,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:46,4:$V0,14:185,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{27:[1,186]},{27:[2,93],90:[1,187]},o($VZ,[2,90],{15:[1,188]}),{44:[1,189]},o($V_,[2,116],{90:[1,190]}),{29:[1,191]},{3:138,4:$V0,29:[2,123],36:139,38:192,103:137,104:$VV},{15:[1,193],26:$VA,42:$VB},o($V$,[2,120]),{3:35,4:$V0,36:194},{28:[1,195]},{29:[1,196]},{28:[1,197]},{15:[1,198],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($V01,[2,47],{42:$VC,44:$VD,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V01,[2,48],{42:$VC,44:$VD,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V11,[2,49],{42:$VC,44:$VD,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V11,[2,50],{42:$VC,44:$VD,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,51],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,52],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,53],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,54],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,55],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V21,[2,56],{68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($V31,[2,57],{70:$VP,71:$VQ,72:$VR}),o($V31,[2,58],{70:$VP,71:$VQ,72:$VR}),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,66]),{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,80:[1,199]},{27:[1,200]},o($VT,[2,71]),{27:[1,201]},{27:[2,98],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,90:[1,202]},{3:46,4:$V0,14:114,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,82:203,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{27:[1,204]},o($VT,[2,76],{26:[1,205]}),o($VT,[2,78]),o($VT,[2,81]),{3:111,4:$V0,91:206},{3:46,4:$V0,14:207,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VT,[2,83]),{3:46,4:$V0,14:114,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,82:208,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{3:17,4:$V0,24:184,28:$VY,31:209,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{52:[1,210],79:$Vw},o($Vv,[2,37],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vv,[2,38],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vy,[2,108]),{80:[2,117]},{12:213,13:$V41,18:212,19:211},o($Vi,[2,18]),{3:17,4:$V0,9:216,10:217,11:215,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{17:[1,218]},{17:[1,219],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{15:[1,220],28:[1,221]},{3:133,4:$V0,27:$VU,41:222,92:132},{3:71,4:$V0,51:223,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{26:[1,224]},{3:135,4:$V0,43:225},o($Vi,[2,22]),{29:[2,122]},{3:71,4:$V0,51:226,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($V$,[2,121]),{3:138,4:$V0,36:139,38:227,103:137,104:$VV},o($Vi,[2,24]),{3:138,4:$V0,36:139,38:228,103:137,104:$VV},{3:46,4:$V0,14:229,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VT,[2,68]),{15:[1,230],28:[1,231]},o($VT,[2,73]),{3:46,4:$V0,14:165,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,83:232,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{27:[1,233]},o($VT,[2,74]),{3:46,4:$V0,14:234,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},o($VW,[2,87]),o($VW,[2,89],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($VX,[2,95]),o($Vi,[2,102],{93:235,94:$V51}),{3:46,4:$V0,14:237,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{29:[1,238]},{20:[1,239],29:[2,11]},o($V61,[2,9],{12:213,18:240,13:$V41}),{3:46,4:$V0,14:241,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{29:[1,242]},o($V71,[2,6]),o($V71,[2,5],{24:4,34:8,50:13,45:15,51:16,3:17,99:23,10:217,9:243,4:$V0,25:$V1,30:$V2,32:$V3,35:$V4,37:$V5,40:$V6,46:$V7,47:$V8,48:$V9,49:$Va,79:$Vb,95:$Vc,97:$Vd,100:$Ve,101:$Vf,102:$Vg}),o($V81,[2,106]),{3:17,4:$V0,24:75,33:244,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:245,4:$V0},{3:17,4:$V0,9:216,10:217,11:246,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{27:[2,92]},o($VZ,[2,91],{79:$Vw}),{3:133,4:$V0,27:$VU,41:247,92:132},o($V_,[2,115]),{17:[1,248],79:$Vw},{29:[1,249]},{29:[1,250]},o([15,17,27,29,80,90],[2,46],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),{3:71,4:$V0,51:251,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:17,4:$V0,9:216,10:217,11:252,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{27:[2,97]},o($VT,[2,72]),{27:[1,253],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($Vi,[2,101]),{3:17,4:$V0,24:184,28:$VY,31:255,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:[1,254],97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($Vv,[2,36],{42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR}),o($Vi,[2,17]),{15:[1,256]},o($V61,[2,8]),{15:[1,257],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},o($V81,[2,105]),o($V71,[2,4]),{27:[1,258]},{28:[1,259]},{29:[1,260]},{27:[1,261]},o($V$,[2,119]),o($Vi,[2,23]),o($Vi,[2,25]),{28:[1,262],79:$Vw},{29:[1,263]},o($VT,[2,75]),{26:[1,264]},o($Vi,[2,100]),{3:17,4:$V0,9:216,10:217,11:265,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:17,4:$V0,9:216,10:217,11:266,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:17,4:$V0,24:184,28:$VY,31:267,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:17,4:$V0,9:216,10:217,11:268,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($V91,[2,27]),{15:[1,270],28:[1,269]},{3:17,4:$V0,9:216,10:217,11:271,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o($VT,[2,70]),{3:46,4:$V0,14:272,26:$Vk,28:$Vl,35:$Vm,69:$Vn,73:41,74:$Vo,75:43,76:44,78:50,79:$Vp,81:$Vq,84:$Vr,85:$Vs,86:52,88:$Vt,89:$Vu},{29:[2,10]},{16:[1,273]},o($Vi,[2,19]),{29:[1,274]},{3:17,4:$V0,9:216,10:217,11:275,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{3:276,4:$V0},{29:[1,277]},{27:[1,278],42:$VC,44:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR},{17:[1,279]},o($V91,[2,26]),{29:[1,280]},{28:[1,281]},o($VT,[2,69]),{3:17,4:$V0,24:184,28:$VY,31:282,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},o([13,20,29],[2,7]),o($V91,[2,28]),{3:17,4:$V0,9:216,10:217,11:283,24:4,25:$V1,30:$V2,32:$V3,34:8,35:$V4,37:$V5,40:$V6,45:15,46:$V7,47:$V8,48:$V9,49:$Va,50:13,51:16,79:$Vb,95:$Vc,97:$Vd,99:23,100:$Ve,101:$Vf,102:$Vg},{93:284,94:$V51},{29:[1,285]},o($Vi,[2,99]),o($V91,[2,29])],
defaultActions: {18:[2,31],19:[2,32],20:[2,33],28:[2,3],180:[2,117],192:[2,122],222:[2,92],232:[2,97],265:[2,10]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 88
break;
case 4:return 89
break;
case 5:return "$"
break;
case 6:return "function"
break;
case 7:return "continue"
break;
case 8:return "interface"
break;
case 9:return 'export'
break;
case 10:return 23
break;
case 11:return 22
break;
case 12:return 39
break;
case 13:return "typeof"
break;
case 14:return "class"
break;
case 15:return "static"
break;
case 16:return 46
break;
case 17:return 95
break;
case 18:return 81
break;
case 19:return 94
break;
case 20:return 'type'
break;
case 21:return "case"
break;
case 22:return 20
break;
case 23:return 49
break;
case 24:return 'yield'
break;
case 25:return 30
break;
case 26:return 25
break;
case 27:return 16
break;
case 28:return 32
break;
case 29:return 48
break;
case 30:return 47
break;
case 31:return 'of'
break;
case 32:return "Math"
break;
case 33:return 101
break;
case 34:return 100
break;
case 35:return 84
break;
case 36:return 97
break;
case 37:return 90
break;
case 38:return 17
break;
case 39:return '...'
break;
case 40:return 77
break;
case 41:return 15
break;
case 42:return 62
break;
case 43:return 63
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 67
break;
case 47:return 44
break;
case 48:return 66
break;
case 49:return 42
break;
case 50:return '=>'
break;
case 51:return 65
break;
case 52:return 64
break;
case 53:return "!"
break;
case 54:return 52
break;
case 55:return 72
break;
case 56:return 57
break;
case 57:return 70
break;
case 58:return 58
break;
case 59:return 71
break;
case 60:return 56
break;
case 61:return 54
break;
case 62:return 69
break;
case 63:return 53
break;
case 64:return 55
break;
case 65:return 68
break;
case 66:return '^'
break;
case 67:return 28
break;
case 68:return 29
break;
case 69:return 79
break;
case 70:return 80
break;
case 71:return 59
break;
case 72:return 26
break;
case 73:return 27
break;
case 74:return 4
break;
case 75:return 8
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:interface\b)/,/^(?:export\b)/,/^(?:private\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:static\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:new\b)/,/^(?:else\b)/,/^(?:type\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:of\b)/,/^(?:Math\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:Number\b)/,/^(?:Array\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=>)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = typescript_to_futhark;
exports.Parser = typescript_to_futhark.Parser;
exports.parse = function () { return typescript_to_futhark.parse.apply(typescript_to_futhark, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}