/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var simit_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,12],$V3=[1,6],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[5,18,75,76],$V8=[1,31],$V9=[1,30],$Va=[1,39],$Vb=[1,43],$Vc=[1,47],$Vd=[1,33],$Ve=[1,34],$Vf=[1,36],$Vg=[1,45],$Vh=[1,44],$Vi=[1,46],$Vj=[5,14,18,19,20,23,26,28,31,75,76],$Vk=[1,63],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[17,25,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,68,73],$VB=[17,25,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,63,68,73],$VC=[2,64],$VD=[1,89],$VE=[1,88],$VF=[2,70],$VG=[1,96],$VH=[17,25,63],$VI=[68,73],$VJ=[1,128],$VK=[17,73],$VL=[17,25,40,41,43,44,63,68,73],$VM=[17,25,40,41,43,44,45,46,63,68,73],$VN=[17,25,40,41,43,44,45,46,47,48,49,50,51,52,63,68,73],$VO=[17,25,40,41,43,44,45,46,47,48,49,50,51,52,53,54,63,68,73],$VP=[1,150],$VQ=[1,151];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"case_statement":8,"case":9,"parentheses_expr":10,"case_statements_":11,"case_statements":12,"otherwise":13,"while":14,"(":15,"e":16,")":17,"end":18,"func":19,"IDENTIFIER":20,"=":21,"parameters":22,"function":23,"statement_with_semicolon":24,";":25,"if":26,"elif_":27,"import":28,"from":29,"STRING_LITERAL":30,"continue":31,"access_array":32,"++":33,"--":34,"+=":35,"-=":36,"*=":37,"/=":38,"function_call":39,"?":40,":":41,"...":42,"or":43,"|":44,"and":45,"&":46,"!=":47,"==":48,"<=":49,"<":50,">=":51,">":52,"+":53,"-":54,"*":55,"/":56,"%":57,"not_expr":58,"not":59,"dot_expr":60,".":61,"[":62,"]":63,"exprs":64,"@":65,"parentheses_expr_":66,"{":67,"}":68,"key_values":69,"matrix_exprs":70,"NUMBER":71,"parameter":72,",":73,"key_value":74,"elif":75,"else":76,"identifiers":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"case",13:"otherwise",14:"while",15:"(",17:")",18:"end",19:"func",20:"IDENTIFIER",21:"=",23:"function",25:";",26:"if",28:"import",29:"from",30:"STRING_LITERAL",31:"continue",33:"++",34:"--",35:"+=",36:"-=",37:"*=",38:"/=",40:"?",41:":",42:"...",43:"or",44:"|",45:"and",46:"&",47:"!=",48:"==",49:"<=",50:"<",51:">=",52:">",53:"+",54:"-",55:"*",56:"/",57:"%",59:"not",61:".",62:"[",63:"]",65:"@",67:"{",68:"}",71:"NUMBER",73:",",75:"elif",76:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,3],[11,2],[11,1],[12,3],[12,1],[6,6],[6,9],[6,7],[6,2],[6,7],[6,6],[24,4],[24,1],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,3],[24,3],[24,1],[16,5],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[58,2],[58,1],[60,3],[60,1],[32,4],[39,3],[39,4],[10,7],[10,1],[10,1],[10,3],[10,1],[66,2],[66,3],[66,2],[66,3],[66,3],[66,1],[66,1],[66,1],[72,3],[72,1],[22,3],[22,1],[22,0],[64,3],[64,1],[70,3],[70,3],[69,3],[69,1],[74,3],[74,3],[27,6],[27,2],[77,3],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 49: case 69:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 8:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 10:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["function_with_retval",$$[$0-7],"public","void",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["function","public","void",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["semicolon",$$[$0-1]];
break;
case 14:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 15:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["import_from",$$[$0-2],$$[$0]];
break;
case 17: case 72: case 76: case 82:
this.$ = [$$[$0]];
break;
case 18: case 19:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 20: case 21:
this.$ = [$$[$0],$$[$0-1]];
break;
case 22: case 23: case 24: case 25: case 30: case 32: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 28:
this.$=["unpack_array",$$[$0]]
break;
case 29:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["-",$$[$0]];
break;
case 46:
this.$ = ["!", [".",$$[$0]]];
break;
case 47:
this.$ = [".", $$[$0]];
break;
case 48: case 68: case 71: case 81:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 50:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 51:
this.$= ["function_call",$$[$0-2],[]];
break;
case 52:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 53:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 56:
this.$ = ["parentheses",$$[$0-1]];
break;
case 58:
this.$ = ["associative_array","Object","Object",[]];
break;
case 59:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 60:
this.$ = ["initializer_list","Object",[]];
break;
case 61: case 62:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 63: case 64: case 65:
this.$ = yytext;
break;
case 66:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 67:
this.$ = ["Object", $$[$0]];
break;
case 70:
this.$ = []
break;
case 73:
this.$ = [["initializer_list","Object",$$[$0-2]]].concat($$[$0]);
break;
case 74:
this.$ = [["initializer_list","Object",$$[$0-2]],["initializer_list","Object",$$[$0]]]
break;
case 75:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 77:
this.$ = [$$[$0-2],$$[$0]]
break;
case 78:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 79:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 80:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},{1:[3]},{5:[1,14]},o($V7,[2,3],{6:3,24:7,32:11,39:13,4:15,14:$V0,19:$V1,20:$V2,23:$V3,26:$V4,28:$V5,31:$V6}),{15:[1,16]},{20:[1,17]},{20:[1,18]},{25:[1,19]},{15:[1,20]},{20:[1,21]},{25:[2,17]},{21:[1,22]},{15:$V8,21:[1,23],33:[1,24],34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:[1,29],62:$V9},{25:[2,26]},{1:[2,1]},o($V7,[2,2]),{10:38,15:$Va,16:32,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{21:[1,48]},{15:[1,49]},o($Vj,[2,13]),{10:38,15:$Va,16:50,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{29:[1,51]},{10:38,15:$Va,16:52,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:53,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{25:[2,20]},{25:[2,21]},{10:38,15:$Va,16:54,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:55,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:56,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:57,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:58,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:61,17:[1,59],20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,64:60,66:42,67:$Vh,71:$Vi},{17:[1,62],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{10:38,15:$Va,16:79,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:80,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},o($VA,[2,45]),{10:38,15:$Va,20:$Vb,30:$Vc,32:41,39:40,60:81,62:$Vg,66:42,67:$Vh,71:$Vi},o($VA,[2,47]),o($VA,[2,49],{61:[1,82]}),{10:38,15:$Va,16:84,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,65:[1,83],66:42,67:$Vh,71:$Vi},o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,57]),o($VB,$VC,{15:$V8,62:$V9}),{20:$VD,30:$VE,68:[1,85],69:86,74:87},{10:38,15:$Va,16:61,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,63:[1,90],64:91,66:42,67:$Vh,70:92,71:$Vi},o($VB,[2,63]),o($VB,[2,65]),{20:[1,93]},{17:$VF,20:$VG,22:94,72:95},{17:[1,97],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{30:[1,98]},{25:[2,18],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{25:[2,19],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{25:[2,22],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{25:[2,23],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{25:[2,24],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{25:[2,25],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,63:[1,99]},o($VB,[2,51]),{17:[1,100]},o($VH,[2,72],{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,73:[1,101]}),{4:103,6:3,7:102,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},{10:38,15:$Va,16:104,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:105,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:106,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:107,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:108,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:109,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:110,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:111,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:112,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:113,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:114,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:115,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:116,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:117,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:118,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:119,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},o([17,25,40,41,63,68,73],[2,28],{43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VA,[2,44]),o($VA,[2,46]),{10:38,15:$Va,20:$Vb,30:$Vc,32:41,39:40,60:120,62:$Vg,66:42,67:$Vh,71:$Vi},{15:[1,121]},{17:[1,122],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},o($VB,[2,58]),{68:[1,123],73:[1,124]},o($VI,[2,76]),{41:[1,125]},{41:[1,126]},o($VB,[2,60]),{25:$VJ,63:[1,127]},{63:[1,129]},{15:[1,130]},{17:[1,131]},{17:[2,69],73:[1,132]},o($VK,[2,67],{21:[1,133]}),{4:103,6:3,7:134,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},{25:[2,16]},o([17,21,25,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,63,68,73],[2,50]),o($VB,[2,52]),{10:38,15:$Va,16:61,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,64:135,66:42,67:$Vh,71:$Vi},{18:[1,136]},o([18,75,76],[2,4]),{40:$Vk,41:[1,137],43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},o($VL,[2,29],{45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VL,[2,30],{45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VM,[2,31],{47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VM,[2,32],{47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,33],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,34],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,35],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,36],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,37],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VN,[2,38],{53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VO,[2,39],{55:$Vx,56:$Vy,57:$Vz}),o($VO,[2,40],{55:$Vx,56:$Vy,57:$Vz}),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,43]),o($VA,[2,48]),{17:$VF,20:$VG,22:138,72:95},o($VB,[2,56]),o($VB,[2,59]),{20:$VD,30:$VE,74:139},{10:38,15:$Va,16:140,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{10:38,15:$Va,16:141,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},o($VB,[2,61]),{10:38,15:$Va,16:61,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,64:143,66:42,67:$Vh,70:142,71:$Vi},o($VB,[2,62]),{17:$VF,20:$VG,22:144,72:95},{4:103,6:3,7:145,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},{17:$VF,20:$VG,22:146,72:95},{10:38,15:$Va,16:147,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{18:[1,149],27:148,75:$VP,76:$VQ},o($VH,[2,71]),o($Vj,[2,10]),{10:38,15:$Va,16:152,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{17:[1,153]},o($VI,[2,75]),o($VI,[2,77],{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),o($VI,[2,78],{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),{63:[2,73]},{25:$VJ,63:[2,74]},{17:[1,154]},{18:[1,155]},{17:[2,68]},o($VK,[2,66],{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),{18:[1,156]},o($Vj,[2,15]),{15:[1,157]},{4:103,6:3,7:158,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},o([17,25,41,63,68,73],[2,27],{40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz}),{20:[1,160],30:$Vc,62:$Vg,66:159,67:$Vh,71:$Vi},{4:103,6:3,7:161,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},o($Vj,[2,12]),o($Vj,[2,14]),{10:38,15:$Va,16:162,20:$Vb,30:$Vc,32:41,39:40,42:$Vd,54:$Ve,58:35,59:$Vf,60:37,62:$Vg,66:42,67:$Vh,71:$Vi},{18:[2,80]},{17:[1,163]},{17:$VC},{18:[1,164]},{17:[1,165],40:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz},o($VB,[2,53]),o($Vj,[2,11]),{4:103,6:3,7:166,14:$V0,19:$V1,20:$V2,23:$V3,24:7,26:$V4,28:$V5,31:$V6,32:11,39:13},{27:167,75:$VP,76:$VQ},{18:[2,79]}],
defaultActions: {10:[2,17],13:[2,26],14:[2,1],24:[2,20],25:[2,21],98:[2,16],142:[2,73],146:[2,68],158:[2,80],160:[2,64],167:[2,79]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 71
break;
case 2:return 30
break;
case 3:return "$"
break;
case 4:return "@"
break;
case 5:return "import"
break;
case 6:return "from"
break;
case 7:return "end"
break;
case 8:return "endwhile"
break;
case 9:return "endfor"
break;
case 10:return "endswitch"
break;
case 11:return "func"
break;
case 12:return "continue"
break;
case 13:return "typeof"
break;
case 14:return "class"
break;
case 15:return 'const'
break;
case 16:return 75
break;
case 17:return 26
break;
case 18:return 76
break;
case 19:return "case"
break;
case 20:return 13
break;
case 21:return 'return'
break;
case 22:return 'yield'
break;
case 23:return 14
break;
case 24:return 'switch'
break;
case 25:return 'break'
break;
case 26:return 'for'
break;
case 27:return 'var'
break;
case 28:return 'of'
break;
case 29:return 73
break;
case 30:return 25
break;
case 31:return 42
break;
case 32:return 61
break;
case 33:return 41
break;
case 34:return 45
break;
case 35:return 46
break;
case 36:return 43
break;
case 37:return 44
break;
case 38:return 51
break;
case 39:return 52
break;
case 40:return 49
break;
case 41:return 50
break;
case 42:return 48
break;
case 43:return 47
break;
case 44:return "not"
break;
case 45:return 21
break;
case 46:return 57
break;
case 47:return 37
break;
case 48:return 55
break;
case 49:return 38
break;
case 50:return 56
break;
case 51:return 36
break;
case 52:return 34
break;
case 53:return 54
break;
case 54:return 33
break;
case 55:return 35
break;
case 56:return 53
break;
case 57:return '^'
break;
case 58:return 67
break;
case 59:return 68
break;
case 60:return 62
break;
case 61:return 63
break;
case 62:return 40
break;
case 63:return 15
break;
case 64:return 17
break;
case 65:return 'instanceof'
break;
case 66:return 'in'
break;
case 67:return 20
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@)/,/^(?:import\b)/,/^(?:from\b)/,/^(?:end\b)/,/^(?:endwhile\b)/,/^(?:endfor\b)/,/^(?:endswitch\b)/,/^(?:func\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:const\b)/,/^(?:elif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:otherwise\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:and\b)/,/^(?:&)/,/^(?:or\b)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:not\b)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:instanceof\b)/,/^(?:in\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = simit_parser;
exports.Parser = simit_parser.Parser;
exports.parse = function () { return simit_parser.parse.apply(simit_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}