/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,23],$Vd=[1,24],$Ve=[5,18,47],$Vf=[5,15,16,18,24,29,30,32,34,38,40,47,52,53,54,70,108],$Vg=[1,30],$Vh=[23,27],$Vi=[1,54],$Vj=[1,50],$Vk=[1,46],$Vl=[1,49],$Vm=[1,39],$Vn=[1,40],$Vo=[1,42],$Vp=[1,45],$Vq=[1,51],$Vr=[1,53],$Vs=[1,70],$Vt=[1,68],$Vu=[1,69],$Vv=[2,99],$Vw=[1,80],$Vx=[1,101],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[23,27,42,46,58,68,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,104],$VR=[23,27,42,46,58,68,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,104],$VS=[1,134],$VT=[5,15,16,18,24,29,30,32,34,38,40,47,52,53,54,70,106,107,108],$VU=[2,105],$VV=[1,149],$VW=[27,58],$VX=[1,184],$VY=[1,185],$VZ=[2,5],$V_=[1,188],$V$=[16,42,87,108],$V01=[27,42],$V11=[23,27,42,46,58,73,76,77,104],$V21=[23,27,42,46,58,73,76,77,78,79,104],$V31=[23,27,42,46,58,73,76,77,78,79,80,81,82,84,85,87,104],$V41=[23,27,42,46,58,73,76,77,78,79,80,81,82,83,84,85,86,87,104],$V51=[23,27,42,46,58,68,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,104],$V61=[1,225],$V71=[1,231],$V81=[1,232],$V91=[18,49];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"identifiers":21,"statement_with_semicolon":22,";":23,"while":24,"(":25,"e":26,")":27,"bracket_statements":28,"do":29,"switch":30,"case_statements":31,"for":32,"statement_with_semicolon_":33,"foreach":34,"var_name":35,"as":36,"=>":37,"if":38,"elif":39,"function":40,"parameters":41,",":42,"initialize_var1":43,"case_statement":44,"case":45,":":46,"break":47,"case_statements_":48,"default":49,"static":50,"type":51,"System.out.println":52,"return":53,"continue":54,"=":55,"parallel_assignment":56,"[":57,"]":58,"access_array":59,"++":60,"--":61,"+=":62,"%=":63,"-=":64,"*=":65,"/=":66,"function_call":67,".":68,"dot_expr":69,"list":70,"parallel_lhs":71,"parallel_rhs":72,"?":73,"...":74,"parentheses_expr":75,"||":76,"or":77,"&&":78,"and":79,"!==":80,"===":81,"<=":82,"<<":83,"<":84,">=":85,">>":86,">":87,"+":88,"-":89,"*":90,"/":91,"%":92,"not_expr":93,"!":94,"->":95,"access_arr":96,"exprs":97,"new":98,"NUMBER":99,"STRING_LITERAL":100,"types":101,"parameter":102,"&":103,"][":104,"else_if":105,"else":106,"elseif":107,"$":108,"var_names":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",23:";",24:"while",25:"(",27:")",29:"do",30:"switch",32:"for",34:"foreach",36:"as",37:"=>",38:"if",40:"function",42:",",43:"initialize_var1",45:"case",46:":",47:"break",49:"default",50:"static",52:"System.out.println",53:"return",54:"continue",55:"=",57:"[",58:"]",60:"++",61:"--",62:"+=",63:"%=",64:"-=",65:"*=",66:"/=",68:".",70:"list",73:"?",74:"...",76:"||",77:"or",78:"&&",79:"and",80:"!==",81:"===",82:"<=",83:"<<",84:"<",85:">=",86:">>",87:">",88:"+",89:"-",90:"*",91:"/",92:"%",94:"!",95:"->",98:"new",99:"NUMBER",100:"STRING_LITERAL",103:"&",104:"][",106:"else",107:"elseif",108:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,0],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,7],[14,7],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[21,3],[21,1],[33,1],[33,1],[44,6],[48,2],[48,1],[31,4],[31,1],[10,10],[22,4],[22,2],[22,1],[22,1],[22,4],[22,1],[22,5],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,3],[56,9],[71,3],[71,3],[72,3],[72,3],[26,5],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[93,2],[93,1],[69,3],[69,1],[59,4],[67,4],[67,3],[75,5],[75,7],[75,1],[75,1],[75,2],[75,3],[75,3],[75,1],[75,1],[75,1],[51,3],[51,4],[51,1],[102,1],[102,2],[102,3],[41,3],[41,1],[41,0],[96,3],[96,1],[97,3],[97,1],[101,3],[101,1],[105,2],[105,1],[39,6],[39,5],[39,2],[35,2],[109,3],[109,1],[28,3],[28,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7: case 30:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 31: case 83: case 104: case 107:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["class_statements",[]]
break;
case 6:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["class","public",$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["class_implements","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14: case 121:
this.$ = ["semicolon",$$[$0-1]];
break;
case 16:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 18:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 21:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 23:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25: case 82: case 103: case 106: case 108: case 110: case 118:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 26: case 109: case 111: case 119:
this.$ = [$$[$0]];
break;
case 29:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 32:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 34:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["println",$$[$0-1]];
break;
case 36:
this.$ = ["return",$$[$0]];
break;
case 37:
this.$ = ["return"];
break;
case 38:
this.$ = ["continue"];
break;
case 39:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 42: case 43:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 44: case 45:
this.$ = [$$[$0],$$[$0-1]];
break;
case 46: case 47: case 48: case 49: case 50: case 60: case 62: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-6]],["parallel_rhs",$$[$0-1]]]
break;
case 54: case 56:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 55: case 57:
this.$ = [$$[$0-2],$$[$0]]
break;
case 58:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 59:
this.$ = ["unpack_array",$$[$0]]
break;
case 61:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 63:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 64:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 65:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 78:
this.$ = ["-",$$[$0]];
break;
case 80:
this.$ = ["!", [".",$$[$0]]];
break;
case 81:
this.$ = [".", $$[$0]];
break;
case 84:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 85:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 86:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 87:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 88:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 91:
this.$ = ["initializer_list","Object",[]];
break;
case 92:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 93:
this.$ = $$[$0-1];
break;
case 94: case 95: case 96:
this.$ = yytext;
break;
case 97:
this.$ = [$$[$0-2],"[]"];
break;
case 98:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 100:
this.$ = ["Object", $$[$0]];
break;
case 101:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 102:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 105:
this.$ = [];
break;
case 114:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 115:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["else",$$[$0]];
break;
case 117:
this.$ = $$[$0];
break;
case 120:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{1:[3]},{5:[1,25]},o($Ve,[2,3],{6:3,22:4,14:5,51:16,56:17,35:18,59:19,67:20,4:26,15:$V0,16:$V1,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,38:$V7,40:$V8,52:$V9,53:$Va,54:$Vb,70:$Vc,108:$Vd}),{23:[1,27]},o($Vf,[2,15]),{25:[1,28]},{16:$V1,17:$Vg,22:31,28:29,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{25:[1,32]},{25:[1,33]},{25:[1,34]},{25:[1,35]},{16:[1,36]},{25:[1,37]},o($Vh,[2,37],{26:38,93:41,69:43,75:44,59:47,67:48,35:52,16:$Vi,25:$Vj,40:$Vk,57:$Vl,74:$Vm,89:$Vn,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd}),o($Vh,[2,38]),{35:55,108:$Vd},o($Vh,[2,40]),{55:[1,57],57:[1,56],60:[1,58],61:[1,59],62:[1,60],63:[1,61],64:[1,62],65:[1,63],66:[1,64],68:[1,65]},{55:[1,66]},o($Vh,[2,51]),{16:[1,67]},{25:$Vs,57:$Vt,84:$Vu,108:$Vv},{25:[1,71]},{16:[1,72]},{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,14]),{16:$Vi,25:$Vj,26:73,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{24:[1,74]},{4:76,6:3,9:75,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{23:[1,77]},{16:$Vi,25:$Vj,26:78,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$V1,22:81,33:79,35:18,43:$Vw,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{35:82,108:$Vd},{16:$Vi,25:$Vj,26:83,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{25:[1,84]},{16:$Vi,25:$Vj,26:85,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($Vh,[2,36],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),{16:$Vi,25:$Vj,35:52,40:$Vk,57:$Vl,59:47,67:48,75:105,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:106,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VQ,[2,79]),{16:$Vi,25:$Vj,35:52,40:$Vk,57:$Vl,59:47,67:48,69:107,75:44,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VQ,[2,81]),o($VQ,[2,83],{95:[1,108]}),{15:[1,109]},{25:[1,110]},o($VR,[2,89]),o($VR,[2,90]),{16:$Vi,25:$Vj,26:113,35:52,40:$Vk,57:$Vl,58:[1,111],59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,97:112,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:114,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VR,[2,94]),o($VR,[2,95],{57:[1,115]}),o($VR,[2,96]),{25:$Vs},{55:[1,116]},{16:$Vi,25:$Vj,26:119,35:52,40:$Vk,57:$Vl,58:[1,117],59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,96:118,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:120,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($Vh,[2,44]),o($Vh,[2,45]),{16:$Vi,25:$Vj,26:121,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:122,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:123,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:124,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:125,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,35:52,40:$Vk,57:$Vl,59:47,67:48,69:126,75:44,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:127,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{17:[1,128],19:[1,129],20:[1,130]},{58:[1,131]},{16:$VS,51:133,101:132},{16:$Vi,25:$Vj,26:113,27:[1,136],35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,97:135,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{35:138,71:137,108:$Vd},o([23,27,36,37,42,46,55,57,58,60,61,62,63,64,65,66,68,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,104],[2,117]),{27:[1,139],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{25:[1,140]},{18:[1,141]},o([18,47],[2,6]),o($VT,[2,121]),{27:[1,142],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{23:[1,143]},o($Vh,[2,27]),o($Vh,[2,28]),{36:[1,144]},{27:[1,145],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{27:$VU,35:148,41:146,102:147,103:$VV,108:$Vd},{27:[1,150],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{16:$Vi,25:$Vj,26:151,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:152,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:153,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:154,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:155,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:156,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:157,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:158,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:159,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:160,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:161,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:162,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:163,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:164,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:165,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:166,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:167,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:168,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:169,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VQ,[2,59]),o($VQ,[2,78]),o($VQ,[2,80]),{16:$Vi,25:$Vj,35:52,40:$Vk,57:$Vl,59:47,67:48,69:170,75:44,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{17:[1,171]},{27:$VU,35:148,41:172,102:147,103:$VV,108:$Vd},o($VR,[2,91]),{58:[1,173]},o($VW,[2,109],{42:[1,174],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),{27:[1,175],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{16:$Vi,25:$Vj,26:119,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,96:118,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:176,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{55:[1,177]},{58:[1,178]},{58:[2,107],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,104:[1,179]},o($Vh,[2,43],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,46],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,47],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,48],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,49],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,50],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($Vh,[2,52]),o($Vh,[2,42],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),{7:180,8:181,10:182,11:183,12:$VX,13:$VY,18:$VZ},{16:[1,186]},{16:$V_,21:187},o($V$,[2,97]),{87:[1,189]},{42:[1,190],87:[2,111]},o([16,42,87],$Vv,{57:$Vt,84:$Vu}),{27:[1,191]},o($VR,[2,86]),{27:[1,192],42:[1,193]},{42:[1,194]},{16:$V1,17:$Vg,22:31,28:195,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{16:$Vi,25:$Vj,26:196,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VT,[2,120]),{17:[1,197]},{16:$Vi,25:$Vj,26:198,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{35:199,108:$Vd},{16:$V1,17:$Vg,22:31,28:200,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{27:[1,201]},{27:[2,104],42:[1,202]},o($V01,[2,100],{55:[1,203]}),{35:204,108:$Vd},o($Vh,[2,35]),{46:[1,205],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},o($V11,[2,60],{68:$Vx,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V11,[2,61],{68:$Vx,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V21,[2,62],{68:$Vx,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V21,[2,63],{68:$Vx,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,64],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,65],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,66],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V41,[2,67],{68:$Vx,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,68],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,69],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V41,[2,70],{68:$Vx,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V31,[2,71],{68:$Vx,83:$VG,86:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V51,[2,72],{90:$VN,91:$VO,92:$VP}),o($V51,[2,73],{90:$VN,91:$VO,92:$VP}),o($V51,[2,74],{90:$VN,91:$VO,92:$VP}),o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,77]),o($VQ,[2,82]),{4:76,6:3,9:206,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{27:[1,207]},o($VR,[2,92]),{16:$Vi,25:$Vj,26:113,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,97:208,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($VR,[2,93]),o($Vh,[2,39],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),{16:$Vi,25:$Vj,26:209,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o([23,27,42,46,55,58,68,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,104],[2,84]),{16:$Vi,25:$Vj,26:119,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,96:210,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{18:[1,211]},{18:[2,4]},{8:212,10:182,11:183,12:$VX,13:$VY,18:[2,8]},{50:[1,213]},{50:[2,9]},{50:[2,10]},{17:[1,214]},{17:[1,215]},{17:[2,26],42:[1,216]},o($V$,[2,98]),{16:$VS,51:133,101:217},o($VR,[2,85]),{55:[1,218]},{35:219,108:$Vd},{35:220,108:$Vd},o($Vf,[2,16]),{27:[1,221],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{31:222,44:224,45:$V61,48:223},{23:[1,226],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{27:[1,228],37:[1,227]},o($Vf,[2,23],{39:229,105:230,106:$V71,107:$V81}),{17:[1,233]},{27:$VU,35:148,41:234,102:147,103:$VV,108:$Vd},{16:$Vi,25:$Vj,26:235,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($V01,[2,101]),{16:$Vi,25:$Vj,26:236,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{18:[1,237]},{17:[1,238]},o($VW,[2,108]),o($Vh,[2,41],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),{58:[2,106]},o($Vf,[2,11]),{18:[2,7]},{16:$VS,51:239},{7:240,8:181,10:182,11:183,12:$VX,13:$VY,18:$VZ},{7:241,8:181,10:182,11:183,12:$VX,13:$VY,18:$VZ},{16:$V_,21:242},{87:[2,110]},{70:[1,243]},o($V01,[2,54]),o($V01,[2,55]),{23:[1,244]},{18:[1,245]},{18:[2,33],49:[1,246]},o($V91,[2,31],{44:224,48:247,45:$V61}),{16:$Vi,25:$Vj,26:248,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$V1,22:81,33:249,35:18,43:$Vw,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{35:250,108:$Vd},{16:$V1,17:$Vg,22:31,28:251,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},o($Vf,[2,22]),{25:[1,252]},{16:$V1,17:$Vg,22:31,28:253,35:18,38:[1,254],51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{25:[2,113]},{4:76,6:3,9:255,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{27:[2,103]},o($V01,[2,102],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o([23,27,42,46,58,73,104],[2,58],{68:$Vx,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($VR,[2,87]),{4:76,6:3,9:256,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{16:[1,257]},{18:[1,258]},{18:[1,259]},{17:[2,25]},{25:[1,260]},o($Vf,[2,17]),o($Vf,[2,18]),{46:[1,261]},o($V91,[2,30]),{46:[1,262],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{27:[1,263]},{27:[1,264]},o($Vf,[2,21]),{16:$Vi,25:$Vj,26:265,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},o($Vf,[2,116]),{25:[2,112]},{18:[1,266]},{18:[1,267]},{25:[1,268]},o($Vf,[2,12]),o($Vf,[2,13]),{16:$Vi,25:$Vj,26:270,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,72:269,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{4:76,6:3,9:271,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{4:76,6:3,9:272,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{16:$V1,17:$Vg,22:31,28:273,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{16:$V1,17:$Vg,22:31,28:274,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{27:[1,275],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},o($Vf,[2,24]),o($VR,[2,88]),{27:$VU,35:148,41:276,102:147,103:$VV,108:$Vd},{27:[1,277],42:[1,278]},{42:[1,279],68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP},{18:[2,32]},{47:[1,280]},o($Vf,[2,19]),o($Vf,[2,20]),{16:$V1,17:$Vg,22:31,28:281,35:18,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{27:[1,282]},o($Vh,[2,53]),{16:$Vi,25:$Vj,26:283,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{16:$Vi,25:$Vj,26:284,35:52,40:$Vk,57:$Vl,59:47,67:48,69:43,74:$Vm,75:44,89:$Vn,93:41,94:$Vo,98:$Vp,99:$Vq,100:$Vr,108:$Vd},{23:[1,285]},o($Vf,[2,115],{105:230,39:286,106:$V71,107:$V81}),{17:[1,287]},o($V01,[2,56],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o($V01,[2,57],{68:$Vx,73:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP}),o([18,45,49],[2,29]),o($Vf,[2,114]),{4:76,6:3,9:288,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:18,38:$V7,40:$V8,51:16,52:$V9,53:$Va,54:$Vb,56:17,59:19,67:20,70:$Vc,108:$Vd},{18:[1,289]},o([12,13,18],[2,34])],
defaultActions: {25:[2,1],181:[2,4],184:[2,9],185:[2,10],210:[2,106],212:[2,7],217:[2,110],232:[2,113],234:[2,103],242:[2,25],254:[2,112],271:[2,32]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 99
break;
case 4:return 100
break;
case 5:return "$"
break;
case 6:return 63
break;
case 7:return "function"
break;
case 8:return "class"
break;
case 9:return "public"
break;
case 10:return "extends"
break;
case 11:return "implements"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return 98
break;
case 15:return 79
break;
case 16:return 77
break;
case 17:return "if"
break;
case 18:return "do"
break;
case 19:return "elseif"
break;
case 20:return "else"
break;
case 21:return "return"
break;
case 22:return "as"
break;
case 23:return "while"
break;
case 24:return "break"
break;
case 25:return "switch"
break;
case 26:return "default"
break;
case 27:return "case"
break;
case 28:return "foreach"
break;
case 29:return "continue"
break;
case 30:return "for"
break;
case 31:return 94
break;
case 32:return 42
break;
case 33:return 37
break;
case 34:return 95
break;
case 35:return 23
break;
case 36:return 46
break;
case 37:return 78
break;
case 38:return 103
break;
case 39:return 76
break;
case 40:return '|'
break;
case 41:return 85
break;
case 42:return 86
break;
case 43:return 87
break;
case 44:return 82
break;
case 45:return 83
break;
case 46:return 84
break;
case 47:return 81
break;
case 48:return 80
break;
case 49:return 55
break;
case 50:return 65
break;
case 51:return 90
break;
case 52:return 66
break;
case 53:return 91
break;
case 54:return 92
break;
case 55:return 64
break;
case 56:return 61
break;
case 57:return 89
break;
case 58:return 60
break;
case 59:return 62
break;
case 60:return 88
break;
case 61:return 74
break;
case 62:return 68
break;
case 63:return '^'
break;
case 64:return 73
break;
case 65:return 17
break;
case 66:return 18
break;
case 67:return 104
break;
case 68:return 57
break;
case 69:return 58
break;
case 70:return 25
break;
case 71:return 27
break;
case 72:return 16
break;
case 73:return 5
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/|#).*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:%=)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:new\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:!)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}