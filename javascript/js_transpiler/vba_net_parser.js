/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vba_net_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,28],$V2=[1,8],$V3=[1,9],$V4=[1,11],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[1,25],$Vb=[1,26],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[5,25,46,48,50,52,57,125,126],$Vi=[5,19,20,23,25,38,40,46,47,48,50,51,52,54,57,58,61,74,75,88,89,90,91,92,125,126],$Vj=[2,147],$Vk=[1,46],$Vl=[1,66],$Vm=[1,57],$Vn=[1,60],$Vo=[1,67],$Vp=[1,61],$Vq=[1,59],$Vr=[1,65],$Vs=[2,15],$Vt=[1,72],$Vu=[1,75],$Vv=[2,167],$Vw=[1,87],$Vx=[1,99],$Vy=[1,114],$Vz=[1,116],$VA=[1,113],$VB=[1,115],$VC=[1,110],$VD=[1,109],$VE=[1,111],$VF=[1,117],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,107],$VK=[1,108],$VL=[1,112],$VM=[1,121],$VN=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,101,104,105,106,107,108,114,125,126],$VO=[1,123],$VP=[5,11,19,20,23,25,27,29,38,40,41,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,97,101,104,105,106,107,108,114,125,126],$VQ=[2,145],$VR=[1,148],$VS=[25,43,114],$VT=[25,43,101,114],$VU=[1,155],$VV=[2,154],$VW=[1,154],$VX=[5,11,19,20,23,25,38,40,46,47,48,50,51,52,54,57,58,61,74,75,88,89,90,91,92,125,126],$VY=[1,215],$VZ=[1,216],$V_=[5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,78,79,88,89,90,91,92,101,104,105,106,114,125,126],$V$=[5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,88,89,90,91,92,101,104,105,106,107,114,125,126],$V01=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,88,89,90,91,92,101,104,105,106,107,114,125,126],$V11=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,81,82,88,89,90,91,92,101,104,105,106,107,114,125,126],$V21=[2,136],$V31=[43,101],$V41=[1,229],$V51=[1,238],$V61=[1,258],$V71=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,97,101,104,105,106,107,108,114,125,126],$V81=[19,20,25],$V91=[1,369],$Va1=[25,101];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"0":93,"error":2,"expressions":3,"statements_":4,"EOF":5,"statements_with_vars":6,"initialize_var_":7,"statements_without_vars":8,"statement":9,"initialize_var1":10,";":11,"initialize_vars":12,"initialize_var":13,"class_statements":14,"class_statements_":15,"statements":16,"class_statement":17,"access_modifier":18,"public":19,"private":20,"class_":21,"namespace":22,"IDENTIFIER":23,"{":24,"}":25,"class":26,"<":27,"types":28,">":29,"abstract":30,"interface":31,"enum":32,"identifiers":33,"extends":34,"implements":35,"top_level_statement":36,"top_level_statements":37,"import":38,"statement_with_semicolon":39,"Function":40,"(":41,"parameters":42,")":43,"As":44,"type":45,"End":46,"Do":47,"While":48,"e":49,"Loop":50,"Select":51,"Case":52,"case_statements":53,"For":54,"Each":55,"In":56,"Next":57,"If":58,"Then":59,"elif":60,"Sub":61,"static":62,"async":63,"statement_with_semicolon_":64,"case_statement":65,"case_statements_":66,"=":67,"operator":68,"OPERATOR":69,"+=":70,"-=":71,"*=":72,"/=":73,"++":74,"--":75,"<=":76,">=":77,"&&":78,"||":79,"==":80,"+":81,"-":82,"*":83,"/":84,"|=":85,"&=":86,"!":87,"yield":88,"return":89,"throw":90,"final":91,"Dim":92,"To":94,"access_array":95,"%=":96,".":97,"dot_expr":98,"exprs":99,"key_values":100,",":101,"key_value":102,"STRING_LITERAL":103,"?":104,":":105,"is":106,"!=":107,"%":108,"initializer_list":109,"not_expr":110,"await":111,"parentheses_expr":112,"[":113,"]":114,"new":115,"Dictionary":116,"named_parameters":117,"NUMBER":118,"square_brackets":119,"parameter":120,"ByRef":121,"expr":122,"ref":123,"named_parameter":124,"ElseIf":125,"Else":126,"add":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",19:"public",20:"private",22:"namespace",23:"IDENTIFIER",24:"{",25:"}",26:"class",27:"<",29:">",30:"abstract",31:"interface",32:"enum",34:"extends",35:"implements",38:"import",40:"Function",41:"(",43:")",44:"As",46:"End",47:"Do",48:"While",50:"Loop",51:"Select",52:"Case",54:"For",55:"Each",56:"In",57:"Next",58:"If",59:"Then",61:"Sub",62:"static",63:"async",67:"=",68:"operator",70:"+=",71:"-=",72:"*=",73:"/=",74:"++",75:"--",76:"<=",77:">=",78:"&&",79:"||",80:"==",81:"+",82:"-",83:"*",84:"/",85:"|=",86:"&=",87:"!",88:"yield",89:"return",90:"throw",91:"final",92:"Dim",93:"0",94:"To",96:"%=",97:".",101:",",103:"STRING_LITERAL",104:"?",105:":",106:"is",107:"!=",108:"%",111:"await",113:"[",114:"]",115:"new",116:"Dictionary",118:"NUMBER",121:"ByRef",123:"ref",125:"ElseIf",126:"Else"},
productions_: [0,[3,2],[4,1],[4,1],[4,2],[8,2],[8,1],[6,3],[6,1],[12,3],[12,1],[14,1],[16,1],[15,2],[15,1],[18,1],[18,1],[21,6],[21,9],[21,6],[21,7],[21,6],[21,9],[21,6],[21,8],[21,8],[36,1],[36,1],[37,2],[37,1],[9,2],[9,1],[9,10],[9,1],[9,7],[9,6],[9,8],[9,7],[9,7],[9,8],[9,6],[9,7],[9,8],[9,11],[64,1],[64,1],[65,3],[66,2],[66,1],[53,1],[17,6],[17,4],[17,7],[17,8],[17,7],[17,10],[17,13],[17,9],[17,12],[17,11],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[39,3],[39,2],[39,2],[39,5],[39,3],[39,9],[39,2],[39,3],[39,3],[39,2],[39,2],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[10,1],[13,1],[7,6],[7,4],[100,3],[100,1],[102,5],[49,5],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,4],[49,4],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[49,2],[49,1],[110,2],[110,2],[110,1],[98,3],[98,3],[98,1],[95,4],[109,4],[109,5],[112,3],[112,10],[112,1],[112,3],[112,4],[112,4],[112,4],[112,5],[112,1],[112,1],[112,1],[45,1],[119,3],[119,2],[120,4],[120,3],[42,3],[42,1],[42,0],[99,3],[99,1],[122,2],[122,1],[117,3],[117,1],[124,3],[28,3],[28,1],[60,6],[60,2],[33,3],[33,1],[127,3],[127,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 3:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 4:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],["statements",$$[$0]]]]
break;
case 5: case 28:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 6: case 10: case 14: case 29: case 48: case 132: case 153:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 9: case 104: case 159:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 11:
this.$ = ["class_statements",$$[$0]]
break;
case 12:
this.$ = ["statements",$$[$0]]
break;
case 13: case 47:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 17: case 19: case 21:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 18:
this.$ = ["generic_class",$$[$0-8],$$[$0-6],$$[$0-1],$$[$0-4]];
break;
case 20:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 22:
this.$ = ["generic_interface",$$[$0-8],$$[$0-6],$$[$0-1],$$[$0-4]];
break;
case 23:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["semicolon",$$[$0]]
break;
case 30:
this.$ = ["import",$$[$0]];
break;
case 31:
this.$ = ["semicolon",$$[$0]];
break;
case 32:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-2]];
break;
case 34:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 35:
this.$ = ["do_while",$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = ["switch",$$[$0-4],$$[$0-2]];
break;
case 37:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 38: case 39:
this.$ = ["if",$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 40: case 41:
this.$ = ["if",$$[$0-4],$$[$0-2]];
break;
case 42:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 46:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 50:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 51:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 52:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 53:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 54:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 55:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 56:
this.$ = ["generic_static_method",$$[$0-12],$$[$0-10],$$[$0-9],$$[$0-4],$$[$0-1],$$[$0-7]];
break;
case 57:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 58:
this.$ = ["generic_instance_method",$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-4],$$[$0-1],$$[$0-7]];
break;
case 59:
this.$ = ["static_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 80:
this.$ = ["yield",$$[$0]];
break;
case 81:
this.$ = ["return",$$[$0]];
break;
case 82:
this.$ = ["throw",$$[$0]];
break;
case 83:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 84:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 85:
this.$ = ["set_array_size",$$[$0],$$[$0-7],$$[$0-3]];
break;
case 86:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 87: case 88:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 89: case 90:
this.$ = [$$[$0],$$[$0-1]];
break;
case 91: case 92:
this.$ = [$$[$0-1],$$[$0]];
break;
case 93: case 94: case 95: case 96: case 97: case 98: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 119: case 120: case 121: case 122: case 123:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 99:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 100:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 101:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 102:
this.$ = [$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 103:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 105: case 156: case 158: case 160: case 163: case 167: case 169:
this.$ = [$$[$0]];
break;
case 106:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 107:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 117:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 118:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 125:
this.$ = ["-",$$[$0]];
break;
case 127:
this.$ = ["!", [".",$$[$0]]];
break;
case 128:
this.$ = ["await", [".",$$[$0]]]
break;
case 129:
this.$ = [".", $$[$0]];
break;
case 130: case 131: case 152: case 155: case 162: case 166: case 168:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 133:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 134:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 135:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 136:
this.$= ["parentheses",$$[$0-1]];
break;
case 137:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 139:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 140: case 141:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 142:
this.$= ["new",$$[$0-2],[]];
break;
case 143:
this.$= ["new",$$[$0-3],$$[$0-1]];
break;
case 144: case 145: case 146:
this.$ = yytext;
break;
case 148:
this.$ = $$[$0-2].concat(["[]"]);
break;
case 149:
this.$ = ["[]"]
break;
case 150:
this.$ = ["ref_parameter",$$[$0],$$[$0-2]]
break;
case 151:
this.$ = [$$[$0],$$[$0-2]];
break;
case 154:
this.$= []
break;
case 157:
this.$ = ["function_call_ref",$$[$0]];
break;
case 161:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 164:
this.$ = ["elif",$$[$0-2],$$[$0],$$[$01]]
break;
case 165:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{1:[3]},{5:[1,29]},o($Vh,[2,2]),o($Vh,[2,3],{6:3,7:4,8:5,45:6,9:7,39:10,21:12,95:24,18:27,4:30,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg}),o($Vh,[2,8],{45:6,39:10,21:12,95:24,18:27,10:31,9:32,7:33,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg}),{23:[1,34],33:35},o($Vi,[2,6]),{23:$Vj,67:[1,36],70:[1,39],71:[1,41],72:[1,42],73:[1,43],74:[1,37],75:[1,38],85:[1,40],96:[1,44],97:[1,45],113:$Vk},{23:[1,47]},o($Vi,[2,31]),{23:[1,48]},o($Vi,[2,33]),{4:51,6:3,7:4,8:5,9:7,16:50,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,48:[1,49],51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{52:[1,52]},{55:[1,53]},{23:$Vl,41:[1,55],49:54,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:[1,68]},o([22,26,30,31,32],$Vs,{62:[1,69]}),{89:[1,70]},{23:$Vl,41:$Vt,49:71,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:73,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vu,45:74},{23:[1,76]},{67:[1,77]},{23:[1,78]},{23:[1,79]},{22:[1,80],26:[1,81],30:[1,82],31:[1,83],32:[1,84]},o([22,23,26,30,31,32,62],[2,16]),{1:[2,1]},o($Vh,[2,4]),{11:[1,85]},o($Vi,[2,5]),{11:[2,100]},o($Vi,$Vv,{67:[1,86],101:$Vw}),o($Vi,[2,86]),{23:$Vl,41:$Vt,49:88,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($Vi,[2,89]),o($Vi,[2,90]),{23:$Vl,41:$Vt,49:89,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:90,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:91,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:92,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:93,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:94,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,95:64,98:95,103:$Vo,109:96,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:100,82:$Vm,87:$Vn,95:64,98:62,99:97,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr,122:98,123:$Vx},o($Vi,[2,30]),{41:[1,101]},{41:[1,102]},{48:[1,103]},o([25,46,48,50,52,57,125,126],[2,12]),{41:[1,104]},{23:[1,105]},{27:$Vy,29:$Vz,59:[1,106],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,49:122,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($VN,[2,124],{97:$VO}),{23:$Vl,41:$Vt,49:124,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($VN,[2,126]),{23:[1,127],45:125,116:[1,126]},{23:$Vl,41:$Vt,95:64,98:128,103:$Vo,109:96,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,95:64,98:129,103:$Vo,109:96,112:63,115:$Vq,118:$Vr},o($VN,[2,129]),o($VN,[2,132],{41:[1,131],97:[1,130]}),o($VP,[2,138]),o($VP,[2,144]),o($VP,$VQ,{113:$Vk}),o($VP,[2,146]),{41:[1,132]},{63:[1,133]},{23:$Vl,41:$Vt,49:134,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($Vi,[2,81],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$Vl,41:$Vt,49:135,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($Vi,[2,82],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:[1,136],33:137},o([5,19,20,23,25,29,38,40,43,46,47,48,50,51,52,54,57,58,61,68,74,75,88,89,90,91,92,101,125,126],$Vj),{41:[1,138]},{23:$Vl,41:$Vt,49:139,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($Vi,[2,91]),o($Vi,[2,92]),{23:[1,140]},{23:[1,141]},{26:[1,142]},{23:[1,143]},{23:[1,144]},o($Vh,[2,7]),{23:$Vl,24:[1,145],41:$Vt,49:146,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$VR,33:147},o($Vi,[2,88],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,93],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,94],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,95],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,96],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,97],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,98],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,99]),{97:$VO},{114:[1,149]},o($VS,[2,156],{101:[1,150]}),{23:$Vl,41:$Vt,49:151,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($VT,[2,158],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$VU,42:152,43:$VV,120:153,121:$VW},{23:$Vl,41:$Vt,49:156,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{41:[1,157]},{23:$Vl,41:$Vt,49:158,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{56:[1,159]},{4:51,6:3,7:4,8:5,9:7,16:160,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{23:$Vl,41:$Vt,49:161,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:162,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:163,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:164,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:165,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:166,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:167,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,27:[1,169],41:$Vt,49:168,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:170,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,29:[1,172],41:$Vt,49:171,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:173,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:174,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:175,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:176,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:177,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{27:$Vy,29:$Vz,43:[1,178],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,95:64,98:179,103:$Vo,109:96,112:63,115:$Vq,118:$Vr},o($VN,[2,125]),{24:[1,180]},{27:[1,181]},{24:$Vj,41:[1,182]},o($VN,[2,127]),o($VN,[2,128]),{23:$Vl,41:$Vt,95:64,98:183,103:$Vo,109:96,112:63,115:$Vq,118:$Vr},{23:[1,188],41:$Vt,43:[1,184],49:100,82:$Vm,87:$Vn,95:64,98:62,99:186,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,117:185,118:$Vr,122:98,123:$Vx,124:187},{23:$VU,42:189,43:$VV,120:153,121:$VW},{23:$Vu,45:190},o($Vi,[2,80],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{27:$Vy,29:$Vz,43:[1,191],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,$Vv,{67:[1,192],101:$Vw}),o($Vi,[2,84]),{93:[1,193]},o($Vi,[2,87],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{24:[1,194]},{24:[1,196],27:[1,195],34:[1,197],35:[1,198]},{23:[1,199]},{24:[1,200],27:[1,201]},{24:[1,202]},{23:$Vl,41:$Vt,49:100,82:$Vm,87:$Vn,95:64,98:62,99:203,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr,122:98,123:$Vx},o($VX,[2,103],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,166]),o($Vi,$Vv,{101:$Vw}),o([5,11,19,20,23,25,27,29,38,40,41,43,46,47,48,50,51,52,54,57,58,59,61,67,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,97,101,104,105,106,107,108,114,125,126],[2,133]),{23:$Vl,41:$Vt,49:100,82:$Vm,87:$Vn,95:64,98:62,99:204,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr,122:98,123:$Vx},o($VT,[2,157],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{43:[1,205]},{43:[2,153],101:[1,206]},{23:[1,207]},{44:[1,208]},{27:$Vy,29:$Vz,43:[1,209],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,49:210,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{27:$Vy,29:$Vz,43:[1,211],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:[1,212]},{46:[1,214],60:213,125:$VY,126:$VZ},{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,105:[1,217],106:$VK,107:$VL,108:$VM},o($V_,[2,108],{27:$Vy,29:$Vz,76:$VA,77:$VB,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,107:$VL,108:$VM}),o($V_,[2,109],{27:$Vy,29:$Vz,76:$VA,77:$VB,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,107:$VL,108:$VM}),o($V_,[2,110],{27:$Vy,29:$Vz,76:$VA,77:$VB,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,107:$VL,108:$VM}),o($V$,[2,111],{27:$Vy,29:$Vz,81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),o($V$,[2,112],{27:$Vy,29:$Vz,81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),o($V$,[2,113],{27:$Vy,29:$Vz,81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),o($V01,[2,114],{81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),{23:$Vl,41:$Vt,49:218,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($V$,[2,115],{27:$Vy,29:$Vz,81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),o($V01,[2,116],{81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),{23:$Vl,41:$Vt,49:219,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($V11,[2,119],{83:$VH,84:$VI,108:$VM}),o($V11,[2,120],{83:$VH,84:$VI,108:$VM}),o($VN,[2,121]),o($VN,[2,122]),o($VN,[2,123]),o([27,29,41,59,76,77,78,79,80,81,82,83,84,97,104,106,107,108],$V21,{6:3,7:4,8:5,45:6,9:7,39:10,21:12,95:24,18:27,4:51,16:220,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg}),o($VN,[2,130]),{23:$Vl,25:[1,221],41:$Vt,49:100,82:$Vm,87:$Vn,95:64,98:62,99:222,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr,122:98,123:$Vx},{23:$Vu,45:223},{23:$Vl,41:$Vt,43:[1,224],49:100,82:$Vm,87:$Vn,95:64,98:62,99:225,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr,122:98,123:$Vx},o($VN,[2,131]),o($VP,[2,139]),{43:[1,226],101:[1,227]},{43:[1,228]},o($V31,[2,160]),o([27,29,41,43,76,77,78,79,80,81,82,83,84,97,101,104,106,107,108],$VQ,{105:$V41,113:$Vk}),{43:[1,230]},{23:[1,231]},o($VP,$V21),{23:$Vl,41:$Vt,49:232,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{94:[1,233]},{14:234,15:235,17:236,18:237,19:$V51,20:$V1},{23:$Vu,28:239,45:240},{14:241,15:235,17:236,18:237,19:$V51,20:$V1},{23:[1,242]},{23:[1,243]},{24:[1,244]},{14:245,15:235,17:236,18:237,19:$V51,20:$V1},{23:$Vu,28:246,45:240},{23:$VR,33:247},{25:[1,248]},o($VS,[2,155]),{44:[1,249]},{23:$VU,42:250,43:$VV,120:153,121:$VW},{44:[1,251]},{23:$Vu,45:252},{4:51,6:3,7:4,8:5,9:7,16:253,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{27:$Vy,29:$Vz,43:[1,254],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{52:$V61,53:255,65:257,66:256},{4:51,6:3,7:4,8:5,9:7,16:259,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{46:[1,260]},{58:[1,261]},{41:[1,262]},{4:51,6:3,7:4,8:5,9:7,16:263,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{23:$Vl,41:$Vt,49:264,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($V01,[2,118],{81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),o($V01,[2,117],{81:$VF,82:$VG,83:$VH,84:$VI,108:$VM}),{46:[1,266],60:265,125:$VY,126:$VZ},o($V71,[2,134]),{25:[1,267]},{101:[1,268]},o($VP,[2,142]),{43:[1,269]},o($VP,[2,140]),{23:[1,271],124:270},o($VP,[2,141]),{23:$Vl,41:$Vt,49:272,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{4:51,6:3,7:4,8:5,9:7,16:273,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{41:[1,274]},o($Vi,[2,83],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$Vl,41:$Vt,49:275,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{25:[1,276]},{25:[2,11]},{15:277,17:236,18:237,19:$V51,20:$V1,25:[2,14]},{23:$Vu,45:278,62:[1,279]},o([23,62],$Vs),{29:[1,280]},{29:[2,163],101:[1,281]},{25:[1,282]},{24:[1,283]},{24:[1,284]},{14:285,15:235,17:236,18:237,19:$V51,20:$V1},{25:[1,286]},{29:[1,287]},{25:[1,288]},o($VX,[2,102]),{23:$Vu,45:289},{43:[2,152]},{23:$Vu,45:290},o($V31,[2,151]),{50:[1,291]},o($Vi,[2,35]),{46:[1,292]},{46:[2,49]},{46:[2,48],52:$V61,65:257,66:293},{23:$Vl,41:$Vt,49:294,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{57:[1,295]},{58:[1,296]},o($Vi,[2,40]),{23:$Vl,41:$Vt,49:297,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{46:[2,165]},o([5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,58,59,61,74,75,88,89,90,91,92,101,105,114,125,126],[2,107],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{46:[1,298]},{58:[1,299]},o($V71,[2,135]),{23:$Vu,45:300},o($VP,[2,143]),o($V31,[2,159]),{105:$V41},o($V31,[2,161],{27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{46:[1,301]},{23:$VU,42:302,43:$VV,120:153,121:$VW},{27:$Vy,29:$Vz,43:[1,303],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,[2,17]),{25:[2,13]},{23:[1,304]},{23:$Vu,45:305},{24:[1,306]},{23:$Vu,28:307,45:240},o($Vi,[2,19]),{14:308,15:235,17:236,18:237,19:$V51,20:$V1},{14:309,15:235,17:236,18:237,19:$V51,20:$V1},{25:[1,310]},o($Vi,[2,21]),{24:[1,311]},o($Vi,[2,23]),{4:51,6:3,7:4,8:5,9:7,16:312,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($V31,[2,150]),o($Vi,[2,34]),{51:[1,313]},{46:[2,47]},{4:51,6:3,7:4,8:5,9:7,16:314,18:27,19:$V0,20:$V1,21:12,23:$V2,27:$Vy,29:$Vz,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,[2,37]),o($Vi,[2,38]),{27:$Vy,29:$Vz,43:[1,315],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{58:[1,316]},o($Vi,[2,41]),{29:[1,317]},{61:[1,318]},{43:[1,319]},{44:[1,320]},{11:[1,322],27:[1,324],41:[1,323],67:[1,321]},{23:[1,325],68:[1,326]},{14:327,15:235,17:236,18:237,19:$V51,20:$V1},{29:[2,162]},{25:[1,328]},{25:[1,329]},o($Vi,[2,20]),{14:330,15:235,17:236,18:237,19:$V51,20:$V1},{46:[1,331]},o($Vi,[2,36]),o([46,52],[2,46]),{4:51,6:3,7:4,8:5,9:7,16:332,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($Vi,[2,39]),{24:[1,333]},o($Vi,[2,42]),{24:[1,334]},{23:$Vu,45:335},{23:$Vl,41:$Vt,49:336,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},o($V81,[2,51]),{23:$VU,42:337,43:$VV,120:153,121:$VW},{23:$Vu,28:338,45:240},{27:[1,341],41:[1,340],67:[1,339]},{27:[1,351],29:[1,352],69:342,70:[1,343],71:[1,344],72:[1,345],73:[1,346],74:[1,347],75:[1,348],76:[1,349],77:[1,350],78:[1,353],79:[1,354],80:[1,355],81:[1,356],82:[1,357],83:[1,358],84:[1,359],85:[1,360],86:[1,361],87:[1,362]},{25:[1,363]},o($Vi,[2,24]),o($Vi,[2,25]),{25:[1,364]},{40:[1,365]},{60:366,125:$VY,126:$VZ},{24:$V91,100:367,102:368},{4:51,6:3,7:4,8:5,9:7,16:370,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($Vi,[2,85]),{11:[1,371],27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{43:[1,372]},{29:[1,373]},{23:$Vl,41:$Vt,49:374,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{23:$VU,42:375,43:$VV,120:153,121:$VW},{23:$Vu,28:376,45:240},{41:[1,377]},{41:[2,60]},{41:[2,61]},{41:[2,62]},{41:[2,63]},{41:[2,64]},{41:[2,65]},{41:[2,66]},{41:[2,67]},{41:[2,68]},{41:[2,69]},{41:[2,70]},{41:[2,71]},{41:[2,72]},{41:[2,73]},{41:[2,74]},{41:[2,75]},{41:[2,76]},{41:[2,77]},{41:[2,78]},{41:[2,79]},o($Vi,[2,18]),o($Vi,[2,22]),o($Vi,[2,32]),{46:[2,164]},{25:[1,378],101:[1,379]},o($Va1,[2,105]),{103:[1,380]},{25:[1,381]},o($V81,[2,50]),{11:[1,382],24:[1,383]},{41:[1,384]},{11:[1,385],27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{43:[1,386]},{29:[1,387]},{23:$VU,42:388,43:$VV,120:153,121:$VW},o($VP,[2,137]),{24:$V91,102:389},{101:[1,390]},o($Vi,[2,43]),o($V81,[2,54]),{4:51,6:3,7:4,8:5,9:7,16:391,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{23:$VU,42:392,43:$VV,120:153,121:$VW},o($V81,[2,52]),{11:[1,393],24:[1,394]},{41:[1,395]},{43:[1,396]},o($Va1,[2,104]),{23:$Vl,41:$Vt,49:397,82:$Vm,87:$Vn,95:64,98:62,103:$Vo,109:56,110:58,111:$Vp,112:63,115:$Vq,118:$Vr},{25:[1,398]},{43:[1,399]},o($V81,[2,53]),{4:51,6:3,7:4,8:5,9:7,16:400,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},{23:$VU,42:401,43:$VV,120:153,121:$VW},{24:[1,402]},{25:[1,403],27:$Vy,29:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($V81,[2,57]),{24:[1,404]},{25:[1,405]},{43:[1,406]},{4:51,6:3,7:4,8:5,9:7,16:407,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($Va1,[2,106]),{4:51,6:3,7:4,8:5,9:7,16:408,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($V81,[2,55]),{24:[1,409]},{25:[1,410]},{25:[1,411]},{4:51,6:3,7:4,8:5,9:7,16:412,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,58:$V8,61:$V9,74:$Va,75:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,95:24},o($V81,[2,59]),o($V81,[2,58]),{25:[1,413]},o($V81,[2,56])],
defaultActions: {29:[2,1],33:[2,100],235:[2,11],250:[2,152],256:[2,49],263:[2,165],277:[2,13],293:[2,47],307:[2,162],343:[2,60],344:[2,61],345:[2,62],346:[2,63],347:[2,64],348:[2,65],349:[2,66],350:[2,67],351:[2,68],352:[2,69],353:[2,70],354:[2,71],355:[2,72],356:[2,73],357:[2,74],358:[2,75],359:[2,76],360:[2,77],361:[2,78],362:[2,79],366:[2,164]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 118
break;
case 2:return 103
break;
case 3:return "Loop"
break;
case 4:return "As"
break;
case 5:return 52
break;
case 6:return "End"
break;
case 7:return "extends"
break;
case 8:return "default"
break;
case 9:return "import"
break;
case 10:return "Sub"
break;
case 11:return "interface"
break;
case 12:return "Function"
break;
case 13:return "private"
break;
case 14:return "static"
break;
case 15:return "If"
break;
case 16:return "Do"
break;
case 17:return "In"
break;
case 18:return "ByRef"
break;
case 19:return "out"
break;
case 20:return "Else"
break;
case 21:return "return"
break;
case 22:return "throw"
break;
case 23:return "While"
break;
case 24:return "Select"
break;
case 25:return "async"
break;
case 26:return "Each"
break;
case 27:return "For"
break;
case 28:return "new"
break;
case 29:return 107
break;
case 30:return 87
break;
case 31:return 101
break;
case 32:return 11
break;
case 33:return 97
break;
case 34:return 105
break;
case 35:return 86
break;
case 36:return 78
break;
case 37:return 85
break;
case 38:return 79
break;
case 39:return 77
break;
case 40:return 29
break;
case 41:return 76
break;
case 42:return 27
break;
case 43:return 80
break;
case 44:return 67
break;
case 45:return 96
break;
case 46:return 108
break;
case 47:return 72
break;
case 48:return 83
break;
case 49:return 73
break;
case 50:return 84
break;
case 51:return 71
break;
case 52:return 75
break;
case 53:return 82
break;
case 54:return 74
break;
case 55:return 70
break;
case 56:return 81
break;
case 57:return '^'
break;
case 58:return 104
break;
case 59:return 24
break;
case 60:return 25
break;
case 61:return 113
break;
case 62:return 114
break;
case 63:return 41
break;
case 64:return 43
break;
case 65:return 23
break;
case 66:return 5
break;
case 67:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:Loop\b)/,/^(?:As\b)/,/^(?:Case\b)/,/^(?:End\b)/,/^(?:extends\b)/,/^(?:default\b)/,/^(?:import\b)/,/^(?:Sub\b)/,/^(?:interface\b)/,/^(?:Function\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:If\b)/,/^(?:Do\b)/,/^(?:In\b)/,/^(?:ByRef\b)/,/^(?:out\b)/,/^(?:Else\b)/,/^(?:return\b)/,/^(?:throw\b)/,/^(?:While\b)/,/^(?:Select\b)/,/^(?:async\b)/,/^(?:Each\b)/,/^(?:For\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&=)/,/^(?:&&)/,/^(?:\|=)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:%=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vba_net_parser;
exports.Parser = vba_net_parser.Parser;
exports.parse = function () { return vba_net_parser.parse.apply(vba_net_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}