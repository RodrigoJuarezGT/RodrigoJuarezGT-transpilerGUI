/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kotlin_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,17],$V3=[1,16],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,19],$Vc=[5,14,25],$Vd=[5,14,19,20,22,23,25,31,35,36,39,46,47,48,89],$Ve=[1,39],$Vf=[1,37],$Vg=[1,32],$Vh=[1,31],$Vi=[1,40],$Vj=[1,34],$Vk=[1,38],$Vl=[1,44],$Vm=[2,81],$Vn=[1,55],$Vo=[2,11],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[13,15,33,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75],$VD=[1,79],$VE=[1,82],$VF=[1,86],$VG=[13,15,32,33,56,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,86],$VH=[15,24,25],$VI=[1,100],$VJ=[1,105],$VK=[1,117],$VL=[2,86],$VM=[74,75],$VN=[23,24,33,42,66,75],$VO=[1,153],$VP=[1,154],$VQ=[1,155],$VR=[1,162],$VS=[33,75],$VT=[13,15,33,58,59,60,61,62,63,64,65,66,74,75],$VU=[13,15,33,58,59,60,61,62,63,64,65,66,67,68,74,75],$VV=[1,195],$VW=[1,214],$VX=[5,14,19,20,22,23,25,31,35,36,39,46,47,48,88,89],$VY=[19,20,25,43,45];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"case_statement":10,"case":11,"e":12,":":13,"break":14,";":15,"case_statements":16,"class_statement":17,"access_modifier":18,"public":19,"private":20,"class_":21,"class":22,"IDENTIFIER":23,"{":24,"}":25,"abstract":26,"interface":27,"enum":28,"identifiers":29,"statement_with_semicolon":30,"while":31,"(":32,")":33,"bracket_statements":34,"switch":35,"for":36,"in":37,"if_statement":38,"fun":39,"parameters":40,"type":41,"=":42,"static":43,"function":44,"operator":45,"return":46,"val":47,"var":48,"access_array":49,"++":50,"--":51,"+=":52,"-=":53,"*=":54,"/=":55,".":56,"dot_expr":57,"is":58,"||":59,"&&":60,"==":61,"!=":62,"<=":63,"<":64,">=":65,">":66,"+":67,"-":68,"*":69,"/":70,"initializer_list":71,"[":72,"key_values":73,"]":74,",":75,"key_value":76,"STRING_LITERAL":77,"=>":78,"parentheses_expr":79,"access_arr":80,"arrayOf":81,"exprs":82,"NUMBER":83,"types":84,"parameter":85,"][":86,"elif":87,"else":88,"if":89,"add":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"case",13:":",14:"break",15:";",19:"public",20:"private",22:"class",23:"IDENTIFIER",24:"{",25:"}",26:"abstract",27:"interface",28:"enum",31:"while",32:"(",33:")",35:"switch",36:"for",37:"in",39:"fun",42:"=",43:"static",44:"function",45:"operator",46:"return",47:"val",48:"var",50:"++",51:"--",52:"+=",53:"-=",54:"*=",55:"/=",56:".",58:"is",59:"||",60:"&&",61:"==",62:"!=",63:"<=",64:"<",65:">=",66:">",67:"+",68:"-",69:"*",70:"/",72:"[",74:"]",75:",",77:"STRING_LITERAL",78:"=>",81:"arrayOf",83:"NUMBER",86:"][",88:"else",89:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[10,6],[16,2],[16,1],[8,2],[8,1],[18,1],[18,1],[21,5],[21,7],[21,6],[21,7],[21,8],[6,2],[6,1],[6,5],[6,7],[6,9],[6,1],[6,10],[6,8],[17,6],[17,7],[17,8],[17,7],[17,10],[17,9],[17,10],[17,11],[30,2],[30,6],[30,6],[30,2],[30,3],[30,3],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,1],[12,3],[12,2],[12,1],[73,3],[73,1],[76,3],[57,3],[57,3],[57,1],[49,4],[71,4],[79,1],[79,3],[79,4],[79,3],[79,1],[79,1],[79,1],[41,3],[41,4],[41,1],[85,3],[85,1],[40,3],[40,1],[40,0],[80,3],[80,1],[82,3],[82,1],[84,3],[84,1],[87,7],[87,6],[87,2],[38,6],[38,5],[29,3],[29,1],[90,3],[90,1],[34,3],[34,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7: case 9:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 10: case 69: case 85: case 88:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 6:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 13:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["enum",$$[$0-4],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 17:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 18: case 103:
this.$ = ["semicolon",$$[$0-1]];
break;
case 20:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 25:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["initialize_instance_var",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 28:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 29:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 30:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["instance_method",$$[$0-8],"Object",$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 32:
this.$ = ["static_method",$$[$0-8],"Object",$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 33:
this.$ = ["instance_overload_operator","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 34:
this.$ = ["return",$$[$0]];
break;
case 35:
this.$ = ["initialize_constant",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 36:
this.$ = ["initialize_var",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 37:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 38: case 39:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 40: case 41:
this.$ = [$$[$0],$$[$0-1]];
break;
case 42: case 43: case 44: case 45: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 46:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 61:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 62:
this.$ = ["-",$$[$0]];
break;
case 63:
this.$ = [".", $$[$0]];
break;
case 64: case 67: case 68: case 84: case 87: case 89: case 91: case 98: case 100:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 65: case 90: case 92: case 99: case 101:
this.$ = [$$[$0]];
break;
case 66:
this.$ = [$$[$0-2],$$[$0]]
break;
case 70:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 71:
this.$ = ["initializer_list","Object",$$[$0-2]];
break;
case 73:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 74:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 75:
this.$ = $$[$0-1];
break;
case 76: case 77: case 78:
this.$ = yytext;
break;
case 79:
this.$ = [$$[$0-2],"[]"];
break;
case 80:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 82:
this.$ = [$$[$0],$$[$0-2]];
break;
case 83:
this.$ = ["Object",$$[$0]];
break;
case 86:
this.$= []
break;
case 93:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 94:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 95:
this.$ = ["else",$$[$0]];
break;
case 96:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 97:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 102:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{1:[3]},{5:[1,22]},o($Vc,[2,3],{6:3,30:4,21:5,38:9,41:14,49:15,18:18,4:23,19:$V0,20:$V1,22:$V2,23:$V3,31:$V4,35:$V5,36:$V6,39:$V7,46:$V8,47:$V9,48:$Va,89:$Vb}),{15:[1,24]},o($Vd,[2,19]),{32:[1,25]},{32:[1,26]},{32:[1,27]},o($Vd,[2,23]),{23:[1,28]},{12:29,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:[1,41]},{23:[1,42]},{23:$Vl,29:43},{42:[1,45]},{23:$Vm,42:[1,46],50:[1,47],51:[1,48],52:[1,49],53:[1,50],54:[1,51],55:[1,52],56:[1,53],64:$Vn,72:[1,54]},{23:[1,56]},{22:[1,60],26:[1,57],27:[1,58],28:[1,59]},{32:[1,61]},o([22,26,27,28],$Vo),o([22,23,26,27,28,43],[2,12]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,18]),{12:62,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:63,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:[1,64]},{32:[1,65]},{15:[2,34],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},o($VC,[2,60],{56:$VD}),{73:80,76:81,77:$VE},{12:83,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},o($VC,[2,63]),{32:[1,84]},o($VC,[2,69],{32:$VF,56:[1,85]}),o($VG,[2,72]),{12:87,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},o($VG,[2,76]),o($VG,[2,77],{72:[1,88]}),o($VG,[2,78]),{13:[1,89]},{13:[1,90]},{15:[2,37]},o($VH,[2,99],{75:[1,91]}),{12:92,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:93,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{15:[2,40]},{15:[2,41]},{12:94,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:95,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:96,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:97,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:$Ve,32:$Vf,49:36,57:98,71:99,77:$Vi,79:35,81:$Vj,83:$Vk},{23:$Ve,32:$Vf,49:36,74:$VI,77:$Vi,79:102,80:101,83:$Vk},{23:$VJ,41:104,84:103},{24:[1,106]},{22:[1,107]},{23:[1,108]},{22:[1,109]},{23:[1,110]},{12:111,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{33:[1,112],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{33:[1,113],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{37:[1,114]},{23:$VK,33:$VL,40:115,85:116},{12:118,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:119,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:120,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:121,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:122,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:123,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:124,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:125,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:126,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:127,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:128,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:129,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:130,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:$Ve,32:$Vf,49:36,57:131,71:99,77:$Vi,79:35,81:$Vj,83:$Vk},{74:[1,132],75:[1,133]},o($VM,[2,65]),{78:[1,134]},o($VC,[2,62]),{12:136,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,82:135,83:$Vk},{23:$Ve,32:$Vf,49:36,57:137,71:99,77:$Vi,79:35,81:$Vj,83:$Vk},{12:136,23:$Ve,32:$Vf,33:[1,138],49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,82:139,83:$Vk},{33:[1,140],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{23:$Ve,32:$Vf,49:36,77:$Vi,79:102,80:101,83:$Vk},{23:$VJ,41:141},{23:$VJ,41:142},{23:$Vl,29:143},{15:[2,38],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,39],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,42],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,43],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,44],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,45],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,46]},{56:$VD},o($VN,[2,79]),{74:[1,144]},{32:$VF,74:[2,88],86:[1,145]},{66:[1,146]},{66:[2,92],75:[1,147]},o($VN,$Vm,{64:$Vn,72:[1,148]}),{7:149,8:150,17:151,18:152,19:$VO,20:$V1,43:$VP,45:$VQ},{23:[1,156]},{24:[1,157]},{23:[1,158]},{13:[1,159]},{33:[1,160],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{23:$V3,24:$VR,30:163,34:161,41:14,46:$V8,47:$V9,48:$Va,49:15},{24:[1,164]},{23:[1,165]},{33:[1,166]},{33:[2,85],75:[1,167]},o($VS,[2,83],{13:[1,168]}),o([13,15,33,58,59,60,74,75],[2,47],{61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB}),o([13,15,33,59,74,75],[2,48],{58:$Vp,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB}),o([13,15,33,59,60,74,75],[2,49],{58:$Vp,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,50],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,51],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,52],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,53],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,54],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VT,[2,55],{67:$Vy,68:$Vz,69:$VA,70:$VB}),o($VU,[2,56],{69:$VA,70:$VB}),o($VU,[2,57],{69:$VA,70:$VB}),o($VC,[2,58]),o($VC,[2,59]),o($VC,[2,67]),o($VC,[2,61]),{76:169,77:$VE},{12:170,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{33:[1,171]},{33:[2,90],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,75:[1,172]},o($VC,[2,68]),o($VG,[2,73]),{33:[1,173]},o($VG,[2,75]),{42:[1,174]},{42:[1,175]},o($VH,[2,98]),o([13,15,32,33,42,56,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,86],[2,70]),{23:$Ve,32:$Vf,49:36,77:$Vi,79:102,80:176,83:$Vk},o($VN,[2,80]),{23:$VJ,41:104,84:177},{74:$VI},{25:[1,178]},{25:[2,4]},{8:179,17:151,18:152,19:$VO,20:$V1,25:[2,10],43:$VP,45:$VQ},{23:$VJ,41:180,43:[1,181]},o([23,43],$Vo,{44:[1,182]}),{19:[1,183]},{39:[1,184]},{24:[1,185]},{7:186,8:150,17:151,18:152,19:$VO,20:$V1,43:$VP,45:$VQ},{24:[1,187]},{23:$Vl,29:188},{23:$V3,24:$VR,30:163,34:189,41:14,46:$V8,47:$V9,48:$Va,49:15},o($Vd,[2,20]),{4:191,6:3,9:190,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{15:[1,192]},{10:194,11:$VV,16:193},{33:[1,196]},{13:[1,197],24:[1,198]},{23:$VK,33:$VL,40:199,85:116},{23:$VJ,41:200},o($VM,[2,64]),o($VM,[2,66],{58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB}),o([13,15,33,56,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75],[2,71]),{12:136,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,82:201,83:$Vk},o($VG,[2,74]),{12:202,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{12:203,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{74:[2,87]},{66:[2,91]},o($Vd,[2,13]),{25:[2,9]},{23:[1,204]},{23:$VJ,41:205},{23:[1,206]},{44:[1,207]},{23:[1,208]},{7:209,8:150,17:151,18:152,19:$VO,20:$V1,43:$VP,45:$VQ},{25:[1,210]},{23:$Vl,29:211},{24:[1,212]},o($Vd,[2,97],{87:213,88:$VW}),{25:[1,215]},o([14,25],[2,5]),o($VX,[2,103]),{25:[1,216]},{10:194,11:$VV,16:217,25:[2,8]},{12:218,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{24:[1,219]},{23:$VJ,41:220},{4:191,6:3,9:221,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{33:[2,84]},o($VS,[2,82]),{33:[2,89]},{15:[2,35],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[2,36],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{32:[1,223],42:[1,222]},{23:[1,224]},{32:[1,225]},{23:[1,226]},{32:[1,227]},{25:[1,228]},o($Vd,[2,15]),{25:[1,229]},{7:230,8:150,17:151,18:152,19:$VO,20:$V1,43:$VP,45:$VQ},o($Vd,[2,96]),{23:$V3,24:$VR,30:163,34:232,41:14,46:$V8,47:$V9,48:$Va,49:15,89:[1,231]},o($VX,[2,102]),o($Vd,[2,21]),{25:[2,7]},{13:[1,233],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{4:191,6:3,9:234,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{24:[1,235]},{25:[1,236]},{12:237,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:$VK,33:$VL,40:238,85:116},{32:[1,240],42:[1,239]},{23:$VK,33:$VL,40:241,85:116},{32:[1,242]},{23:$VK,33:$VL,40:243,85:116},o($Vd,[2,14]),o($Vd,[2,16]),{25:[1,244]},{32:[1,245]},o($Vd,[2,95]),{4:191,6:3,9:246,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{25:[1,247]},{4:191,6:3,9:248,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},o($Vd,[2,25]),{15:[1,249],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{33:[1,250]},{12:251,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{23:$VK,33:$VL,40:252,85:116},{33:[1,253]},{23:$VK,33:$VL,40:254,85:116},{33:[1,255]},o($Vd,[2,17]),{12:256,23:$Ve,32:$Vf,49:36,57:33,68:$Vg,71:30,72:$Vh,77:$Vi,79:35,81:$Vj,83:$Vk},{14:[1,257]},o($Vd,[2,22]),{25:[1,258]},o($VY,[2,26]),{15:[1,259]},{15:[1,260],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{33:[1,261]},{24:[1,262]},{33:[1,263]},{13:[1,264]},{33:[1,265],58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB},{15:[1,266]},o($Vd,[2,24]),o($VY,[2,29]),o($VY,[2,27]),{15:[1,267],24:[1,268]},{4:191,6:3,9:269,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{24:[1,270]},{23:$VJ,41:271},{23:$V3,24:$VR,30:163,34:272,41:14,46:$V8,47:$V9,48:$Va,49:15},o([11,25],[2,6]),o($VY,[2,28]),{4:191,6:3,9:273,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{25:[1,274]},{4:191,6:3,9:275,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},{24:[1,276]},o($Vd,[2,94],{87:277,88:$VW}),{25:[1,278]},o($VY,[2,31]),{25:[1,279]},{4:191,6:3,9:280,18:18,19:$V0,20:$V1,21:5,22:$V2,23:$V3,30:4,31:$V4,35:$V5,36:$V6,38:9,39:$V7,41:14,46:$V8,47:$V9,48:$Va,49:15,89:$Vb},o($Vd,[2,93]),o($VY,[2,30]),o($VY,[2,32]),{25:[1,281]},o($VY,[2,33])],
defaultActions: {22:[2,1],43:[2,37],47:[2,40],48:[2,41],98:[2,46],150:[2,4],176:[2,87],177:[2,91],179:[2,9],199:[2,84],201:[2,89],217:[2,7]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 83
break;
case 2:return 77
break;
case 3:return 81
break;
case 4:return 22
break;
case 5:return 28
break;
case 6:return 19
break;
case 7:return 'final'
break;
case 8:return 26
break;
case 9:return 'implements'
break;
case 10:return 27
break;
case 11:return 58
break;
case 12:return 20
break;
case 13:return 43
break;
case 14:return 39
break;
case 15:return 89
break;
case 16:return 88
break;
case 17:return "case"
break;
case 18:return 46
break;
case 19:return 31
break;
case 20:return 14
break;
case 21:return 35
break;
case 22:return 36
break;
case 23:return 'new'
break;
case 24:return 48
break;
case 25:return 75
break;
case 26:return 15
break;
case 27:return '...'
break;
case 28:return 56
break;
case 29:return 13
break;
case 30:return 60
break;
case 31:return 59
break;
case 32:return 78
break;
case 33:return 65
break;
case 34:return 66
break;
case 35:return 63
break;
case 36:return 64
break;
case 37:return 61
break;
case 38:return 62
break;
case 39:return 42
break;
case 40:return 54
break;
case 41:return 69
break;
case 42:return '%'
break;
case 43:return 55
break;
case 44:return 70
break;
case 45:return 53
break;
case 46:return 51
break;
case 47:return 68
break;
case 48:return 50
break;
case 49:return 52
break;
case 50:return 67
break;
case 51:return '^'
break;
case 52:return 24
break;
case 53:return 25
break;
case 54:return 86
break;
case 55:return 72
break;
case 56:return 74
break;
case 57:return 32
break;
case 58:return 33
break;
case 59:return 23
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:arrayOf\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:public\b)/,/^(?:final\b)/,/^(?:abstract\b)/,/^(?:implements\b)/,/^(?:interface\b)/,/^(?:is\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:fun\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = kotlin_parser;
exports.Parser = kotlin_parser.Parser;
exports.parse = function () { return kotlin_parser.parse.apply(kotlin_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}