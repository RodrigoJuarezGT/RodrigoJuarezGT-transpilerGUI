/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var python_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,15],$V2=[1,6],$V3=[1,10],$V4=[1,11],$V5=[1,13],$V6=[5,12,13,21,28,32,39],$V7=[1,24],$V8=[1,26],$V9=[1,21],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[5,11,12,13,21,28,32,39,76,87],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[5,11,12,13,16,17,21,28,32,33,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,69,76,80,87],$Vx=[2,56],$Vy=[5,11,12,13,16,17,21,28,32,33,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,69,76,80,87],$Vz=[2,87],$VA=[1,65],$VB=[1,64],$VC=[5,11,12,13,21,28,32,38,39,76,87],$VD=[1,90],$VE=[1,92],$VF=[1,97],$VG=[1,100],$VH=[1,106],$VI=[1,136],$VJ=[2,99],$VK=[1,140],$VL=[69,80],$VM=[1,144],$VN=[1,147],$VO=[16,17],$VP=[1,158],$VQ=[1,157],$VR=[5,11,12,13,16,17,21,28,32,33,38,39,45,46,47,48,49,50,51,52,65,69,76,80,87],$VS=[5,11,12,13,16,17,21,28,32,33,38,39,45,46,47,48,49,50,51,52,53,54,55,65,69,76,80,87],$VT=[5,11,12,13,16,17,21,28,32,33,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,69,76,80,87],$VU=[16,69],$VV=[16,65,80],$VW=[1,163],$VX=[28,65];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"class_statements":7,"class_statements_":8,"pass":9,"class_statement":10,"@staticmethod":11,"def":12,"IDENTIFIER":13,"(":14,"parameters":15,")":16,":":17,"statements":18,"function":19,"if_statement":20,"class":21,"foreach":22,"statement_with_semicolon":23,"types":24,"->":25,"statement":26,"while_loop":27,"if":28,"e":29,"elif_statement":30,"while":31,"for":32,"in":33,"declare_var":34,"=":35,"declare_vars":36,"statement_with_semicolon_":37,";":38,"return":39,"access_array_":40,"+=":41,"-=":42,"*=":43,"/=":44,"or":45,"and":46,"==":47,"<=":48,"<":49,">=":50,">":51,"!=":52,"++":53,"+":54,"-":55,"*":56,"/":57,"mod":58,"**":59,"^":60,"parentheses_expr":61,"access_array":62,"parentheses_expr_":63,"[":64,"]":65,".":66,"function_call":67,"named_parameters":68,",":69,"named_parameter":70,"key_values":71,"key_value":72,"key_values_":73,"key_value_":74,"ternary_operator":75,"else":76,"lambda":77,"exprs":78,"{":79,"}":80,"dict":81,"list_comprehensions":82,"NUMBER":83,"STRING_LITERAL":84,"parameter":85,"args":86,"elif":87,"identifiers":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"pass",11:"@staticmethod",12:"def",13:"IDENTIFIER",14:"(",16:")",17:":",21:"class",25:"->",28:"if",31:"while",32:"for",33:"in",35:"=",38:";",39:"return",41:"+=",42:"-=",43:"*=",44:"/=",45:"or",46:"and",47:"==",48:"<=",49:"<",50:">=",51:">",52:"!=",53:"++",54:"+",55:"-",56:"*",57:"/",58:"mod",59:"**",60:"^",64:"[",65:"]",66:".",69:",",76:"else",77:"lambda",79:"{",80:"}",81:"dict",83:"NUMBER",84:"STRING_LITERAL",87:"elif"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,1],[8,2],[8,1],[10,8],[6,1],[6,1],[6,4],[6,7],[6,1],[6,1],[19,6],[19,7],[24,3],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[20,5],[27,4],[22,6],[34,3],[36,2],[36,1],[23,2],[23,1],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[62,4],[40,4],[61,1],[61,3],[61,1],[68,3],[68,1],[70,3],[71,3],[71,1],[72,3],[73,3],[73,1],[74,3],[75,5],[75,5],[63,3],[63,6],[63,2],[63,3],[63,2],[63,3],[63,4],[63,3],[63,5],[63,5],[63,7],[63,9],[63,1],[63,1],[63,1],[63,3],[63,1],[67,3],[67,4],[67,4],[82,5],[82,1],[85,1],[15,3],[15,1],[78,3],[78,1],[86,2],[86,1],[30,5],[30,3],[88,3],[88,1],[18,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 28: case 100:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 18: case 29: case 97:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["class_statements",[]];
break;
case 8:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 11:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0]];
break;
case 12:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 14: case 22:
this.$ = ["semicolon",$$[$0]];
break;
case 15:
this.$ = ["function","public","Object",$$[$0-4],[],$$[$0]];
break;
case 16:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 17: case 96: case 98: case 104:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 24:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 25:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 30:
this.$=$$[$0-1];
break;
case 32:
this.$ = ["return",$$[$0]];
break;
case 33: case 34:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 35: case 36: case 37: case 38: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 53:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 54:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 55:
this.$ = ["-",$$[$0]];
break;
case 56:
this.$ = $$[$0];
break;
case 57: case 58:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 60:
this.$= [".",[$$[$0-2],$$[$0]]];
break;
case 62: case 65: case 68:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 63: case 66: case 69: case 99: case 101: case 105:
this.$ = [$$[$0]];
break;
case 64:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 67:
this.$ = [$$[$0-2],$$[$0]]
break;
case 70:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 71: case 72:
this.$ = ["ternary_operator",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 73:
this.$ = $$[$0-1];
break;
case 74:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 75:
this.$ = ["initializer_list","Object",[]];
break;
case 76:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 77:
this.$ = ["associative_array","Object","Object",[]];
break;
case 78: case 79:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 80:
this.$ = ["initialize_set","Object",$$[$0-1]];
break;
case 81:
this.$ = ["initialize_tuple","Object",[$$[$0-3]].concat($$[$0-1])];
break;
case 82:
this.$ = ["in",$$[$0-3],$$[$0-1]];
break;
case 83:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 84:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 86: case 89:
this.$ = yytext;
break;
case 88:
this.$ = ["parentheses",$$[$0-1]]
break;
case 90:
this.$= ["function_call",$$[$0-2],[]];
break;
case 91:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 92:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 93:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 95:
this.$ = ["Object",$$[$0]];
break;
case 102:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 103:
this.$ = ["else",$$[$0]];
break;
case 106:
this.$ = ["statements",[$$[$0]]]
break;
case 107:
this.$ = ["statements",[]]
break;
}
},
table: [{3:1,4:2,6:3,12:$V0,13:$V1,19:4,20:5,21:$V2,22:7,23:8,28:$V3,32:$V4,37:12,39:$V5,40:14},{1:[3]},{5:[1,16]},{4:17,5:[2,3],6:3,12:$V0,13:$V1,19:4,20:5,21:$V2,22:7,23:8,28:$V3,32:$V4,37:12,39:$V5,40:14},o($V6,[2,9]),o($V6,[2,10]),{13:[1,18]},o($V6,[2,13]),o($V6,[2,14]),{13:[1,19]},{13:$V7,14:$V8,29:20,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:[1,33]},o($Vf,[2,31],{38:[1,34]}),{13:$V7,14:$V8,29:35,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{35:[1,36]},{35:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],64:[1,42]},{1:[2,1]},{5:[2,2]},{14:[1,44],17:[1,43]},{14:[1,45]},{17:[1,46],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},{13:$V7,14:$V8,29:63,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vw,$Vx),o($Vw,[2,59]),o($Vy,$Vz,{14:$VA,66:$VB}),o($Vw,[2,61],{64:[1,66]}),{13:$V7,14:$V8,29:69,55:$V9,61:70,62:23,63:25,64:$Va,67:30,75:67,77:[1,68],79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:73,55:$V9,61:22,62:23,63:25,64:$Va,65:[1,71],67:30,78:72,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:78,55:$V9,61:22,62:23,63:25,64:$Va,67:30,71:75,72:77,78:76,79:$Vb,80:[1,74],81:$Vc,83:$Vd,84:$Ve},{14:[1,79]},o($Vy,[2,85]),o($Vy,[2,86]),o($Vy,[2,89]),{33:[1,80]},o($Vf,[2,30]),o($VC,[2,32],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),{13:$V7,14:$V8,29:81,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:82,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:83,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:84,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:85,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:86,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:87,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{7:88,8:89,9:$VD,10:91,11:$VE},{13:[1,93]},{13:$VF,15:95,16:[1,94],85:96},{9:$VG,12:$V0,13:$V1,18:98,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},{13:$V7,14:$V8,29:107,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:108,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:109,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:110,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:111,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:112,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:113,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:114,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:115,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:116,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:117,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:118,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:119,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:120,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:121,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:122,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vw,[2,55]),{13:[1,124],67:123},{13:[1,130],14:$V8,16:[1,125],29:129,55:$V9,61:22,62:23,63:25,64:$Va,67:30,68:126,70:128,78:127,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:131,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{16:[1,132]},{13:$VF,15:133,85:96},{16:[1,135],28:$VI,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,69:[1,134]},o([16,28,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,69],$Vx,{33:[1,137]}),o($Vy,[2,75]),{65:[1,138]},{32:[1,139],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,65:$VJ,69:$VK},o($Vy,[2,77]),{69:[1,142],80:[1,141]},{80:[1,143]},o($VL,[2,66]),{17:$VM,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,69:$VK,80:$VJ},{13:$VN,73:145,74:146},{13:$V7,14:$V8,29:148,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($VC,[2,33],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VC,[2,34],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VC,[2,35],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VC,[2,36],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VC,[2,37],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VC,[2,38],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,65:[1,149]},o($V6,[2,11]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,7],{10:91,8:150,11:$VE}),{12:[1,151]},{16:[1,152]},{17:[1,153]},{16:[1,154]},o($VO,[2,97],{69:[1,155]}),o([16,17,69],[2,95]),{30:156,76:$VP,87:$VQ},o($Vf,[2,106]),o($Vf,[2,107]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),{13:$V7,14:$V8,29:159,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o([5,11,12,13,16,17,21,28,32,33,38,39,45,65,69,76,80,87],[2,39],{46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o([5,11,12,13,16,17,21,28,32,33,38,39,45,46,65,69,76,80,87],[2,40],{47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,41],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,42],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,43],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,44],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,45],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VR,[2,46],{53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VS,[2,47],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VS,[2,48],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VS,[2,49],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($VT,[2,50],{59:$Vu,60:$Vv}),o($VT,[2,51],{59:$Vu,60:$Vv}),o($VT,[2,52],{59:$Vu,60:$Vv}),o($Vw,[2,53]),o($Vw,[2,54]),o($Vw,[2,60]),{14:$VA},o($Vy,[2,90]),{16:[1,160],69:[1,161]},{16:[1,162]},o($VU,[2,63]),o($VV,$VJ,{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,69:$VK}),o([16,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,69],$Vz,{14:$VA,35:$VW,66:$VB}),{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,65:[1,164]},o($Vy,[2,73]),{17:[1,165]},{13:$V7,14:$V8,29:129,55:$V9,61:22,62:23,63:25,64:$Va,67:30,78:166,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vy,[2,88]),{13:$V7,14:$V8,29:167,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,61:168,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vy,[2,76]),{13:$V7,14:$V8,29:169,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:129,55:$V9,61:22,62:23,63:25,64:$Va,67:30,78:170,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vy,[2,78]),{13:$V7,14:$V8,29:172,55:$V9,61:22,62:23,63:25,64:$Va,67:30,72:171,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vy,[2,80]),{13:$V7,14:$V8,29:173,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{16:[1,174],69:[1,175]},o($VU,[2,69]),{35:[1,176]},{17:[1,177],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},{35:[2,58]},o($V6,[2,6]),{13:[1,178]},{17:[1,179]},{9:$VG,12:$V0,13:$V1,18:180,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},{17:[1,181]},{13:$VF,15:182,85:96},o($Vf,[2,24]),{13:$V7,14:$V8,29:183,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{17:[1,184]},{17:[1,185],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},o($Vy,[2,91]),{13:[1,187],70:186},o($Vy,[2,92]),{13:$V7,14:$V8,29:188,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vw,[2,57]),{13:$V7,14:$V8,29:189,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{16:[1,190]},{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,76:[1,191]},{16:[1,192]},{33:[1,193],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},o($VV,[2,98]),o($VL,[2,65]),{17:$VM,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},o($VL,[2,67],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($Vy,[2,79]),{13:$VN,74:194},{13:$V7,14:$V8,29:195,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{9:$VG,12:$V0,13:$V1,18:196,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},{14:[1,197]},{7:198,8:89,9:$VD,10:91,11:$VE},o($Vf,[2,15]),{9:$VG,12:$V0,13:$V1,18:199,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},o($VO,[2,96]),{17:[1,200],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},{9:$VG,12:$V0,13:$V1,18:201,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},{9:$VG,12:$V0,13:$V1,18:202,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},o($VU,[2,62]),{35:$VW},o($VU,[2,64],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),{16:[1,203],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},o($Vy,[2,81]),{13:$V7,14:$V8,29:204,55:$V9,61:22,62:23,63:25,64:$Va,67:30,75:205,79:$Vb,81:$Vc,83:$Vd,84:$Ve},o($Vy,[2,82]),{13:$V7,14:$V8,29:207,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,82:206,83:$Vd,84:$Ve},o($VU,[2,68]),o($VU,[2,70],{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),o($Vf,[2,26]),{13:$VF,15:208,85:96},o($V6,[2,12]),o($Vf,[2,16]),{9:$VG,12:$V0,13:$V1,18:209,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},o($Vf,[2,103]),o($Vf,[2,25]),o($Vy,[2,74]),{16:[2,71],28:$VI,45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},{16:[2,72]},{28:[1,211],65:[1,210]},o($VX,[2,94],{32:[1,212],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv}),{16:[1,213]},{30:214,76:$VP,87:$VQ},o($Vy,[2,83]),{13:$V7,14:$V8,29:215,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{13:$V7,14:$V8,29:216,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,83:$Vd,84:$Ve},{17:[1,217]},o($Vf,[2,102]),{45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,65:[1,218]},{33:[1,219],45:$Vg,46:$Vh,47:$Vi,48:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv},{9:$VG,12:$V0,13:$V1,18:220,19:105,20:101,22:103,23:104,26:99,27:102,28:$V3,31:$VH,32:$V4,37:12,39:$V5,40:14},o($Vy,[2,84]),{13:$V7,14:$V8,29:207,55:$V9,61:22,62:23,63:25,64:$Va,67:30,79:$Vb,81:$Vc,82:221,83:$Vd,84:$Ve},o([5,11,12,13,21,28,32,39],[2,8]),o($VX,[2,93])],
defaultActions: {16:[2,1],17:[2,2],149:[2,58],205:[2,72]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 83
break;
case 2:return 84
break;
case 3:return 11
break;
case 4:return 21
break;
case 5:return "def"
break;
case 6:return "dict"
break;
case 7:return "pass"
break;
case 8:return "if"
break;
case 9:return 'of'
break;
case 10:return 32
break;
case 11:return "in"
break;
case 12:return "else"
break;
case 13:return "elif"
break;
case 14:return "while"
break;
case 15:return "return"
break;
case 16:return "lambda"
break;
case 17:return 69
break;
case 18:return 66
break;
case 19:return 17
break;
case 20:return 38
break;
case 21:return 46
break;
case 22:return 45
break;
case 23:return 41
break;
case 24:return 42
break;
case 25:return 43
break;
case 26:return 44
break;
case 27:return 50
break;
case 28:return '>>'
break;
case 29:return 51
break;
case 30:return 48
break;
case 31:return '<<'
break;
case 32:return 49
break;
case 33:return 52
break;
case 34:return 47
break;
case 35:return 35
break;
case 36:return 59
break;
case 37:return 43
break;
case 38:return 56
break;
case 39:return 57
break;
case 40:return '%'
break;
case 41:return 55
break;
case 42:return 54
break;
case 43:return 60
break;
case 44:return 79
break;
case 45:return 80
break;
case 46:return 64
break;
case 47:return 65
break;
case 48:return 14
break;
case 49:return 16
break;
case 50:return '_'
break;
case 51:return 13
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:@staticmethod\b)/,/^(?:class\b)/,/^(?:def\b)/,/^(?:dict\b)/,/^(?:pass\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:while\b)/,/^(?:return\b)/,/^(?:lambda\b)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\*\*)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = python_parser;
exports.Parser = python_parser.Parser;
exports.parse = function () { return python_parser.parse.apply(python_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}