/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var swift_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,15],$V3=[1,9],$V4=[1,10],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,14],$Va=[1,13],$Vb=[1,17],$Vc=[5,20,25,26,29,37,40,41,42,45,48,52,61],$Vd=[5,20,25,26,29,33,37,40,41,42,45,48,52,61,86],$Ve=[1,35],$Vf=[1,40],$Vg=[1,29],$Vh=[1,31],$Vi=[1,36],$Vj=[1,41],$Vk=[1,42],$Vl=[1,34],$Vm=[1,51],$Vn=[1,54],$Vo=[5,20,25,26,29,33,37,40,41,42,45,48,52,61,86,92,93],$Vp=[1,65],$Vq=[1,66],$Vr=[1,63],$Vs=[1,64],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[5,20,23,25,26,29,33,34,36,37,40,41,42,45,48,51,52,61,62,63,64,65,66,67,68,69,70,71,72,75,79,86,92,93],$VD=[5,20,23,25,26,29,32,33,34,36,37,40,41,42,45,48,51,52,59,61,62,63,64,65,66,67,68,69,70,71,72,75,79,86,92,93],$VE=[2,89],$VF=[1,87],$VG=[2,90],$VH=[2,117],$VI=[1,88],$VJ=[1,90],$VK=[2,108],$VL=[1,110],$VM=[23,79],$VN=[75,79],$VO=[1,135],$VP=[1,144],$VQ=[1,143],$VR=[1,146],$VS=[1,156],$VT=[2,17],$VU=[1,159],$VV=[1,157],$VW=[1,155],$VX=[1,164],$VY=[1,166],$VZ=[1,168],$V_=[5,20,23,25,26,29,33,34,36,37,40,41,42,45,48,51,52,61,62,63,64,65,75,79,86,92,93],$V$=[5,20,23,25,26,29,33,34,36,37,40,41,42,45,48,51,52,61,62,63,64,65,66,67,68,75,79,86,92,93],$V01=[5,20,23,25,26,29,33,34,36,37,40,41,42,45,48,51,52,61,62,63,64,65,66,67,68,69,70,71,75,79,86,92,93],$V11=[23,75],$V21=[1,185],$V31=[5,20,25,26,29,33,37,40,41,42,45,48,51,52,61,86],$V41=[1,186],$V51=[23,29,33,36,40,41,42,45,48,51,58,75,79],$V61=[5,20,25,26,29,33,37,40,41,42,45,48,49,52,61,86,92,93],$V71=[29,33,40,41,42,45,48,51],$V81=[1,216],$V91=[1,217],$Va1=[33,48],$Vb1=[33,86],$Vc1=[20,25,26,29,33,37,40,41,42,45,48,52,61,86];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,"initialize_var_":9,"initialize_var":10,"statements_":11,"statements_with_vars":12,"statements_without_vars":13,"statements":14,"class_statements":15,"class_statements_":16,"class_statement":17,"initialize_vars":18,"statement_with_semicolon":19,"while":20,"(":21,"e":22,")":23,"bracket_statements":24,"for":25,"IDENTIFIER":26,"in":27,"parentheses_expr":28,"func":29,"parameters":30,"->":31,"{":32,"}":33,"<":34,"type_params":35,">":36,"if":37,"elif":38,"class_":39,"class":40,"protocol":41,"enum":42,"case":43,"identifiers":44,"struct":45,"struct_statements":46,"struct_statement":47,"var":48,":":49,"type":50,"init":51,"return":52,"+=":53,"-=":54,"*=":55,"/=":56,"access_array":57,"=":58,".":59,"dot_expr":60,"let":61,"or":62,"and":63,"==":64,"~=":65,"+":66,"-":67,"..":68,"*":69,"/":70,"%":71,"^":72,"not_expr":73,"named_parameters":74,",":75,"named_parameter":76,"!":77,"[":78,"]":79,"function_call":80,"exprs":81,"parentheses_expr_":82,"NUMBER":83,"STRING_LITERAL":84,"function":85,"end":86,"key_values":87,"parameter":88,"out":89,"inout":90,"types":91,"else_if":92,"else":93,"key_value":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"while",21:"(",23:")",25:"for",26:"IDENTIFIER",27:"in",29:"func",31:"->",32:"{",33:"}",34:"<",35:"type_params",36:">",37:"if",40:"class",41:"protocol",42:"enum",43:"case",45:"struct",48:"var",49:":",51:"init",52:"return",53:"+=",54:"-=",55:"*=",56:"/=",58:"=",59:".",61:"let",62:"or",63:"and",64:"==",65:"~=",66:"+",67:"-",68:"..",69:"*",70:"/",71:"%",72:"^",75:",",77:"!",78:"[",79:"]",83:"NUMBER",84:"STRING_LITERAL",85:"function",86:"end",89:"out",90:"inout",92:"else_if",93:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[8,1],[10,1],[11,1],[11,1],[11,2],[12,2],[12,1],[13,2],[13,1],[14,1],[15,1],[15,0],[16,2],[16,1],[18,2],[18,1],[7,1],[7,5],[7,5],[7,10],[7,13],[7,6],[7,5],[7,1],[39,5],[39,5],[39,6],[39,5],[46,2],[46,1],[47,2],[47,4],[17,1],[17,7],[17,5],[17,4],[17,2],[17,1],[17,10],[17,11],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,5],[19,3],[19,3],[19,4],[19,6],[9,4],[9,6],[22,3],[22,3],[22,4],[22,3],[22,4],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[74,3],[74,1],[76,3],[73,2],[73,1],[60,3],[60,1],[57,4],[80,3],[80,4],[80,4],[82,1],[82,1],[82,1],[28,6],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[28,1],[50,3],[50,4],[50,1],[88,4],[88,4],[88,4],[88,3],[30,3],[30,1],[30,0],[81,3],[81,1],[91,3],[91,1],[38,6],[38,5],[38,2],[44,3],[44,1],[87,3],[87,1],[94,3],[24,3],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 13: case 20:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 14: case 19: case 21: case 35: case 83: case 107:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0]]
break;
case 6:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 7:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 9:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 10:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],["statements",$$[$0]]]]
break;
case 11:
this.$ = $$[$0-1].concat([["semicolon",$$[$0]]]);
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 16:
this.$ = ["class_statements",$$[$0]]
break;
case 17:
this.$ = ["class_statements",[]]
break;
case 18: case 34:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 22: case 122:
this.$ = ["semicolon",$$[$0]];
break;
case 23:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 25:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 26:
this.$ = ["generic_function","public",$$[$0-3],$$[$0-11],$$[$0-6],$$[$0-1]];
break;
case 27:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 28:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 31:
this.$ = ["interface","public",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["enum",$$[$0-4],$$[$0-1]];
break;
case 33:
this.$ = ["struct",$$[$0-3],["struct_statements",$$[$0-1]]];
break;
case 36:
this.$ = ["struct_statement","Object",$$[$0]];
break;
case 37:
this.$ = ["struct_statement",$$[$0],$$[$0-2]];
break;
case 39:
this.$ = ["constructor","public",$$[$0-4],$$[$0-1]];
break;
case 40:
this.$ = ["interface_instance_method","public","Object",$$[$0-3],$$[$0-1]];
break;
case 41:
this.$ = ["initialize_instance_var","public",$$[$0],$$[$0-2]];
break;
case 42:
this.$ = ["initialize_instance_var","public","Object",$$[$0]];
break;
case 43:
this.$ = ["initialize_instance_var_with_value","public"].concat($$[$0]);
break;
case 44: case 45:
this.$ = ["instance_method","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 46:
this.$ = ["return",$$[$0]];
break;
case 47:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 48: case 49: case 50: case 51: case 63: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 52: case 54:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["set_var",[".",[$$[$0-4],$$[$0-2]]],$$[$0]];
break;
case 55:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 56:
this.$ = ["initialize_constant","Object",$$[$0-2],$$[$0]];
break;
case 57:
this.$ = ["initialize_constant",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 58:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 59:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 60:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 61:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 62: case 64:
this.$ = [$$[$0-2],$$[$0-3],$$[$0-1]];
break;
case 66:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 75:
this.$ = ["-",$$[$0]];
break;
case 77: case 118:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 78: case 110: case 112: case 117: case 119:
this.$ = [$$[$0]];
break;
case 79:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 80:
this.$ = ["!", [".",$$[$0]]];
break;
case 81:
this.$ = [".", $$[$0]];
break;
case 82: case 106: case 109: case 111: case 116:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 84:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 85:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 86: case 87:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 88: case 89: case 90:
this.$ = yytext;
break;
case 91:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 92:
this.$ = ["parentheses",$$[$0-1]];
break;
case 93:
this.$ = ["initializer_list","Object",[]];
break;
case 94:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 95:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 99:
this.$ = [$$[$0-1],"[]"];
break;
case 100:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 102:
this.$ = ["out_parameter",$$[$0],$$[$0-3]];
break;
case 103:
this.$ = ["in_parameter",$$[$0],$$[$0-3]];
break;
case 104:
this.$ = ["ref_parameter",$$[$0],$$[$0-3]];
break;
case 105:
this.$ = [$$[$0], $$[$0-2]];
break;
case 108:
this.$ = [];
break;
case 113:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 114:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 115:
this.$ = ["else",$$[$0]];
break;
case 120:
this.$ = [$$[$0-2],$$[$0]]
break;
case 121:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:12,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:12,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vd,[2,22]),{21:[1,24]},{26:[1,25]},{26:[1,26]},{21:[1,27]},o($Vd,[2,29]),o($Vd,[2,6]),{21:$Ve,22:28,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{26:[1,44],44:43},{53:[1,45],54:[1,46],55:[1,47],56:[1,48],58:[1,50],59:[1,49],78:$Vm},{58:[1,52]},{26:[1,53]},{26:$Vn},{26:[1,55]},{26:[1,56]},{26:[1,57]},{1:[2,1]},o($Vc,[2,2]),{21:$Ve,22:58,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{27:[1,59]},{21:[1,60],34:[1,61]},{21:$Ve,22:62,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($Vo,[2,46],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{21:$Ve,22:76,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($VC,[2,76]),{21:$Ve,26:$Vf,28:33,57:37,60:77,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($VC,[2,81]),o($VC,[2,83],{59:[1,78]}),{21:[1,79]},{21:$Ve,22:80,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:84,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,79:[1,81],80:38,81:82,82:39,83:$Vj,84:[1,86],85:$Vl,87:83,94:85},o($VD,[2,96]),o($VD,[2,97]),o($VD,[2,98]),o($VD,$VE,{21:$VF,78:$Vm}),o($VD,[2,88]),o($VD,$VG),o($Vo,[2,47]),o($Vd,$VH,{49:[1,89],58:$VI,75:$VJ}),{21:$Ve,22:91,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:92,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:93,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:94,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,26:[1,95],28:33,57:37,60:96,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:97,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:98,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:99,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{49:[1,101],58:[1,100]},{32:[1,102]},{32:[1,103]},{32:[1,104]},{32:[1,105]},{23:[1,106],34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Ve,26:$Vf,28:107,57:37,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{23:$VK,26:$VL,30:108,88:109},{35:[1,111]},{23:[1,112],34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Ve,22:113,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:114,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:116,26:$Vf,28:33,57:37,58:[1,115],60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:118,26:$Vf,28:33,57:37,58:[1,117],60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:119,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:120,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:121,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:122,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:123,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:124,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:125,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:126,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:127,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($VC,[2,75]),o($VC,[2,80]),{21:$Ve,26:$Vf,28:33,57:37,60:128,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{23:$VK,26:$VL,30:129,88:109},{23:[1,130],34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($VD,[2,93]),{79:[1,131]},{75:[1,133],79:[1,132]},o($VM,[2,110],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,75:[1,134]}),o($VN,[2,119]),o([34,36,59,62,63,64,65,66,67,68,69,70,71,72,75,79],$VG,{49:$VO}),{21:$Ve,22:84,23:[1,136],26:[1,140],28:33,57:37,60:32,67:$Vg,73:30,74:138,76:139,77:$Vh,78:$Vi,80:38,81:137,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:141,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{26:$VP,50:142,78:$VQ},{26:$VR,44:145},o($Vo,[2,48],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($Vo,[2,49],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($Vo,[2,50],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($Vo,[2,51],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o([5,20,25,26,29,33,37,40,41,42,45,48,52,59,61,86,92,93],$VE,{21:$VF,58:[1,147],78:$Vm}),o($Vo,[2,55]),o($Vo,[2,54],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,79:[1,148]},o($Vo,[2,52],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{21:$Ve,22:149,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{26:$VP,50:150,78:$VQ},{9:158,15:151,16:152,17:153,29:$VS,33:$VT,39:154,40:$VU,41:$V6,42:$V7,45:$V8,48:$VV,51:$VW},{9:158,15:160,16:152,17:153,29:$VS,33:$VT,39:154,40:$VU,41:$V6,42:$V7,45:$V8,48:$VV,51:$VW},{43:[1,161]},{46:162,47:163,48:$VX},{19:167,24:165,26:$V2,32:$VY,48:$VZ,52:$Va,57:16,61:$Vb},{19:167,24:169,26:$V2,32:$VY,48:$VZ,52:$Va,57:16,61:$Vb},{23:[1,170]},{23:[2,107],75:[1,171]},{49:[1,172]},{36:[1,173]},{19:167,24:174,26:$V2,32:$VY,48:$VZ,52:$Va,57:16,61:$Vb},o([5,20,23,25,26,29,33,37,40,41,42,45,48,51,52,61,62,75,79,86,92,93],[2,60],{34:$Vp,36:$Vq,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o([5,20,23,25,26,29,33,37,40,41,42,45,48,51,52,61,62,63,75,79,86,92,93],[2,61],{34:$Vp,36:$Vq,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{21:$Ve,22:175,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($V_,[2,63],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{21:$Ve,22:176,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($V_,[2,67],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V_,[2,65],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V_,[2,66],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V$,[2,68],{69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V$,[2,69],{69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V$,[2,70],{69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V01,[2,71],{72:$VB}),o($V01,[2,72],{72:$VB}),o($V01,[2,73],{72:$VB}),o($VC,[2,74]),o($VC,[2,82]),{23:[1,177]},o($VD,[2,92]),o($VD,[2,94]),o($VD,[2,95]),{84:[1,179],94:178},{21:$Ve,22:84,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,81:180,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:181,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($VD,[2,85]),{23:[1,182]},{23:[1,183],75:[1,184]},o($V11,[2,78]),o([23,34,36,59,62,63,64,65,66,67,68,69,70,71,72,75],$VE,{21:$VF,49:$V21,78:$Vm}),o($V31,[2,58],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{58:$V41},{26:$VP,50:187,78:$VQ},o($V51,[2,101],{34:[1,188]}),o($V61,[2,116]),o($V61,$VH,{75:$VJ}),{21:$Ve,22:189,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o([5,20,23,25,26,29,32,33,34,36,37,40,41,42,45,48,51,52,58,59,61,62,63,64,65,66,67,68,69,70,71,72,75,79,86,92,93],[2,84]),o($Vo,[2,56],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{58:[1,190]},{33:[1,191]},{33:[2,16]},{9:158,16:192,17:153,29:$VS,33:[2,19],39:154,40:$VU,41:$V6,42:$V7,45:$V8,48:$VV,51:$VW},o($V71,[2,38]),{21:[1,193]},{26:[1,194]},{26:[1,195]},o($V71,[2,43]),{26:$Vn,29:[1,196]},{33:[1,197]},{26:$VR,44:198},{33:[1,199]},{33:[2,35],46:200,47:163,48:$VX},{26:$VR,44:201},o($Vd,[2,23]),{7:207,9:205,11:203,12:204,13:206,14:202,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($Vo,[2,122]),{26:$VR,44:43},o($Vd,[2,24]),{31:[1,208]},{23:$VK,26:$VL,30:209,88:109},{26:$VP,27:[1,211],50:213,78:$VQ,89:[1,210],90:[1,212]},{21:[1,214]},o($Vd,[2,28],{38:215,92:$V81,93:$V91}),o($V_,[2,62],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V_,[2,64],{66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{7:207,9:205,11:203,12:204,13:206,14:218,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($VN,[2,118]),{49:$VO},o($VM,[2,109]),o($VN,[2,120],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($VD,[2,86]),o($VD,[2,87]),{26:[1,220],76:219},{21:$Ve,22:221,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{21:$Ve,22:222,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},{79:[1,223]},{26:$VP,50:224,78:$VQ},o($Vo,[2,53],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{21:$Ve,22:225,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($V31,[2,30]),{33:[2,18]},{23:$VK,26:$VL,30:226,88:109},{21:[1,227]},o($V71,[2,42],{49:[1,228],58:$VI}),{26:[1,229]},o($V31,[2,31]),{33:[1,230]},o($V31,[2,33]),{33:[2,34]},o($Va1,[2,36],{49:[1,231]}),{33:[1,232]},o($Vb1,[2,15]),o($Vb1,[2,8]),o($Vb1,[2,9],{19:6,39:11,57:16,13:206,7:207,12:233,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,40:$V5,41:$V6,42:$V7,45:$V8,48:$VZ,52:$Va,61:$Vb}),o($Vb1,[2,12],{19:6,39:11,9:12,57:16,8:234,7:235,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,61:$Vb}),o($Vc1,[2,14]),{26:[1,236]},{23:[2,106]},{26:$VP,50:237,78:$VQ},{26:$VP,50:238,78:$VQ},{26:$VP,50:239,78:$VQ},o($V11,[2,105]),{23:$VK,26:$VL,30:240,88:109},o($Vd,[2,27]),{21:[1,241]},{19:167,24:242,26:$V2,32:$VY,48:$VZ,52:$Va,57:16,61:$Vb},{86:[1,243]},o($V11,[2,77]),{49:$V21},o($V11,[2,79],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V31,[2,59],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o($V51,[2,99]),{36:[1,244]},o($Vo,[2,57],{34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{23:[1,245]},{23:$VK,26:$VL,30:246,88:109},{26:$VP,50:247,78:$VQ},{21:[1,248]},o($V31,[2,32]),{26:$VP,50:249,78:$VQ},o($Vo,[2,121]),o($Vb1,[2,10]),o($Vb1,[2,11]),o($Vc1,[2,13]),{32:[1,250]},o($V11,[2,102]),o($V11,[2,103]),o($V11,[2,104]),{23:[1,251]},{21:$Ve,22:252,26:$Vf,28:33,57:37,60:32,67:$Vg,73:30,77:$Vh,78:$Vi,80:38,82:39,83:$Vj,84:$Vk,85:$Vl},o($Vd,[2,115]),o($VD,[2,91]),o($V51,[2,100]),{32:[1,253]},{23:[1,254]},o($V71,[2,41],{58:$V41}),{23:$VK,26:$VL,30:255,88:109},o($Va1,[2,37]),{7:207,9:205,11:203,12:204,13:206,14:256,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},{31:[1,257]},{23:[1,258],34:$Vp,36:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{7:207,9:205,11:203,12:204,13:206,14:259,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($V71,[2,40],{31:[1,260]}),{23:[1,261]},{33:[1,262]},{26:[1,263]},{19:167,24:264,26:$V2,32:$VY,48:$VZ,52:$Va,57:16,61:$Vb},{33:[1,265]},{26:[1,266]},{31:[1,267]},o($Vd,[2,25]),{32:[1,268]},o($Vd,[2,114],{38:269,92:$V81,93:$V91}),o($V71,[2,39]),{32:[1,270]},{26:[1,271]},{7:207,9:205,11:203,12:204,13:206,14:272,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($Vd,[2,113]),{7:207,9:205,11:203,12:204,13:206,14:273,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},{32:[1,274]},{33:[1,275]},{33:[1,276]},{7:207,9:205,11:203,12:204,13:206,14:277,19:6,20:$V0,25:$V1,26:$V2,29:$V3,37:$V4,39:11,40:$V5,41:$V6,42:$V7,45:$V8,48:$V9,52:$Va,57:16,61:$Vb},o($Vd,[2,26]),o($V71,[2,44]),{33:[1,278]},o($V71,[2,45])],
defaultActions: {22:[2,1],152:[2,16],192:[2,18],200:[2,34],209:[2,106]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 83
break;
case 4:return 84
break;
case 5:return "$"
break;
case 6:return "func"
break;
case 7:return "init"
break;
case 8:return "inout"
break;
case 9:return 89
break;
case 10:return "end"
break;
case 11:return 'then'
break;
case 12:return 43
break;
case 13:return 61
break;
case 14:return 48
break;
case 15:return 37
break;
case 16:return 40
break;
case 17:return 45
break;
case 18:return 41
break;
case 19:return 93
break;
case 20:return 52
break;
case 21:return 20
break;
case 22:return 25
break;
case 23:return 'repeat'
break;
case 24:return 'until'
break;
case 25:return 'of'
break;
case 26:return 'not'
break;
case 27:return 53
break;
case 28:return 55
break;
case 29:return 54
break;
case 30:return 56
break;
case 31:return 75
break;
case 32:return 68
break;
case 33:return 59
break;
case 34:return 49
break;
case 35:return 63
break;
case 36:return 62
break;
case 37:return 36
break;
case 38:return 34
break;
case 39:return 65
break;
case 40:return 64
break;
case 41:return 58
break;
case 42:return 55
break;
case 43:return 69
break;
case 44:return 70
break;
case 45:return 71
break;
case 46:return 31
break;
case 47:return 67
break;
case 48:return 66
break;
case 49:return 72
break;
case 50:return 32
break;
case 51:return 33
break;
case 52:return 78
break;
case 53:return 79
break;
case 54:return 21
break;
case 55:return 23
break;
case 56:return '_'
break;
case 57:return 'pairs'
break;
case 58:return 27
break;
case 59:return 'do'
break;
case 60:return 26
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:func\b)/,/^(?:init\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:case\b)/,/^(?:let\b)/,/^(?:var\b)/,/^(?:if\b)/,/^(?:class\b)/,/^(?:struct\b)/,/^(?:protocol\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:->)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = swift_parser;
exports.Parser = swift_parser.Parser;
exports.parse = function () { return swift_parser.parse.apply(swift_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}