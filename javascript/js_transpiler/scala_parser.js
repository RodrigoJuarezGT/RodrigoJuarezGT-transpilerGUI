/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scala_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,15],$V2=[1,20],$V3=[1,11],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,13],$V8=[1,17],$V9=[1,19],$Va=[1,21],$Vb=[1,22],$Vc=[5,8,9,10,21,32,35,38,46,54,77,79,80],$Vd=[5,8,9,10,12,20,21,32,35,38,46,54,77,79,80,82],$Ve=[1,42],$Vf=[1,38],$Vg=[1,32],$Vh=[1,34],$Vi=[1,37],$Vj=[14,74],$Vk=[2,76],$Vl=[5,8,9,10,12,20,21,31,32,35,38,46,54,77,79,80,82],$Vm=[1,52],$Vn=[1,51],$Vo=[1,56],$Vp=[5,8,9,10,12,14,16,20,21,31,32,35,37,38,46,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,77,79,80,82,86],$Vq=[2,77],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,77,79,80,82,86],$VH=[5,8,9,10,12,16,20,21,31,32,35,37,38,46,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,77,79,80,82,86],$VI=[5,8,9,10,12,16,20,21,31,32,35,37,38,46,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,77,79,80,82,86],$VJ=[12,86],$VK=[1,101],$VL=[1,105],$VM=[1,106],$VN=[1,110],$VO=[2,89],$VP=[1,134],$VQ=[1,136],$VR=[1,135],$VS=[12,20,21],$VT=[1,152],$VU=[5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,57,58,59,60,61,62,63,75,77,79,80,82,86],$VV=[5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,57,58,59,60,61,62,63,64,65,66,75,77,79,80,82,86],$VW=[5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,77,79,80,82,86],$VX=[16,23,86],$VY=[1,176],$VZ=[12,82],$V_=[9,10,21,32,35,38,46,54,77,79,80];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"class":8,"IDENTIFIER":9,"{":10,"class_statements":11,"}":12,"extends":13,"(":14,"parameters":15,")":16,"initialize_var1":17,"class_statements_":18,"class_statement":19,"class_":20,"def":21,":":22,"=":23,"statements":24,"initialize_var_":25,"initialize_var":26,"statements_":27,"statements_without_vars":28,"initialize_vars":29,"statement_with_semicolon":30,";":31,"while":32,"e":33,"bracket_statements":34,"for":35,"dot_expr":36,"<-":37,"if":38,"elif":39,"case_statement":40,"parentheses_expr":41,"=>":42,"case_statements_":43,"case_statements":44,"_":45,"return":46,"access_array":47,"+=":48,"-=":49,"*=":50,"/=":51,".":52,"function_call":53,"var":54,"type":55,"or":56,"and":57,"<=":58,"<":59,">=":60,"==":61,"!=":62,">":63,"+":64,"-":65,"..":66,"*":67,"/":68,"%":69,"^":70,"not_expr":71,"!":72,"parentheses_expr_":73,"[":74,"]":75,"exprs":76,"Array":77,"key_values":78,"NUMBER":79,"STRING_LITERAL":80,"function":81,"end":82,"types":83,"->":84,"parameter":85,",":86,"else":87,"identifiers":88,"key_value":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"IDENTIFIER",10:"{",12:"}",13:"extends",14:"(",16:")",20:"class_",21:"def",22:":",23:"=",31:";",32:"while",35:"for",37:"<-",38:"if",42:"=>",45:"_",46:"return",48:"+=",49:"-=",50:"*=",51:"/=",52:".",54:"var",56:"or",57:"and",58:"<=",59:"<",60:">=",61:"==",62:"!=",63:">",64:"+",65:"-",66:"..",67:"*",68:"/",69:"%",70:"^",72:"!",74:"[",75:"]",77:"Array",79:"NUMBER",80:"STRING_LITERAL",81:"function",82:"end",84:"->",86:",",87:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,5],[6,7],[6,8],[6,1],[11,1],[18,2],[18,1],[19,1],[19,11],[19,9],[19,7],[17,1],[26,1],[27,1],[27,2],[28,2],[28,1],[29,2],[29,1],[24,1],[7,1],[7,2],[7,5],[7,9],[7,6],[7,5],[7,11],[40,3],[43,2],[43,1],[44,4],[44,1],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[25,6],[25,4],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,1],[71,2],[71,1],[36,3],[36,1],[47,4],[53,3],[53,4],[73,3],[73,4],[73,3],[73,1],[73,1],[73,1],[41,6],[41,3],[41,1],[41,1],[41,1],[55,1],[55,4],[55,5],[85,3],[15,3],[15,1],[15,0],[76,3],[76,1],[83,3],[83,1],[39,9],[39,4],[88,3],[88,1],[78,3],[78,1],[89,3],[34,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 22:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 11: case 21: case 23: case 34: case 68: case 88:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["scala_class","public",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 8:
this.$ = ["semicolon",$$[$0]]
break;
case 9:
this.$ = ["class_statements",$$[$0]]
break;
case 10: case 20: case 33:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["instance_method","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 14:
this.$ = ["instance_method","public","Object",$$[$0-7],$$[$0-5],$$[$0-1]];
break;
case 15:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],["statements",[$$[$0]]]];
break;
case 16:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 17:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 19:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 24:
this.$ = ["statements",$$[$0]]
break;
case 25:
this.$ = ["semicolon",$$[$0]];
break;
case 26:
this.$ = ["semicolon",$$[$0-1]];
break;
case 27:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 28:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 29:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 30:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 32:
this.$ = ["case",$$[$0-2],["statements",[$$[$0]]]]
break;
case 35:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 37:
this.$ = ["return",$$[$0]];
break;
case 38: case 39:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 40: case 41: case 42: case 43: case 50: case 51: case 52: case 53: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 46:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 47:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 54:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 63:
this.$ = ["-",$$[$0]];
break;
case 65:
this.$ = ["!", [".",$$[$0]]];
break;
case 66:
this.$ = [".", $$[$0]];
break;
case 67: case 87: case 90: case 92: case 96:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 69:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 70:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 71:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 72:
this.$ = ["initializer_list","Object",[]];
break;
case 73:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 74:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 75: case 76: case 77:
this.$ = yytext;
break;
case 78:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["parentheses",$$[$0-1]];
break;
case 84:
this.$ = [$$[$0-1],"[]"]
break;
case 85:
this.$ = ["function_type",$$[$0-3],$$[$0]]
break;
case 86:
this.$ = [$$[$0],$$[$0-2]];
break;
case 89:
this.$ = [];
break;
case 91: case 93: case 97: case 99:
this.$ = [$$[$0]];
break;
case 94:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 95:
this.$ = ["else",$$[$0-1]];
break;
case 98:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 100:
this.$ = [$$[$0-2],$$[$0]]
break;
case 101:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:$V1,10:$V2,17:6,21:$V3,25:12,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{1:[3]},{5:[1,23],6:24,7:4,8:$V0,9:$V1,10:$V2,17:6,21:$V3,25:12,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),{9:[1,25]},o($Vc,[2,8]),o($Vd,[2,25],{31:[1,26]}),{14:[1,27]},{14:[1,28]},{14:[1,29]},{9:[1,30]},o($Vc,[2,16]),{9:$Ve,10:$V2,14:$Vf,33:31,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{23:[1,43]},o($Vj,$Vk,{23:[1,44],48:[1,45],49:[1,46],50:[1,47],51:[1,48],52:[1,49]}),o($Vl,[2,45]),{9:[1,50]},{14:$Vm,74:$Vn},{14:[1,53]},{78:54,80:$Vo,89:55},o($Vp,[2,75]),o($Vp,$Vq),{1:[2,1]},o($Vc,[2,2]),{10:[1,57],13:[1,58],14:[1,59]},o($Vd,[2,26]),{9:$Ve,10:$V2,14:$Vf,33:60,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,36:61,41:36,47:39,53:40,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:62,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{14:[1,63]},o($Vl,[2,37],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),{9:$Ve,10:$V2,14:$Vf,33:79,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},o($VG,[2,64]),{9:$Ve,10:$V2,14:$Vf,36:80,41:36,47:39,53:40,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},o($VG,[2,66]),o($VH,[2,68],{52:[1,81]}),{14:[1,82]},{9:$Ve,10:$V2,14:$Vf,33:83,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},o($VI,[2,80]),o($VI,[2,81]),o($VI,[2,82],{14:$Vm,74:$Vn}),o($Vp,$Vk),{9:$Ve,10:$V2,14:$Vf,33:84,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:85,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:86,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:87,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:88,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:89,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,36:90,41:36,47:39,53:40,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{22:[1,91],23:[1,92]},{9:$Ve,10:$V2,14:$Vf,33:93,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,16:[1,94],33:96,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,76:95,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,16:[1,97],33:96,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,76:98,77:$V9,79:$Va,80:$Vb,81:$Vi},{12:[1,99],86:[1,100]},o($VJ,[2,99]),{23:$VK},{11:102,18:103,19:104,20:$VL,21:$VM},{9:[1,107]},{9:$VN,15:108,16:$VO,85:109},{16:[1,111],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF},{37:[1,112]},{16:[1,113],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF},{9:$VN,15:114,16:$VO,85:109},{9:$Ve,10:$V2,14:$Vf,33:115,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:116,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:117,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:118,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:119,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:120,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:121,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:122,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:123,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:124,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:125,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:126,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:127,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:128,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$Ve,10:$V2,14:$Vf,33:129,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},o($VG,[2,63]),o($VG,[2,65]),{9:$Ve,10:$V2,14:$Vf,36:130,41:36,47:39,53:40,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:$VN,15:131,16:$VO,85:109},{16:[1,132],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF},o($Vl,[2,38],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,39],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,40],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,41],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,42],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,43],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vl,[2,44]),{9:$VP,14:$VQ,55:133,77:$VR},{9:$Ve,10:$V2,14:$Vf,33:137,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,75:[1,138]},o($VI,[2,70]),{16:[1,139]},{16:[2,91],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,86:[1,140]},o($Vp,[2,72]),{16:[1,141]},o($Vp,[2,74]),{80:$Vo,89:142},{9:$Ve,10:$V2,14:$Vf,33:143,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{12:[1,144]},{12:[2,9]},{12:[2,11],18:145,19:104,20:$VL,21:$VM},o($VS,[2,12]),{9:[1,146]},{10:[1,147]},{16:[1,148]},{16:[2,88],86:[1,149]},{22:[1,150]},{10:$VT,34:151},{9:$Ve,10:$V2,14:$Vf,36:153,41:36,47:39,53:40,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{10:$VT,34:154},{16:[1,155]},o([5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,75,77,79,80,82,86],[2,48],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o([5,8,9,10,12,16,20,21,31,32,35,38,46,54,56,57,75,77,79,80,82,86],[2,49],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,50],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,51],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,52],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,53],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,54],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VU,[2,55],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($VV,[2,56],{67:$VC,68:$VD,69:$VE,70:$VF}),o($VV,[2,57],{67:$VC,68:$VD,69:$VE,70:$VF}),o($VV,[2,58],{67:$VC,68:$VD,69:$VE,70:$VF}),o($VW,[2,59],{70:$VF}),o($VW,[2,60],{70:$VF}),o($VW,[2,61],{70:$VF}),o($VG,[2,62]),o($VH,[2,67]),{16:[1,156]},o($VI,[2,79]),{23:[1,157]},o($VX,[2,83]),{74:[1,158]},{9:$VP,14:$VQ,55:160,77:$VR,83:159},o($Vc,[2,47],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o([5,8,9,10,12,16,20,21,23,31,32,35,37,38,46,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,77,79,80,82,86],[2,69]),o($VI,[2,71]),{9:$Ve,10:$V2,14:$Vf,33:96,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,76:161,77:$V9,79:$Va,80:$Vb,81:$Vi},o($Vp,[2,73]),o($VJ,[2,98]),o($VJ,[2,100],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),o($Vc,[2,5]),{12:[2,10]},{14:[1,162]},{11:163,18:103,19:104,20:$VL,21:$VM},{10:[1,164]},{9:$VN,15:165,16:$VO,85:109},{9:[1,166]},o($Vd,[2,27]),{7:171,9:$V1,10:$V2,21:$V3,24:167,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{16:[1,174]},o($Vd,[2,30],{39:175,87:$VY}),{22:[1,177]},{7:171,9:$V1,10:$V2,21:$V3,24:178,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{9:$Ve,10:$V2,14:$Vf,33:179,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{9:[1,180]},{16:[1,181]},{16:[2,93],86:[1,182]},{16:[2,90]},{9:$VN,15:183,16:$VO,85:109},{12:[1,184]},{11:185,18:103,19:104,20:$VL,21:$VM},{16:[2,87]},o([16,86],[2,86]),{12:[1,186]},o($VZ,[2,24]),o($VZ,[2,18]),{7:171,9:$V1,10:$V2,21:$V3,25:173,26:188,28:187,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},o($VZ,[2,21],{30:7,47:14,53:16,73:18,7:171,28:189,9:$V1,10:$V2,21:$V3,32:$V4,35:$V5,38:$V6,46:$V7,77:$V9,79:$Va,80:$Vb}),o($V_,[2,23]),o($V_,[2,17]),{10:[1,190]},o($Vd,[2,29]),{10:[1,192],38:[1,191]},{9:[1,193]},{82:[1,194]},o($Vc,[2,46],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF}),{75:[1,195]},{84:[1,196]},{9:$VP,14:$VQ,55:160,77:$VR,83:197},{16:[1,198]},o($Vc,[2,6]),{12:[1,199]},o([5,8,9,10,12,20,21,32,35,38,46,54,77,79,80,82,87],[2,101]),o($VZ,[2,19]),o($V_,[2,22]),o($VZ,[2,20]),{7:171,9:$V1,10:$V2,21:$V3,24:200,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{14:[1,201]},{7:171,9:$V1,10:$V2,21:$V3,24:202,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{23:[1,203]},o($VI,[2,78]),o($VX,[2,84]),{9:$VP,14:$VQ,55:204,77:$VR},{16:[2,92]},{22:[1,205],23:[1,206]},o($Vc,[2,7]),{12:[1,207]},{9:$Ve,10:$V2,14:$Vf,33:208,36:35,41:36,47:39,53:40,65:$Vg,71:33,72:$Vh,73:41,77:$V9,79:$Va,80:$Vb,81:$Vi},{12:[1,209]},{10:[1,210]},o($VX,[2,85]),{9:[1,211]},{7:213,9:$V1,10:[1,212],21:$V3,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,73:18,77:$V9,79:$Va,80:$Vb},o($Vd,[2,28]),{16:[1,214],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF},o($Vd,[2,95]),{7:171,9:$V1,10:$V2,21:$V3,24:215,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},{23:[1,216]},{7:171,9:$V1,10:$V2,21:$V3,24:217,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,78:54,79:$Va,80:[1,218],89:55},o($VS,[2,15]),{10:[1,219]},{12:[1,220]},{10:[1,221]},{12:[1,222]},o($Vj,$Vq,{23:$VK}),{7:171,9:$V1,10:$V2,21:$V3,24:223,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},o($Vd,[2,31]),{7:171,9:$V1,10:$V2,21:$V3,24:224,25:173,26:172,27:168,28:169,29:170,30:7,32:$V4,35:$V5,38:$V6,46:$V7,47:14,53:16,54:$V8,73:18,77:$V9,79:$Va,80:$Vb},o($VS,[2,14]),{12:[1,225]},{12:[1,226]},{39:227,87:$VY},o($VS,[2,13]),o($Vd,[2,94])],
defaultActions: {23:[2,1],103:[2,9],145:[2,10],161:[2,90],165:[2,87],197:[2,92]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 79
break;
case 2:return 80
break;
case 3:return "$"
break;
case 4:return "def"
break;
case 5:return "end"
break;
case 6:return 77
break;
case 7:return 8
break;
case 8:return 38
break;
case 9:return 87
break;
case 10:return 46
break;
case 11:return 32
break;
case 12:return 'match'
break;
case 13:return 35
break;
case 14:return 54
break;
case 15:return 'of'
break;
case 16:return 'not'
break;
case 17:return 86
break;
case 18:return 66
break;
case 19:return 52
break;
case 20:return 22
break;
case 21:return 31
break;
case 22:return 57
break;
case 23:return 56
break;
case 24:return 60
break;
case 25:return 63
break;
case 26:return 37
break;
case 27:return 58
break;
case 28:return 59
break;
case 29:return 62
break;
case 30:return 42
break;
case 31:return 61
break;
case 32:return 23
break;
case 33:return 50
break;
case 34:return 67
break;
case 35:return 51
break;
case 36:return 68
break;
case 37:return 69
break;
case 38:return 49
break;
case 39:return 65
break;
case 40:return 48
break;
case 41:return 64
break;
case 42:return 70
break;
case 43:return 10
break;
case 44:return 12
break;
case 45:return 74
break;
case 46:return 75
break;
case 47:return 14
break;
case 48:return 16
break;
case 49:return 45
break;
case 50:return 'pairs'
break;
case 51:return 'in'
break;
case 52:return 'do'
break;
case 53:return 9
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:Array\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:match\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<-)/,/^(?:<=)/,/^(?:<)/,/^(?:!=)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scala_parser;
exports.Parser = scala_parser.Parser;
exports.parse = function () { return scala_parser.parse.apply(scala_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}