/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var perl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,7],$V3=[1,21],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,13],$V8=[1,20],$V9=[1,17],$Va=[1,16],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[5,21,23,24,25,28,29,33,36,37,38,44,76,77,78,85,86],$Vh=[1,35],$Vi=[1,37],$Vj=[9,26],$Vk=[9,21,23,26],$Vl=[1,44],$Vm=[1,46],$Vn=[2,69],$Vo=[2,76],$Vp=[1,60],$Vq=[1,61],$Vr=[9,21,23,26,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,82],$Vs=[2,77],$Vt=[5,21,23,24,25,28,29,32,33,36,37,38,44,76,77,78,85,86],$Vu=[1,90],$Vv=[1,91],$Vw=[1,92],$Vx=[1,93],$Vy=[1,94],$Vz=[1,95],$VA=[1,96],$VB=[1,97],$VC=[1,98],$VD=[1,99],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[2,94],$VL=[1,109],$VM=[26,82],$VN=[1,123],$VO=[1,124],$VP=[9,21,23,25,26,40,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,82],$VQ=[21,23,24,25,28,29,32,33,36,37,38,44,76,77,78,85,86],$VR=[5,21,23,24,25,28,29,32,33,36,37,38,44,76,77,78,83,84,85,86],$VS=[9,21,23,26,53,54,55,56,73,82],$VT=[9,21,23,26,53,54,55,56,57,59,60,62,63,73,82],$VU=[9,21,23,26,53,54,55,56,57,58,59,60,61,62,63,73,82],$VV=[9,21,23,26,53,54,55,56,57,58,59,60,61,62,63,64,65,66,73,82],$VW=[1,178],$VX=[1,179];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,";":9,"initialize_var_":10,"initialize_var":11,"statements_":12,"statements_with_vars":13,"initialize_vars":14,"statements_without_vars":15,"class_statements":16,"class_statements_":17,"statements":18,"class_statement":19,"statement_with_semicolon":20,"if":21,"e":22,"unless":23,"while":24,"(":25,")":26,"bracket_statements":27,"do":28,"foreach":29,"var_name":30,"{":31,"}":32,"for":33,"statement_with_semicolon_":34,"elif":35,"sub":36,"IDENTIFIER":37,"my":38,"parameters":39,"=":40,"@_":41,"static":42,"parentheses_expr":43,"return":44,"var_names":45,"access_array":46,"++":47,"--":48,"+=":49,"-=":50,"*=":51,"/=":52,"?":53,":":54,"||":55,"&&":56,"<=":57,"<<":58,"<":59,">=":60,">>":61,">":62,"==":63,"+":64,".":65,"-":66,"*":67,"/":68,"%":69,"not_expr":70,"!":71,"[":72,"]":73,"exprs":74,"key_values":75,"NUMBER":76,"STRING_LITERAL":77,"<>":78,"type":79,"types":80,"parameter":81,",":82,"elsif":83,"else":84,"$":85,"@":86,"key_value":87,"=>":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",21:"if",23:"unless",24:"while",25:"(",26:")",28:"do",29:"foreach",31:"{",32:"}",33:"for",36:"sub",37:"IDENTIFIER",38:"my",40:"=",41:"@_",42:"static",44:"return",47:"++",48:"--",49:"+=",50:"-=",51:"*=",52:"/=",53:"?",54:":",55:"||",56:"&&",57:"<=",58:"<<",59:"<",60:">=",61:">>",62:">",63:"==",64:"+",65:".",66:"-",67:"*",68:"/",69:"%",71:"!",72:"[",73:"]",76:"NUMBER",77:"STRING_LITERAL",78:"<>",82:",",83:"elsif",84:"else",85:"$",86:"@",88:"=>"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[8,1],[11,1],[12,1],[12,2],[12,3],[14,3],[14,1],[15,2],[15,1],[13,3],[13,1],[16,1],[18,1],[17,2],[17,1],[7,4],[7,4],[7,2],[7,5],[7,7],[7,8],[7,11],[7,6],[7,5],[7,7],[7,12],[34,1],[34,1],[19,8],[19,7],[20,1],[20,2],[20,2],[20,3],[20,3],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[10,4],[22,5],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[70,2],[70,1],[46,4],[43,1],[43,3],[43,4],[43,2],[43,3],[43,3],[43,1],[43,1],[43,1],[43,1],[79,3],[79,4],[79,1],[81,1],[39,3],[39,1],[74,3],[74,1],[80,3],[80,1],[35,6],[35,2],[30,2],[30,2],[45,3],[45,1],[75,3],[75,1],[87,3],[87,3],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 13:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 12: case 14: case 20: case 84:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0-1]]
break;
case 6:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 7:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 9:
this.$ = [["semicolon",["initialize_var"].concat($$[$0-1])]]
break;
case 10:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-2])],["statements",$$[$0]]]]
break;
case 11: case 95:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 15:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 17:
this.$ = ["class_statements",$$[$0]]
break;
case 18:
this.$ = ["statements",$$[$0]]
break;
case 19:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 21:
this.$ = ["if",$$[$0-1],["statements",["semicolon",$$[$0-3]]]];
break;
case 22:
this.$ = ["unless",$$[$0-1],["statements",[["semicolon",$$[$0-3]]]]];
break;
case 23: case 100:
this.$ = ["semicolon",$$[$0-1]];
break;
case 24:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 26:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 27:
this.$ = ["for",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 29:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["unless",$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["function","public","Object",$$[$0-10],$$[$0-6],$$[$0-1]];
break;
case 34:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 35:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["return",$$[$0]];
break;
case 38:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 39: case 40:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 41: case 42:
this.$ = [$$[$0],$$[$0-1]];
break;
case 43: case 44: case 45: case 46: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 64:
this.$ = ["-",$$[$0]];
break;
case 66:
this.$ = ["!", [".",$$[$0]]];
break;
case 68:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 70:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 71:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 72:
this.$ = ["initializer_list_or_parentheses",[]];
break;
case 73:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 74:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 75: case 76: case 77:
this.$ = yytext;
break;
case 79:
this.$ = [$$[$0-2],"[]"];
break;
case 80:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 82:
this.$ = ["Object", $$[$0]];
break;
case 83: case 85: case 87: case 93:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 86: case 88: case 94: case 96:
this.$ = [$$[$0]];
break;
case 89:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 90:
this.$ = ["else",$$[$0]];
break;
case 91: case 92:
this.$ = $$[$0];
break;
case 97:
this.$ = [$$[$0-2],$$[$0]]
break;
case 98:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 99:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:14,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{1:[3]},{5:[1,27],6:28,7:4,8:5,10:14,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{9:[1,29]},{9:[1,32],21:[1,30],23:[1,31]},{25:[1,33]},{20:36,25:$V3,27:34,30:19,31:$Vh,37:$V8,38:$Vi,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{30:38,85:$Ve,86:$Vf},{25:[1,39]},{25:[1,40]},{25:[1,41]},{37:[1,42]},o($Vj,[2,6]),o($Vk,[2,36]),{22:43,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{30:51,45:50,85:$Ve,86:$Vf},o($Vk,$Vn,{40:[1,52]}),o($Vk,$Vo,{40:[1,53],47:[1,54],48:[1,55],49:[1,56],50:[1,57],51:[1,58],52:[1,59],72:$Vp}),{25:$Vq},{22:66,25:$V3,26:[1,62],30:49,37:[1,68],43:47,46:48,66:$Vl,70:45,71:$Vm,74:64,75:63,76:$Vb,77:[1,67],78:$Vd,85:$Ve,86:$Vf,87:65},o($Vr,[2,75]),o($Vr,$Vs),o($Vr,[2,78]),{37:[1,69]},{37:[1,70]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),{22:71,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:72,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vt,[2,23]),{22:73,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{24:[1,74]},{7:80,10:78,12:76,13:77,15:79,18:75,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{9:[1,81]},{30:82,45:50,85:$Ve,86:$Vf},{25:[1,83]},{8:85,10:14,20:86,25:$V3,30:19,34:84,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:87,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:88,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{31:[1,89]},o($Vk,[2,37],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),{22:106,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vr,[2,65]),{25:$V3,30:49,37:$V8,43:107,46:48,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vr,[2,67]),o($Vr,$Vn),o($Vr,$Vo,{72:$Vp}),o($Vk,[2,38]),o($Vk,$VK,{40:[1,108],82:$VL}),{22:110,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:111,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vk,[2,41]),o($Vk,[2,42]),{22:112,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:113,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:114,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:115,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:116,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:66,25:$V3,26:[1,117],30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,74:118,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vr,[2,72]),{26:[1,119],82:[1,120]},{26:[1,121]},o($VM,[2,96]),{26:[2,86],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,82:[1,122]},o([26,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,82],$Vs,{88:$VN}),{25:$Vq,54:$VO},o($VP,[2,91]),o($VP,[2,92]),{9:[1,125],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{9:[1,126],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{26:[1,127],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{25:[1,128]},{32:[1,129]},{32:[2,18]},{32:[2,8]},{9:[1,130]},{7:132,8:131,10:14,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,32:[2,16],33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($VQ,[2,14]),o($VR,[2,100]),o($Vk,$VK,{82:$VL}),{30:133,85:$Ve,86:$Vf},{9:[1,134]},o($Vj,[2,32]),o($Vj,[2,33]),{26:[1,135],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{26:[1,136],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{38:[1,137]},{22:138,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:139,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:140,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:141,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:142,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:143,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:144,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:145,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:146,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:147,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:148,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:149,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:150,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:151,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:152,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:153,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vr,[2,64]),o($Vr,[2,66]),{22:154,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{30:82,45:155,85:$Ve,86:$Vf},o($Vk,[2,39],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,40],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,43],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,44],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,45],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,46],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,73:[1,156]},o($Vr,[2,70]),{26:[1,157]},o($Vr,[2,73]),{37:[1,160],77:[1,159],87:158},o($Vr,[2,74]),{22:66,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,74:161,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:162,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:163,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vt,[2,21]),o($Vt,[2,22]),{20:36,25:$V3,27:164,30:19,31:$Vh,37:$V8,38:$Vi,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{22:165,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($VR,[2,99]),{7:80,10:78,12:166,13:77,15:79,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,32:[2,9],33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{9:[1,167]},o($VQ,[2,13]),{26:[1,168]},{22:169,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{20:36,25:$V3,27:170,30:19,31:$Vh,37:$V8,38:$Vi,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{31:[1,171]},{25:[1,172]},{53:$Vu,54:[1,173],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($VS,[2,49],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VS,[2,50],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VT,[2,51],{58:$Vy,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VU,[2,52],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VT,[2,53],{58:$Vy,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VT,[2,54],{58:$Vy,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VU,[2,55],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VT,[2,56],{58:$Vy,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VT,[2,57],{58:$Vy,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VV,[2,58],{67:$VH,68:$VI,69:$VJ}),o($VV,[2,59],{67:$VH,68:$VI,69:$VJ}),o($VV,[2,60],{67:$VH,68:$VI,69:$VJ}),o($Vr,[2,61]),o($Vr,[2,62]),o($Vr,[2,63]),o($Vj,[2,47],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vk,[2,93]),o([9,21,23,26,40,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,82],[2,68]),o($Vr,[2,71]),o($VM,[2,95]),{88:$VN},{54:$VO},{26:[2,85]},o($VM,[2,97],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VM,[2,98],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vt,[2,24]),{26:[1,174],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{32:[2,10]},{32:[2,15]},{31:[1,175]},{9:[1,176],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},o($Vt,[2,29],{35:177,83:$VW,84:$VX}),{7:80,10:78,12:76,13:77,15:79,18:180,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{30:183,39:181,81:182,85:$Ve,86:$Vf},{22:184,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{9:[1,185]},{7:80,10:78,12:76,13:77,15:79,18:186,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{8:85,10:14,20:86,25:$V3,30:19,34:187,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vt,[2,28]),{25:[1,188]},{20:36,25:$V3,27:189,30:19,31:$Vh,37:$V8,38:$Vi,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{32:[1,190]},{26:[1,191]},{26:[2,84],82:[1,192]},o($VM,[2,82]),o([9,21,23,26,54,73,82],[2,48],{53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($Vt,[2,25]),{32:[1,193]},{26:[1,194]},{22:195,25:$V3,30:49,37:$V8,43:47,46:48,66:$Vl,70:45,71:$Vm,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vt,[2,90]),o($Vt,[2,30]),{40:[1,196]},{30:183,39:197,81:182,85:$Ve,86:$Vf},o($Vt,[2,26]),{31:[1,198]},{26:[1,199],53:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ},{41:[1,200]},{26:[2,83]},{7:80,10:78,12:76,13:77,15:79,18:201,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{20:36,25:$V3,27:202,30:19,31:$Vh,37:$V8,38:$Vi,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},{9:[1,203]},{32:[1,204]},{35:205,83:$VW,84:$VX},{7:80,10:78,12:76,13:77,15:79,18:206,20:6,21:$V0,23:$V1,24:$V2,25:$V3,28:$V4,29:$V5,30:19,33:$V6,36:$V7,37:$V8,38:$V9,43:15,44:$Va,46:18,76:$Vb,77:$Vc,78:$Vd,85:$Ve,86:$Vf},o($Vt,[2,27]),o($Vt,[2,89]),{32:[1,207]},o($Vt,[2,31])],
defaultActions: {27:[2,1],76:[2,18],77:[2,8],161:[2,85],166:[2,10],167:[2,15],197:[2,83]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:return 76
break;
case 3:return 77
break;
case 4:return "$"
break;
case 5:return "@_"
break;
case 6:return "@"
break;
case 7:return 29
break;
case 8:return "unless"
break;
case 9:return "sub"
break;
case 10:return "class"
break;
case 11:return "public"
break;
case 12:return "extends"
break;
case 13:return "implements"
break;
case 14:return "private"
break;
case 15:return "static"
break;
case 16:return 21
break;
case 17:return 84
break;
case 18:return 83
break;
case 19:return 44
break;
case 20:return "sin"
break;
case 21:return "tan"
break;
case 22:return "cos"
break;
case 23:return 24
break;
case 24:return 33
break;
case 25:return 38
break;
case 26:return 82
break;
case 27:return 9
break;
case 28:return 65
break;
case 29:return 54
break;
case 30:return 56
break;
case 31:return 55
break;
case 32:return 60
break;
case 33:return 61
break;
case 34:return 62
break;
case 35:return 78
break;
case 36:return 57
break;
case 37:return 58
break;
case 38:return 59
break;
case 39:return 88
break;
case 40:return 63
break;
case 41:return 40
break;
case 42:return 69
break;
case 43:return 51
break;
case 44:return 67
break;
case 45:return 52
break;
case 46:return 68
break;
case 47:return 50
break;
case 48:return 48
break;
case 49:return 66
break;
case 50:return 47
break;
case 51:return 49
break;
case 52:return 64
break;
case 53:return '^'
break;
case 54:return 53
break;
case 55:return 31
break;
case 56:return 32
break;
case 57:return 72
break;
case 58:return 73
break;
case 59:return 25
break;
case 60:return 26
break;
case 61:return 'PI'
break;
case 62:return 'E'
break;
case 63:return 37
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:#.*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@_\b)/,/^(?:@)/,/^(?:foreach\b)/,/^(?:unless\b)/,/^(?:sub\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elsif\b)/,/^(?:return\b)/,/^(?:sin\b)/,/^(?:tan\b)/,/^(?:cos\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:my\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = perl_parser;
exports.Parser = perl_parser.Parser;
exports.parse = function () { return perl_parser.parse.apply(perl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}