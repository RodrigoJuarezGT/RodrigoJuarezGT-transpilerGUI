/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var modelica_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,4],$V2=[1,6],$V3=[1,7],$V4=[1,12],$V5=[7,18,33,76],$V6=[1,25],$V7=[1,18],$V8=[1,20],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[2,64],$Vd=[1,34],$Ve=[1,39],$Vf=[4,7,15,18,20,23,33,70,76],$Vg=[1,50],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[13,22,24,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,67,74],$Vy=[13,22,24,34,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,67,74],$Vz=[35,67],$VA=[13,22,24,35,40,41,42,43,63,67,74],$VB=[13,22,24,35,40,41,42,43,44,45,63,67,74],$VC=[13,22,24,35,37,40,41,42,43,44,45,46,48,50,51,63,67,74],$VD=[13,22,24,35,37,40,41,42,43,44,45,46,47,48,49,50,51,63,67,74],$VE=[13,22,24,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,63,67,74],$VF=[1,120],$VG=[1,119];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"IDENTIFIER":3,"identifier":4,"expressions":5,"statements_":6,"EOF":7,"statement":8,"struct_statements":9,"struct_statement":10,"type":11,"identifiers":12,";":13,"statements":14,"FUNCTION":15,"parameters":16,"algorithm":17,"end":18,"statement_with_semicolon":19,"while":20,"e":21,"do":22,"if":23,"then":24,"elif":25,"repeat_":26,"REPEAT":27,"repeat":28,"case_statement":29,"when":30,"case_statements_":31,"case_statements":32,"else":33,"(":34,")":35,"exprs":36,"=":37,"access_array":38,":=":39,"?":40,":":41,"||":42,"OR":43,"&&":44,"AND":45,"<=":46,"<":47,">=":48,">":49,"!=":50,"<>":51,"+":52,"-":53,"%":54,"*":55,"/":56,"not_expr":57,"!":58,"dot_expr":59,"parentheses_expr":60,".":61,"[":62,"]":63,"function_call":64,"parentheses_expr_":65,"{":66,"}":67,"NUMBER":68,"STRING_LITERAL":69,"void":70,"parameter":71,"input":72,"expr":73,",":74,"types":75,"elseif":76,"bracket_statements":77,"$accept":0,"$end":1},
terminals_: {2:"error",4:"identifier",7:"EOF",13:";",15:"FUNCTION",17:"algorithm",18:"end",20:"while",22:"do",23:"if",24:"then",27:"REPEAT",28:"repeat",30:"when",33:"else",34:"(",35:")",37:"=",39:":=",40:"?",41:":",42:"||",43:"OR",44:"&&",45:"AND",46:"<=",47:"<",48:">=",49:">",50:"!=",51:"<>",52:"+",53:"-",54:"%",55:"*",56:"/",58:"!",61:".",62:"[",63:"]",66:"{",67:"}",68:"NUMBER",69:"STRING_LITERAL",70:"void",72:"input",74:",",76:"elseif"},
productions_: [0,[3,1],[5,2],[6,2],[6,1],[9,2],[9,1],[10,3],[14,1],[8,8],[8,2],[8,7],[8,8],[8,7],[26,1],[26,1],[29,4],[31,2],[31,1],[32,3],[32,1],[19,3],[19,4],[19,4],[19,3],[19,3],[21,5],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,4],[21,4],[21,3],[21,3],[21,2],[21,1],[57,2],[57,1],[59,3],[59,1],[38,4],[60,1],[60,1],[60,3],[60,1],[65,2],[65,3],[65,1],[65,1],[65,1],[64,3],[64,4],[11,1],[11,1],[71,3],[16,3],[16,1],[16,0],[36,3],[36,1],[73,1],[75,3],[75,1],[25,5],[25,2],[12,3],[12,1],[77,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = yytext.toLowerCase()
break;
case 2:
return ["top_level_statements",$$[$0-1]]
break;
case 3: case 5: case 17:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 4: case 6: case 18: case 50: case 67:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 9:
this.$ = ["function","public",$$[$0],$$[$0-5],$$[$0-3],$$[$02]];
break;
case 10: case 78:
this.$ = ["semicolon",$$[$0-1]];
break;
case 11:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 12:
this.$ = ["if",$$[$0-6],$$[$0-4],$$[$0-3]];
break;
case 13:
this.$ = ["if",$$[$0-5],$$[$0-3]];
break;
case 16:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 19:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 21: case 61:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 22: case 62:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 23:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 24: case 25:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 27: case 29: case 31: case 32: case 33: case 34: case 38: case 39: case 40: case 43: case 44:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 28:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["==",$$[$0-2],$$[$0]];
break;
case 36: case 37:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 41:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 42:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 45:
this.$ = ["-",$$[$0]];
break;
case 47:
this.$ = ["!", [".",$$[$0]]];
break;
case 48:
this.$ = [".", $$[$0]];
break;
case 49: case 69: case 72: case 76:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 51:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 54:
this.$ = ["parentheses",$$[$0-1]];
break;
case 56:
this.$ = ["initializer_list","Object",[]];
break;
case 57:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 58: case 59: case 60:
this.$ = yytext;
break;
case 65:
this.$ = [$$[$0-1],$$[$0]];
break;
case 66:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 68:
this.$ = [];
break;
case 70: case 71: case 73: case 77:
this.$ = [$$[$0]];
break;
case 74:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 75:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:8,4:$V0,5:1,6:2,8:3,11:9,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},{1:[3]},{7:[1,13]},o($V5,[2,4],{8:3,19:5,3:8,11:9,38:10,6:14,4:$V0,15:$V1,20:$V2,23:$V3,70:$V4}),{3:15,4:$V0},{13:[1,16]},{3:27,4:$V0,21:17,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:31,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{4:$Vc,34:[1,32],39:[1,33],62:$Vd},{3:35,4:$V0},{39:[1,36]},o([4,7,13,15,18,20,22,23,24,33,34,35,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,67,70,72,74,76],[2,1]),{4:[2,63]},{1:[2,2]},o($V5,[2,3]),{13:[2,68],16:37,71:38,72:$Ve},o($Vf,[2,10]),{22:[1,40],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{3:27,4:$V0,21:58,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($Vx,[2,46]),{3:27,4:$V0,34:$V6,38:23,59:59,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($Vx,[2,48]),o($Vx,[2,50],{34:[1,61],61:[1,60]}),o($Vy,[2,52]),o($Vy,[2,53]),{3:27,4:$V0,21:62,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($Vy,[2,55]),o($Vy,[2,59],{62:$Vd}),{3:27,4:$V0,21:66,34:$V6,36:64,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,67:[1,63],68:$Va,69:$Vb,73:65},o($Vy,[2,58]),o($Vy,[2,60]),{24:[1,67],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{3:27,4:$V0,21:66,34:$V6,35:[1,68],36:69,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb,73:65},{3:27,4:$V0,21:70,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:71,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{37:[1,72]},{3:27,4:$V0,21:73,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{13:[1,74]},{13:[2,67]},{3:76,4:$V0,11:75,70:$V4},{3:8,4:$V0,6:78,8:3,11:9,14:77,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},{3:27,4:$V0,21:79,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:80,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:81,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:82,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:83,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:84,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:85,34:$V6,38:23,47:[1,86],53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:87,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:88,34:$V6,38:23,49:[1,89],53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:90,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:91,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:92,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:93,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:94,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:95,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:96,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:97,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($Vx,[2,45]),o($Vx,[2,47]),{3:27,4:$V0,34:$V6,38:23,59:98,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:27,4:$V0,21:66,34:$V6,35:[1,99],36:100,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb,73:65},{35:[1,101],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},o($Vy,[2,56]),{67:[1,102]},o($Vz,[2,70],{74:[1,103]}),o([35,67,74],[2,71],{37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),{3:8,4:$V0,6:78,8:3,11:9,14:104,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},{13:[2,21]},{35:[1,105]},{13:[2,25],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,63:[1,106]},{3:27,4:$V0,21:107,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{13:[2,24],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{17:[1,108],71:109,72:$Ve},{3:110,4:$V0},{4:$Vc},{18:[1,111]},o([18,33,76],[2,8]),{37:$Vg,40:$Vh,41:[1,112],42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},o($VA,[2,27],{37:$Vg,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VA,[2,28],{37:$Vg,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VB,[2,29],{37:$Vg,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VB,[2,30],{37:$Vg,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VC,[2,31],{47:$Vn,49:$Vp,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VD,[2,32],{52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),{3:27,4:$V0,21:113,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($VC,[2,33],{47:$Vn,49:$Vp,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VD,[2,34],{52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),{3:27,4:$V0,21:114,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($VC,[2,35],{47:$Vn,49:$Vp,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VC,[2,36],{47:$Vn,49:$Vp,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VC,[2,37],{47:$Vn,49:$Vp,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VE,[2,38],{54:$Vu,55:$Vv,56:$Vw}),o($VE,[2,39],{54:$Vu,55:$Vv,56:$Vw}),o($Vx,[2,40]),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,49]),o($Vy,[2,61]),{35:[1,115]},o($Vy,[2,54]),o($Vy,[2,57]),{3:27,4:$V0,21:66,34:$V6,36:116,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb,73:65},{18:[1,118],25:117,33:$VF,76:$VG},{13:[2,22]},o([13,22,24,34,35,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,67,74],[2,51]),{13:[2,23],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{3:8,4:$V0,6:78,8:3,11:9,14:121,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},{13:[2,66]},{13:[2,65]},{20:[1,122]},{3:27,4:$V0,21:123,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},o($VD,[2,42],{52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($VD,[2,41],{52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),o($Vy,[2,62]),o($Vz,[2,69]),{18:[1,124]},{23:[1,125]},{3:27,4:$V0,21:126,34:$V6,38:23,53:$V7,57:19,58:$V8,59:21,60:22,64:24,65:26,66:$V9,68:$Va,69:$Vb},{3:8,4:$V0,6:78,8:3,11:9,14:127,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},{18:[1,128]},{13:[1,129]},o([13,22,24,35,41,63,67,74],[2,26],{37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw}),{23:[1,130]},{13:[1,131]},{24:[1,132],37:$Vg,40:$Vh,42:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{18:[2,75]},{3:133,4:$V0},o($Vf,[2,11]),{13:[1,134]},o($Vf,[2,13]),{3:8,4:$V0,6:78,8:3,11:9,14:135,15:$V1,19:5,20:$V2,23:$V3,38:10,70:$V4},o($Vf,[2,9]),o($Vf,[2,12]),{25:136,33:$VF,76:$VG},{18:[2,74]}],
defaultActions: {12:[2,63],13:[2,2],38:[2,67],68:[2,21],76:[2,64],105:[2,22],109:[2,66],110:[2,65],127:[2,75],136:[2,74]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 68
break;
case 2:return 69
break;
case 3:return 'function'
break;
case 4:return 28
break;
case 5:return 24
break;
case 6:return 30
break;
case 7:return 'set'
break;
case 8:return "if"
break;
case 9:return 22
break;
case 10:return 'DO'
break;
case 11:return "else"
break;
case 12:return "elseif"
break;
case 13:return "RETURN"
break;
case 14:return "void"
break;
case 15:return "case"
break;
case 16:return "printf"
break;
case 17:return "while"
break;
case 18:return "break"
break;
case 19:return "default"
break;
case 20:return "const"
break;
case 21:return "struct"
break;
case 22:return "switch"
break;
case 23:return 'inout'
break;
case 24:return 'out'
break;
case 25:return "for"
break;
case 26:return 74
break;
case 27:return 13
break;
case 28:return 61
break;
case 29:return 41
break;
case 30:return 44
break;
case 31:return '&'
break;
case 32:return 42
break;
case 33:return 51
break;
case 34:return 50
break;
case 35:return 58
break;
case 36:return 48
break;
case 37:return 49
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 37
break;
case 41:return '*='
break;
case 42:return 55
break;
case 43:return 54
break;
case 44:return '/='
break;
case 45:return 56
break;
case 46:return '-='
break;
case 47:return '--'
break;
case 48:return 53
break;
case 49:return '++'
break;
case 50:return '+='
break;
case 51:return 52
break;
case 52:return '^'
break;
case 53:return 40
break;
case 54:return 66
break;
case 55:return 67
break;
case 56:return 62
break;
case 57:return 63
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 4
break;
case 61:return 7
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:function\b)/,/^(?:repeat\b)/,/^(?:then\b)/,/^(?:when\b)/,/^(?:set\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:DO\b)/,/^(?:else\b)/,/^(?:elseif\b)/,/^(?:RETURN\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:<>)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = modelica_parser;
exports.Parser = modelica_parser.Parser;
exports.parse = function () { return modelica_parser.parse.apply(modelica_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}