/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vhdl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,10],$V2=[1,11],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,12],$V8=[1,15],$V9=[5,19,34,73],$Va=[1,32],$Vb=[1,30],$Vc=[1,23],$Vd=[1,25],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[2,69],$Vi=[12,15,39,41,78],$Vj=[5,11,12,16,19,22,27,28,31,34,40,73,76],$Vk=[1,65],$Vl=[1,66],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[15,17,20,25,26,35,37,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,73,78],$VA=[13,15,17,20,25,26,35,37,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,73,78],$VB=[1,78],$VC=[1,82],$VD=[1,89],$VE=[15,20],$VF=[1,95],$VG=[2,83],$VH=[1,98],$VI=[1,102],$VJ=[2,73],$VK=[15,73],$VL=[15,73,78],$VM=[1,131],$VN=[15,17,20,25,26,35,37,41,49,50,51,52,53,54,55,56,69,73,78],$VO=[15,17,20,25,26,35,37,41,49,50,51,52,53,54,55,56,57,58,69,73,78],$VP=[15,17,20,25,26,35,37,41,49,50,51,52,53,54,55,56,57,58,59,60,61,69,73,78],$VQ=[1,153],$VR=[1,167],$VS=[1,168],$VT=[5,11,12,16,19,22,27,28,31,34,40,73,76,82,83];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"access_modifier":8,"public":9,"private":10,"function":11,"IDENTIFIER":12,"(":13,"parameters":14,")":15,"return":16,"is":17,"begin":18,"end":19,";":20,"statement_with_semicolon":21,"for":22,"in":23,"e":24,"to":25,"loop":26,"while":27,"case":28,"case_statements":29,"bracket_statements":30,"if":31,"elif":32,"case_statement":33,"when":34,"=>":35,"exprs":36,":":37,"type":38,":=":39,"constant":40,"=":41,"access_array":42,"identifiers":43,"++":44,"--":45,"+=":46,"-=":47,"*=":48,"/=":49,"?":50,"or":51,"and":52,"<=":53,"<":54,">=":55,">":56,"+":57,"-":58,"mod":59,"*":60,"/":61,"**":62,"not_expr":63,"not":64,"dot_expr":65,"parentheses_expr":66,".":67,"[":68,"]":69,"function_call":70,"parentheses_expr_":71,"{":72,"}":73,"NUMBER":74,"STRING_LITERAL":75,"void":76,"parameter":77,",":78,"expr":79,"&":80,"types":81,"elsif":82,"else":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public",10:"private",11:"function",12:"IDENTIFIER",13:"(",15:")",16:"return",17:"is",18:"begin",19:"end",20:";",22:"for",23:"in",25:"to",26:"loop",27:"while",28:"case",31:"if",34:"when",35:"=>",37:":",39:":=",40:"constant",41:"=",44:"++",45:"--",46:"+=",47:"-=",48:"*=",49:"/=",50:"?",51:"or",52:"and",53:"<=",54:"<",55:">=",56:">",57:"+",58:"-",59:"mod",60:"*",61:"/",62:"**",64:"not",67:".",68:"[",69:"]",72:"{",73:"}",74:"NUMBER",75:"STRING_LITERAL",76:"void",78:",",80:"&",82:"elsif",83:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,1],[8,1],[6,14],[6,13],[6,2],[6,11],[6,7],[6,7],[6,9],[6,6],[6,5],[33,4],[29,2],[29,1],[21,3],[21,4],[21,2],[21,5],[21,6],[21,2],[21,2],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[24,5],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[63,2],[63,1],[65,3],[65,1],[42,4],[66,1],[66,1],[66,3],[66,1],[71,2],[71,3],[71,1],[71,1],[71,1],[70,3],[70,4],[38,3],[38,1],[38,1],[77,3],[14,3],[14,1],[14,0],[36,3],[36,1],[79,2],[79,1],[81,3],[81,1],[32,8],[32,4],[43,3],[43,1],[30,3],[30,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 17:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 18: case 54: case 72:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 7:
this.$ = ["function","public",$$[$0-7],$$[$0-12],$$[$0-10],$$[$0-4]];
break;
case 8:
this.$ = ["function","public",$$[$0-6],$$[$0-11],$$[$0-9],$$[$0-3]];
break;
case 9: case 85:
this.$ = ["semicolon",$$[$0-1]];
break;
case 10:
this.$ = ["foreach_in_range",$$[$0-9],$$[$0-7],$$[$0-5],$$[$0-3]];
break;
case 11:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 12:
this.$ = ["switch",$$[$0-5],$$[$0-3]];
break;
case 13:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 15:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 19: case 65:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 20: case 66:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["return",$$[$0]];
break;
case 22:
this.$ = ["initialize_var",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 23:
this.$ = ["initialize_constant",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 24:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 25:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 26: case 27:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 28: case 29:
this.$ = [$$[$0],$$[$0-1]];
break;
case 30: case 31: case 32: case 33: case 37: case 38: case 39: case 40: case 41: case 43: case 44: case 46: case 47: case 48:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 35:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ["-",$$[$0]];
break;
case 51:
this.$ = ["!", [".",$$[$0]]];
break;
case 52:
this.$ = [".", $$[$0]];
break;
case 53: case 71: case 74: case 78: case 82:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 55:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 58:
this.$ = ["parentheses",$$[$0-1]];
break;
case 60:
this.$ = ["initializer_list","Object",[]];
break;
case 61:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 62: case 63: case 64:
this.$ = yytext;
break;
case 67:
this.$ = [$$[$0-2],"[]"];
break;
case 70:
this.$ = [$$[$0],$$[$0-2]];
break;
case 73:
this.$ = [];
break;
case 75: case 77: case 79: case 83:
this.$ = [$$[$0]];
break;
case 76:
this.$ = ["function_call_ref",$$[$0]];
break;
case 80:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 81:
this.$ = ["else",$$[$0-1]];
break;
case 84:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{1:[3]},{5:[1,16]},o($V9,[2,3],{6:3,21:5,38:13,42:14,4:17,11:$V0,12:$V1,16:$V2,22:$V3,27:$V4,28:$V5,31:$V6,40:$V7,76:$V8}),{12:[1,18]},{20:[1,19]},{12:[1,20],13:[1,21]},{12:$Va,13:$Vb,24:22,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:36,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{13:[1,37]},{12:$Vh,13:[1,38],37:[1,39],39:[1,40],44:[1,41],45:[1,42],46:[1,43],47:[1,44],48:[1,45],49:[1,46],68:[1,47]},{12:$Va,13:$Vb,24:48,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:[1,49]},{12:[1,52],42:50,43:51},{39:[1,53]},o($Vi,[2,68]),{1:[2,1]},o($V9,[2,2]),{13:[1,54]},o($Vj,[2,9]),{23:[1,55]},{12:$V1,16:$V2,21:56,38:13,40:$V7,42:14,76:$V8},{26:[1,57],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{12:$Va,13:$Vb,24:73,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($Vz,[2,50]),{12:$Va,13:$Vb,42:28,65:74,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($Vz,[2,52]),o($Vz,[2,54],{13:[1,76],67:[1,75]}),o($VA,[2,56]),o($VA,[2,57]),{12:$Va,13:$Vb,24:77,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VA,[2,59]),o($VA,[2,63],{68:$VB}),{12:$Va,13:$Vb,24:83,36:80,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,73:[1,79],74:$Vf,75:$Vg,79:81,80:$VC},o($VA,[2,62]),o($VA,[2,64]),{17:[1,84],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{12:$Va,13:$Vb,24:85,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,15:[1,86],24:83,36:87,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg,79:81,80:$VC},{12:$VD,38:88,76:$V8},{12:$Va,13:$Vb,24:90,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VE,[2,28]),o($VE,[2,29]),{12:$Va,13:$Vb,24:91,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:92,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:93,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:94,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:96,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,69:$VF,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VE,[2,21],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{37:[1,97]},o($VE,[2,24]),o($VE,[2,25]),o($VE,$VG,{68:$VB,78:$VH}),{12:$Va,13:$Vb,24:99,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$VI,14:100,15:$VJ,77:101},{12:$Va,13:$Vb,24:103,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{20:[1,104]},{4:106,6:3,7:105,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{12:$Va,13:$Vb,24:107,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:108,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:109,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:110,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:111,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:112,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:113,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:114,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:115,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:116,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:117,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:118,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:119,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:120,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,24:121,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($Vz,[2,49]),o($Vz,[2,51]),{12:$Va,13:$Vb,42:28,65:122,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$Va,13:$Vb,15:[1,123],24:83,36:124,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg,79:81,80:$VC},{15:[1,125],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{12:$Va,13:$Vb,24:96,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VA,[2,60]),{73:[1,126]},o($VK,[2,75],{78:[1,127]}),{12:$Va,13:$Vb,24:128,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VL,[2,77],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{29:129,33:130,34:$VM},{15:[1,132],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},o($VE,[2,19]),{15:[1,133]},{39:[1,134]},o([15,39,41,78],$Vh,{68:[1,135]}),o($VE,[2,27],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VE,[2,30],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VE,[2,31],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VE,[2,32],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VE,[2,33],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($Vi,[2,67]),{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,69:[1,136]},{12:$VD,38:137,76:$V8},{12:[1,139],43:138},o($VE,[2,26],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{15:[1,140]},{15:[2,72],78:[1,141]},{37:[1,142]},{25:[1,143],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{12:$Va,13:$Vb,24:144,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{19:[1,145]},o([19,34,73],[2,4]),{37:[1,146],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},o([15,17,20,25,26,35,37,50,51,69,73,78],[2,35],{41:$Vk,49:$Vl,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o([15,17,20,25,26,35,37,50,51,52,69,73,78],[2,36],{41:$Vk,49:$Vl,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,37],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,38],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,39],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,40],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,41],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VN,[2,42],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VO,[2,43],{59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VO,[2,44],{59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($VP,[2,45],{62:$Vy}),o($VP,[2,46],{62:$Vy}),o($VP,[2,47],{62:$Vy}),o($Vz,[2,48]),o($Vz,[2,53]),o($VA,[2,65]),{15:[1,147]},o($VA,[2,58]),o($VA,[2,61]),{12:$Va,13:$Vb,24:83,36:148,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg,79:81,80:$VC},o($VL,[2,76],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{19:[1,149]},{19:[2,18],29:150,33:130,34:$VM},{12:$Va,13:$Vb,24:151,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:$V1,16:$V2,21:154,30:152,38:13,40:$V7,42:14,72:$VQ,76:$V8},o($VE,[2,20]),{12:$Va,13:$Vb,24:155,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{69:$VF},o([13,15,17,20,25,26,35,37,39,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,73,78],[2,55]),{41:[1,156]},o($VE,[2,82]),o($VE,$VG,{78:$VH}),{16:[1,157]},{12:$VI,14:158,15:$VJ,77:101},{12:$VD,38:159,76:$V8},{12:$Va,13:$Vb,24:160,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{20:[1,161],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{26:[1,162]},{12:$Va,13:$Vb,24:163,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},o($VA,[2,66]),o($VK,[2,74]),{28:[1,164]},{19:[2,17]},{35:[1,165],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},o($Vj,[2,15],{32:166,82:$VR,83:$VS}),{4:106,6:3,7:169,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{20:[1,170]},o($VE,[2,22],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{12:$Va,13:$Vb,24:171,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{12:[1,172]},{15:[2,71]},o([15,78],[2,70]),{26:[1,173],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{12:$V1,16:$V2,21:174,38:13,40:$V7,42:14,76:$V8},{20:[1,175]},o([15,17,20,25,26,35,37,69,73,78],[2,34],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{20:[1,176]},{4:106,6:3,7:177,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},o($Vj,[2,14]),{13:[1,178]},{72:[1,179]},{73:[1,180]},o($VT,[2,85]),o($VE,[2,23],{41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),{17:[1,181]},{4:106,6:3,7:182,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{15:[1,183]},o($Vj,[2,11]),o($Vj,[2,12]),o([19,34],[2,16]),{12:$Va,13:$Vb,24:184,42:28,58:$Vc,63:24,64:$Vd,65:26,66:27,70:29,71:31,72:$Ve,74:$Vf,75:$Vg},{4:106,6:3,7:185,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},o($VT,[2,84]),{18:[1,186]},{19:[1,187]},{12:$V1,16:$V2,21:154,30:188,38:13,40:$V7,42:14,72:$VQ,76:$V8},{15:[1,189],41:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy},{73:[1,190]},{4:106,6:3,7:191,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{26:[1,192]},o($Vj,[2,13]),{72:[1,193]},o($Vj,[2,81]),{19:[1,194]},{20:[1,195]},{4:106,6:3,7:196,11:$V0,12:$V1,16:$V2,21:5,22:$V3,27:$V4,28:$V5,31:$V6,38:13,40:$V7,42:14,76:$V8},{11:[1,197],12:[1,198]},o($Vj,[2,10]),{73:[1,199]},{12:[1,200]},{20:[1,201]},{32:202,82:$VR,83:$VS},{20:[1,203]},o($Vj,[2,8]),o($Vj,[2,80]),o($Vj,[2,7])],
defaultActions: {16:[2,1],150:[2,17],158:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 74
break;
case 2:return 75
break;
case 3:return "if"
break;
case 4:return 17
break;
case 5:return "else"
break;
case 6:return "elsif"
break;
case 7:return "loop"
break;
case 8:return "function"
break;
case 9:return "begin"
break;
case 10:return "return"
break;
case 11:return "void"
break;
case 12:return "case"
break;
case 13:return "printf"
break;
case 14:return "while"
break;
case 15:return "const"
break;
case 16:return "struct"
break;
case 17:return "switch"
break;
case 18:return "for"
break;
case 19:return "end"
break;
case 20:return "when"
break;
case 21:return 78
break;
case 22:return 20
break;
case 23:return 67
break;
case 24:return 39
break;
case 25:return 37
break;
case 26:return 52
break;
case 27:return 80
break;
case 28:return 51
break;
case 29:return 49
break;
case 30:return 64
break;
case 31:return 55
break;
case 32:return '>>'
break;
case 33:return 56
break;
case 34:return 53
break;
case 35:return '<<'
break;
case 36:return 54
break;
case 37:return 35
break;
case 38:return 41
break;
case 39:return 48
break;
case 40:return 60
break;
case 41:return 59
break;
case 42:return 49
break;
case 43:return 61
break;
case 44:return 47
break;
case 45:return 45
break;
case 46:return 58
break;
case 47:return 44
break;
case 48:return 46
break;
case 49:return 57
break;
case 50:return '^'
break;
case 51:return 50
break;
case 52:return 72
break;
case 53:return 73
break;
case 54:return 68
break;
case 55:return 69
break;
case 56:return 13
break;
case 57:return 15
break;
case 58:return 12
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:if\b)/,/^(?:is\b)/,/^(?:else\b)/,/^(?:elsif\b)/,/^(?:loop\b)/,/^(?:function\b)/,/^(?:begin\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:end\b)/,/^(?:when\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::=)/,/^(?::)/,/^(?:and\b)/,/^(?:&)/,/^(?:or\b)/,/^(?:\/=)/,/^(?:not\b)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:=>)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:mod\b)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vhdl_parser;
exports.Parser = vhdl_parser.Parser;
exports.parse = function () { return vhdl_parser.parse.apply(vhdl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}