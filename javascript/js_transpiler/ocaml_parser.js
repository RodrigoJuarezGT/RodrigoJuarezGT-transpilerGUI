/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ocaml_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,5],$V2=[1,14],$V3=[11,32],$V4=[8,12],$V5=[1,34],$V6=[1,27],$V7=[1,25],$V8=[1,26],$V9=[1,28],$Va=[1,30],$Vb=[1,32],$Vc=[1,33],$Vd=[1,35],$Ve=[5,9,13],$Vf=[9,12,31,32,35,57,63,65,67],$Vg=[1,39],$Vh=[1,43],$Vi=[1,48],$Vj=[1,45],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[8,9,12,23,30,31,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,57,58,60,62,63,65,67],$VB=[8,9,12,17,23,27,30,31,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,57,58,60,62,63,65,67],$VC=[2,50],$VD=[2,63],$VE=[1,99],$VF=[8,9,12,23,30,31,32,35,37,38,39,40,41,42,43,44,57,58,60,62,63,65,67],$VG=[8,9,12,23,30,31,32,35,37,38,39,40,41,42,43,44,45,46,47,57,58,60,62,63,65,67],$VH=[8,9,12,23,30,31,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,57,58,60,62,63,65,67],$VI=[58,62];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"type":10,"=":11,";":12,"let":13,"parameters":14,"statements":15,"types":16,"->":17,"statement":18,"statement_with_parentheses":19,"statement_with_semicolon":20,"if":21,"e":22,"then":23,"elif":24,"match":25,"parentheses_expr":26,"with":27,"case_statements":28,"declare_vars":29,"in":30,"(":31,")":32,"case_statement":33,"case_statements_":34,"_":35,"declare_var":36,"||":37,"&&":38,"==":39,"/=":40,"<=":41,"<":42,">=":43,">":44,"++":45,"+":46,"-":47,"*":48,"/":49,"mod":50,"**":51,"^":52,"access_array":53,"!!":54,"access_arr":55,"fun":56,"[":57,"]":58,"exprs":59,"<-":60,"list_comprehensions":61,",":62,"NUMBER":63,"args":64,"STRING_LITERAL":65,"parameter":66,"else":67,"identifiers":68,"guard_if_statement":69,"guard_elif":70,"otherwise":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",11:"=",12:";",13:"let",17:"->",21:"if",23:"then",25:"match",27:"with",30:"in",31:"(",32:")",35:"_",37:"||",38:"&&",39:"==",40:"/=",41:"<=",42:"<",43:">=",44:">",45:"++",46:"+",47:"-",48:"*",49:"/",50:"mod",51:"**",52:"^",54:"!!",56:"fun",57:"[",58:"]",60:"<-",62:",",63:"NUMBER",65:"STRING_LITERAL",67:"else",71:"otherwise"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[6,5],[6,6],[16,3],[16,1],[18,1],[18,1],[19,5],[19,4],[19,4],[19,3],[33,3],[34,2],[34,1],[28,4],[36,3],[29,2],[29,1],[20,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[53,3],[26,8],[26,3],[26,2],[26,3],[26,7],[26,9],[26,1],[26,1],[26,3],[26,4],[26,1],[61,5],[61,1],[10,1],[66,1],[14,2],[14,1],[55,3],[55,1],[59,3],[59,1],[64,2],[64,1],[24,2],[68,3],[68,1],[69,5],[70,5],[70,4],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 17: case 21: case 58: case 64:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 9: case 18: case 22: case 59: case 61:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["algebraic_data_type",$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["function","public","Object",2,$$[$0-3],$$[$0-1]];
break;
case 8: case 60: case 62: case 67:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 10: case 41:
this.$ = $$[$0];
break;
case 11:
this.$ = ["semicolon",$$[$0]];
break;
case 12: case 69:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 13:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ["lexically_scoped_vars",$$[$0-2],$$[$0]];
break;
case 15: case 44: case 51:
this.$ = $$[$0-1]
break;
case 16:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 19:
this.$ = $$[$0-3].concat([["default",["statements",$$[$0]]]])
break;
case 20:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 23:
this.$ = ["return",$$[$0]];
break;
case 24: case 25: case 26: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 38:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["-",$$[$0]];
break;
case 42:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 43:
this.$ = ["anonymous_function","Object",$$[$0-4],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 45:
this.$ = ["initializer_list","Object",[]];
break;
case 46:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 47:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 48:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 49: case 53:
this.$ = yytext;
break;
case 52:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 54:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 57:
this.$ = ["Object",$$[$0]];
break;
case 63: case 65: case 68:
this.$ = [$$[$0]];
break;
case 66: case 71:
this.$ = ["else",$$[$0]];
break;
case 70:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 72:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,9:$V0,10:4,13:$V1},{1:[3]},{5:[1,7]},{4:8,5:[2,3],6:3,9:$V0,10:4,13:$V1},{9:[1,9]},{9:[1,10]},{9:[2,56]},{1:[2,1]},{5:[2,2]},{11:[1,11]},{9:$V2,14:12,66:13},{7:15,9:[1,16]},{11:[1,17]},o($V3,[2,59],{66:13,14:18,9:$V2}),o([9,11,32],[2,57]),{8:[1,20],12:[1,19]},o($V4,[2,5]),{9:$V5,13:$V6,15:21,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($V3,[2,58]),o($Ve,[2,6]),{9:[1,36]},{12:[1,37]},o($Vf,[2,72]),o($Vf,[2,10]),o($Vf,[2,11]),{9:$V5,22:38,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,26:40,31:$Vg,57:$Vb,63:$Vc,65:$Vd},{9:$Vh,29:41,36:42},{9:$Vi,13:$V6,19:44,21:$V7,22:47,25:$V8,26:31,31:$V9,47:$Va,53:46,56:$Vj,57:$Vb,63:$Vc,65:$Vd},o($Vf,[2,23],{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),{9:$V5,22:65,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($VA,[2,41]),{9:$V5,22:68,26:31,31:$Vg,47:$Va,57:$Vb,58:[1,66],59:67,63:$Vc,65:$Vd},o($VB,[2,49]),o($VB,$VC),o($VB,[2,53]),o($V4,[2,4]),o($Ve,[2,7]),{23:[1,69],37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz},{9:$Vi,22:47,26:31,31:$Vg,47:$Va,53:46,56:$Vj,57:$Vb,63:$Vc,65:$Vd},{27:[1,70]},{30:[1,71]},{9:$Vh,29:72,30:[2,22],36:42},{11:[1,73]},{32:[1,74]},{31:[1,75]},{32:[1,76]},{32:[1,77],37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz},o([32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$VC,{64:78,26:80,9:$V5,31:$Vg,54:[1,79],57:$Vb,63:$Vc,65:$Vd}),{9:$V5,22:81,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:82,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:83,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:84,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:85,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:86,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:87,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:88,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:89,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:90,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:91,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:92,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:93,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:94,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:95,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:96,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($VA,[2,40]),o($VB,[2,45]),{58:[1,97]},{8:[1,98],37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,58:$VD,62:$VE},{9:$V5,13:$V6,15:100,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,26:104,28:101,31:$Vg,33:103,34:102,57:$Vb,63:$Vc,65:$Vd},{9:$V5,13:$V6,15:105,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},{30:[2,21]},{9:$V5,22:106,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($Vf,[2,15]),{9:$V2,14:107,66:13},o($VB,[2,44]),o($VB,[2,51]),{32:[1,108]},{9:$V5,26:110,31:$Vg,55:109,57:$Vb,63:$Vc,65:$Vd},{9:$V5,26:80,31:$Vg,32:[2,65],57:$Vb,63:$Vc,64:111,65:$Vd},o([8,9,12,23,30,31,32,35,37,57,58,60,62,63,65,67],[2,24],{38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o([8,9,12,23,30,31,32,35,37,38,57,58,60,62,63,65,67],[2,25],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,26],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,27],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,28],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,29],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,30],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VF,[2,31],{45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VG,[2,32],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VG,[2,33],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VG,[2,34],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($VH,[2,35],{51:$Vy,52:$Vz}),o($VH,[2,36],{51:$Vy,52:$Vz}),o($VH,[2,37],{51:$Vy,52:$Vz}),o($VA,[2,38]),o($VA,[2,39]),o($VB,[2,46]),{9:$V5,22:112,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:114,26:31,31:$Vg,47:$Va,57:$Vb,59:113,63:$Vc,65:$Vd},{24:115,67:[1,116]},o($Vf,[2,13]),{35:[1,117]},{9:$V5,26:104,31:$Vg,33:103,34:118,35:[2,18],57:$Vb,63:$Vc,65:$Vd},{17:[1,119]},o($Vf,[2,14]),o([9,30],[2,20],{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),{32:[1,120]},o($VB,[2,52]),{32:[2,42]},{32:[2,61],54:[1,121]},{32:[2,64]},{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,60:[1,122]},{58:[2,62]},{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,58:$VD,62:$VE},o($Vf,[2,12]),{9:$V5,13:$V6,15:123,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},{17:[1,124]},{35:[2,17]},{9:$V5,13:$V6,15:125,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},{17:[1,126]},{9:$V5,26:110,31:$Vg,55:127,57:$Vb,63:$Vc,65:$Vd},{9:$V5,22:129,26:31,31:$Vg,47:$Va,57:$Vb,61:128,63:$Vc,65:$Vd},o($Vf,[2,66]),{9:$V5,13:$V6,15:130,18:22,19:23,20:24,21:$V7,22:29,25:$V8,26:31,31:$V9,47:$Va,57:$Vb,63:$Vc,65:$Vd},o([9,31,35,57,63,65],[2,16]),{9:$V5,22:131,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},{32:[2,60]},{58:[1,132],62:[1,133]},o($VI,[2,55],{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz}),o($Vf,[2,19]),{32:[1,134],37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz},o($VB,[2,47]),{9:$V5,22:135,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($VB,[2,43]),{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,58:[1,136],60:[1,137]},o($VB,[2,48]),{9:$V5,22:138,26:31,31:$Vg,47:$Va,57:$Vb,63:$Vc,65:$Vd},o($VI,[2,54],{37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz})],
defaultActions: {6:[2,56],7:[2,1],8:[2,2],72:[2,21],109:[2,42],111:[2,64],113:[2,62],118:[2,17],127:[2,60]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 63
break;
case 2:return 65
break;
case 3:return "otherwise"
break;
case 4:return "if"
break;
case 5:return 27
break;
case 6:return "in"
break;
case 7:return "let"
break;
case 8:return 56
break;
case 9:return "else"
break;
case 10:return "match"
break;
case 11:return "then"
break;
case 12:return "type"
break;
case 13:return "return"
break;
case 14:return 50
break;
case 15:return 62
break;
case 16:return 12
break;
case 17:return '.'
break;
case 18:return '::'
break;
case 19:return ':'
break;
case 20:return 38
break;
case 21:return 37
break;
case 22:return 8
break;
case 23:return 43
break;
case 24:return 44
break;
case 25:return 41
break;
case 26:return 60
break;
case 27:return 17
break;
case 28:return 42
break;
case 29:return 39
break;
case 30:return 11
break;
case 31:return 52
break;
case 32:return '*='
break;
case 33:return 51
break;
case 34:return 48
break;
case 35:return 40
break;
case 36:return 49
break;
case 37:return '-='
break;
case 38:return '--'
break;
case 39:return 47
break;
case 40:return 45
break;
case 41:return '+='
break;
case 42:return 46
break;
case 43:return '{'
break;
case 44:return '}'
break;
case 45:return 54
break;
case 46:return 57
break;
case 47:return 58
break;
case 48:return 31
break;
case 49:return 32
break;
case 50:return 35
break;
case 51:return 9
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:with\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:fun\b)/,/^(?:else\b)/,/^(?:match\b)/,/^(?:then\b)/,/^(?:type\b)/,/^(?:return\b)/,/^(?:mod\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ocaml_parser;
exports.Parser = ocaml_parser.Parser;
exports.parse = function () { return ocaml_parser.parse.apply(ocaml_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}