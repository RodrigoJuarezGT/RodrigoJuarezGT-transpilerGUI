/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var rust_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,5],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,14],$Va=[1,15],$Vb=[1,18],$Vc=[5,14,42],$Vd=[1,38],$Ve=[1,39],$Vf=[1,36],$Vg=[1,29],$Vh=[1,31],$Vi=[1,40],$Vj=[1,41],$Vk=[2,75],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[12,14,16,20,37],$Vv=[5,11,12,14,17,24,27,30,32,33,35,42,44,45,78],$Vw=[1,72],$Vx=[1,74],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,73],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[13,14,15,16,20,23,37,38,55,56,57,58,59,60,61,62,63,64,65,66,73],$VL=[13,14,15,16,18,20,23,37,38,55,56,57,58,59,60,61,62,63,64,65,66,71,73],$VM=[1,87],$VN=[1,91],$VO=[20,23],$VP=[1,102],$VQ=[2,89],$VR=[1,106],$VS=[1,115],$VT=[2,79],$VU=[1,118],$VV=[1,122],$VW=[14,20],$VX=[14,20,37],$VY=[1,155],$VZ=[1,164],$V_=[14,20,23],$V$=[13,14,15,16,20,23,37,38,55,56,57,58,59,60,61,73],$V01=[13,14,15,16,20,23,37,38,55,56,57,58,59,60,61,62,63,73],$V11=[1,174],$V21=[1,189];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"access_modifier":8,"public":9,"private":10,"struct":11,"IDENTIFIER":12,"{":13,"}":14,"<":15,">":16,"fn":17,"(":18,"parameters":19,")":20,"types":21,"statement_with_semicolon":22,";":23,"while":24,"e":25,"bracket_statements":26,"switch":27,"case_statements":28,"struct_statements":29,"enum":30,"identifiers":31,"for":32,"if":33,"elif":34,"loop":35,"struct_statement":36,",":37,":":38,"type":39,"case_statement":40,"case":41,"break":42,"exprs":43,"return":44,"let":45,"mut":46,"=":47,"access_array":48,"++":49,"--":50,"+=":51,"-=":52,"*=":53,"/=":54,"?":55,"||":56,"&&":57,"<=":58,">=":59,"==":60,"!=":61,"+":62,"-":63,"%":64,"*":65,"/":66,"not_expr":67,"!":68,"dot_expr":69,"parentheses_expr":70,".":71,"[":72,"]":73,"function_call":74,"parentheses_expr_":75,"NUMBER":76,"STRING_LITERAL":77,"void":78,"parameter":79,"expr":80,"&":81,"else":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public",10:"private",11:"struct",12:"IDENTIFIER",13:"{",14:"}",15:"<",16:">",17:"fn",18:"(",20:")",23:";",24:"while",27:"switch",30:"enum",32:"for",33:"if",35:"loop",37:",",38:":",41:"case",42:"break",44:"return",45:"let",46:"mut",47:"=",49:"++",50:"--",51:"+=",52:"-=",53:"*=",54:"/=",55:"?",56:"||",57:"&&",58:"<=",59:">=",60:"==",61:"!=",62:"+",63:"-",64:"%",65:"*",66:"/",68:"!",71:".",72:"[",73:"]",76:"NUMBER",77:"STRING_LITERAL",78:"void",81:"&",82:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,1],[8,1],[6,5],[6,8],[6,8],[6,11],[6,2],[6,5],[6,7],[6,5],[6,5],[6,9],[6,6],[6,5],[6,5],[29,3],[29,1],[36,3],[40,6],[28,2],[28,1],[22,3],[22,4],[22,2],[22,5],[22,4],[22,2],[22,2],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[25,5],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[67,2],[67,1],[69,3],[69,1],[48,4],[70,1],[70,1],[70,3],[70,1],[75,2],[75,3],[75,1],[75,1],[75,1],[74,3],[74,4],[39,3],[39,1],[39,1],[79,3],[19,3],[19,1],[19,0],[43,3],[43,1],[80,2],[80,1],[21,3],[21,1],[34,7],[34,4],[31,3],[31,1],[26,3],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 21: case 25: case 60: case 78:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 7:
this.$ = ["struct",$$[$0-3],$$[$0-1]]
break;
case 8:
this.$ = ["generic_struct",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 9:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 10:
this.$ = ["generic_function","public","Object",$$[$0-9],$$[$0-4],$$[$0-1],$$[$0-7]];
break;
case 11: case 91:
this.$ = ["semicolon",$$[$0-1]];
break;
case 12:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 14:
this.$ = ["struct",$$[$0-3],["struct_statements",$$[$0-1]]]
break;
case 15:
this.$ = ["enum","public",$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 19:
this.$ = ["infinite_loop",$$[$0-2]];
break;
case 20:
this.$ = [$$[$0-2]].concat($$[$0-1]);
break;
case 22:
this.$ = ["struct_statement",$$[$0],[$$[$0-2]]];
break;
case 23:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 26: case 71:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 27: case 72:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 28:
this.$ = ["return",$$[$0]];
break;
case 29:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["initialize_constant","Object",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 32:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 33: case 34:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 35: case 36:
this.$ = [$$[$0],$$[$0-1]];
break;
case 37: case 38: case 39: case 40: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 55:
this.$ = ["-",$$[$0]];
break;
case 57:
this.$ = ["!", [".",$$[$0]]];
break;
case 58:
this.$ = [".", $$[$0]];
break;
case 59: case 77: case 80: case 84: case 88:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 61:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 64:
this.$ = ["parentheses",$$[$0-1]];
break;
case 66:
this.$ = ["initializer_list","Object",[]];
break;
case 67:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 68: case 69: case 70:
this.$ = yytext;
break;
case 73:
this.$ = [$$[$0-2],"[]"];
break;
case 76:
this.$ = [$$[$0],$$[$0-2]];
break;
case 79:
this.$ = [];
break;
case 81: case 83: case 85: case 89:
this.$ = [$$[$0]];
break;
case 82:
this.$ = ["function_call_ref",$$[$0]];
break;
case 86:
this.$ = ["elif",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 87:
this.$ = ["else",$$[$0-1]];
break;
case 90:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{1:[3]},{5:[1,19]},o($Vc,[2,3],{6:3,22:6,39:16,48:17,4:20,11:$V0,12:$V1,17:$V2,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,44:$V9,45:$Va,78:$Vb}),{12:[1,21]},{12:[1,22]},{23:[1,23]},{18:[1,24]},{18:[1,25]},{12:[1,26]},{18:[1,27]},{12:$Vd,13:$Ve,18:$Vf,25:28,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{13:[1,42]},{12:$Vk,18:$Vl,47:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,72:$Vt},{12:$Vd,13:$Ve,18:$Vf,25:52,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:[1,54],46:[1,53]},{12:[1,57],31:56,48:55},{47:[1,58]},o($Vu,[2,74]),{1:[2,1]},o($Vc,[2,2]),{13:[1,59],15:[1,60]},{15:[1,62],18:[1,61]},o($Vv,[2,11]),{12:$Vd,13:$Ve,18:$Vf,25:63,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:64,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{13:[1,65]},{12:$V1,22:66,39:16,44:$V9,45:$Va,48:17,78:$Vb},{13:[1,67],15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{12:$Vd,13:$Ve,18:$Vf,25:82,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VK,[2,56]),{12:$Vd,13:$Ve,18:$Vf,48:34,69:83,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VK,[2,58]),o($VK,[2,60],{18:[1,85],71:[1,84]}),o($VL,[2,62]),o($VL,[2,63]),{12:$Vd,13:$Ve,18:$Vf,25:86,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VL,[2,65]),o($VL,[2,69],{72:$VM}),{12:$Vd,13:$Ve,14:[1,88],18:$Vf,25:92,43:89,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj,80:90,81:$VN},o($VL,[2,68]),o($VL,[2,70]),{4:94,6:3,7:93,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{12:$Vd,13:$Ve,18:$Vf,20:[1,95],25:92,43:96,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj,80:90,81:$VN},{12:$Vd,13:$Ve,18:$Vf,25:97,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VO,[2,35]),o($VO,[2,36]),{12:$Vd,13:$Ve,18:$Vf,25:98,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:99,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:100,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:101,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:103,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,73:$VP,74:35,75:37,76:$Vi,77:$Vj},o($VO,[2,28],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{12:[1,104]},{47:[1,105]},o($VO,[2,31]),o($VO,[2,32]),o($VO,$VQ,{37:$VR,72:$VM}),{12:$Vd,13:$Ve,18:$Vf,25:107,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{4:94,6:3,7:108,11:$V0,12:[1,111],17:$V2,22:6,24:$V3,27:$V4,29:109,30:$V5,32:$V6,33:$V7,35:$V8,36:110,39:16,44:$V9,45:$Va,48:17,78:$Vb},{12:[1,112]},{12:$VS,19:113,20:$VT,79:114},{12:$VU,21:116,39:117,78:$Vb},{15:$Vw,16:$Vx,20:[1,119],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{15:$Vw,16:$Vx,20:[1,120],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{12:$VV,31:121},{23:[1,123]},{4:94,6:3,7:124,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{12:$Vd,13:$Ve,18:$Vf,25:125,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:126,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:127,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:128,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:129,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:130,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:131,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:132,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:133,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:134,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:135,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:136,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:137,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,25:138,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VK,[2,55]),o($VK,[2,57]),{12:$Vd,13:$Ve,18:$Vf,48:34,69:139,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$Vd,13:$Ve,18:$Vf,20:[1,140],25:92,43:141,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj,80:90,81:$VN},{15:$Vw,16:$Vx,20:[1,142],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{12:$Vd,13:$Ve,18:$Vf,25:103,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VL,[2,66]),{14:[1,143]},o($VW,[2,81],{37:[1,144]}),{12:$Vd,13:$Ve,18:$Vf,25:145,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VX,[2,83],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{14:[1,146]},o([14,42],[2,4]),o($VO,[2,26]),{20:[1,147]},o($VO,[2,34],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VO,[2,37],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VO,[2,38],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VO,[2,39],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VO,[2,40],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($Vu,[2,73]),{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,73:[1,148]},{47:[1,149]},{12:$Vd,13:$Ve,18:$Vf,25:150,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$VV,31:151},o($VO,[2,33],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{14:[1,152]},{14:[1,153]},{14:[2,21],37:[1,154]},{12:$Vk,18:$Vl,38:$VY,47:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,72:$Vt},{16:[1,156]},{20:[1,157]},{20:[2,78],37:[1,158]},{38:[1,159]},{16:[1,160]},{16:[2,85],37:[1,161]},o([14,16,20,37],$Vk,{72:[1,162]}),{12:$V1,13:$VZ,22:165,26:163,39:16,44:$V9,45:$Va,48:17,78:$Vb},{13:[1,166]},{14:[1,167]},o($V_,$VQ,{37:$VR}),{12:$Vd,13:$Ve,18:$Vf,25:168,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{14:[1,169]},{15:$Vw,16:$Vx,38:[1,170],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o([13,14,20,23,37,38,55,56,73],[2,42],{15:$Vw,16:$Vx,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o([13,14,20,23,37,38,55,56,57,73],[2,43],{15:$Vw,16:$Vx,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,44],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,45],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,46],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,47],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,48],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V$,[2,49],{62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V01,[2,50],{64:$VH,65:$VI,66:$VJ}),o($V01,[2,51],{64:$VH,65:$VI,66:$VJ}),o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,59]),o($VL,[2,71]),{20:[1,171]},o($VL,[2,64]),o($VL,[2,67]),{12:$Vd,13:$Ve,18:$Vf,25:92,43:172,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj,80:90,81:$VN},o($VX,[2,82],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{34:173,82:$V11},o($VO,[2,27]),o([13,14,15,16,18,20,23,37,38,47,55,56,57,58,59,60,61,62,63,64,65,66,71,73],[2,61]),{12:$Vd,13:$Ve,18:$Vf,25:175,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VO,[2,30],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($V_,[2,88]),o($Vv,[2,7]),o($Vv,[2,14]),{12:[1,177],29:176,36:110},{12:$VU,39:178,78:$Vb},{13:[1,179]},{13:[1,180]},{12:$VS,19:181,20:$VT,79:114},{12:$VU,39:182,78:$Vb},{18:[1,183]},{12:$VU,21:184,39:117,78:$Vb},{73:$VP},o($Vv,[2,12]),{4:94,6:3,7:185,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{23:[1,186]},{28:187,40:188,41:$V21},o($Vv,[2,15]),{15:$Vw,16:$Vx,23:[1,190],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},o($Vv,[2,18],{34:191,82:$V11}),{12:$Vd,13:$Ve,18:$Vf,25:192,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},o($VL,[2,72]),o($VW,[2,80]),o($Vv,[2,19]),{13:[1,194],33:[1,193]},o($VO,[2,29],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{14:[2,20]},{38:$VY},o([14,37],[2,22]),{4:94,6:3,7:195,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{4:94,6:3,7:196,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{20:[2,77]},o([20,37],[2,76]),{12:$VS,19:197,20:$VT,79:114},{16:[2,84]},{14:[1,198]},o($Vv,[2,91]),{14:[1,199]},{14:[2,25],28:200,40:188,41:$V21},{12:$Vd,13:$Ve,18:$Vf,25:201,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{12:$V1,22:202,39:16,44:$V9,45:$Va,48:17,78:$Vb},o($Vv,[2,17]),o([13,14,20,23,37,38,73],[2,41],{15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{12:$Vd,13:$Ve,18:$Vf,25:203,48:34,63:$Vg,67:30,68:$Vh,69:32,70:33,74:35,75:37,76:$Vi,77:$Vj},{4:94,6:3,7:204,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{14:[1,205]},{14:[1,206]},{20:[1,207]},o($Vv,[2,90]),o($Vv,[2,13]),{14:[2,24]},{15:$Vw,16:$Vx,38:[1,208],55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{20:[1,209]},{13:[1,210],15:$Vw,16:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ},{14:[1,211]},o($Vv,[2,8]),o($Vv,[2,9]),{13:[1,212]},{4:94,6:3,7:213,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{12:$V1,13:$VZ,22:165,26:214,39:16,44:$V9,45:$Va,48:17,78:$Vb},{4:94,6:3,7:215,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},o($Vv,[2,87]),{4:94,6:3,7:216,11:$V0,12:$V1,17:$V2,22:6,24:$V3,27:$V4,30:$V5,32:$V6,33:$V7,35:$V8,39:16,44:$V9,45:$Va,48:17,78:$Vb},{42:[1,217]},o($Vv,[2,16]),{14:[1,218]},{14:[1,219]},{23:[1,220]},{34:221,82:$V11},o($Vv,[2,10]),o([14,41],[2,23]),o($Vv,[2,86])],
defaultActions: {19:[2,1],176:[2,20],181:[2,77],184:[2,84],200:[2,24]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 76
break;
case 4:return 77
break;
case 5:return 17
break;
case 6:return 45
break;
case 7:return 46
break;
case 8:return "if"
break;
case 9:return "else"
break;
case 10:return "loop"
break;
case 11:return "return"
break;
case 12:return "void"
break;
case 13:return "case"
break;
case 14:return "printf"
break;
case 15:return "while"
break;
case 16:return "const"
break;
case 17:return "struct"
break;
case 18:return "switch"
break;
case 19:return "for"
break;
case 20:return "enum"
break;
case 21:return 37
break;
case 22:return 23
break;
case 23:return 71
break;
case 24:return 38
break;
case 25:return 57
break;
case 26:return 81
break;
case 27:return 56
break;
case 28:return 61
break;
case 29:return 68
break;
case 30:return 59
break;
case 31:return '>>'
break;
case 32:return 16
break;
case 33:return 58
break;
case 34:return '<<'
break;
case 35:return 15
break;
case 36:return 60
break;
case 37:return 47
break;
case 38:return 53
break;
case 39:return 65
break;
case 40:return 64
break;
case 41:return 54
break;
case 42:return 66
break;
case 43:return 52
break;
case 44:return 50
break;
case 45:return 63
break;
case 46:return 49
break;
case 47:return 51
break;
case 48:return 62
break;
case 49:return '^'
break;
case 50:return 55
break;
case 51:return 13
break;
case 52:return 14
break;
case 53:return 72
break;
case 54:return 73
break;
case 55:return 18
break;
case 56:return 20
break;
case 57:return 12
break;
case 58:return 5
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:fn\b)/,/^(?:let\b)/,/^(?:mut\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:enum\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = rust_parser;
exports.Parser = rust_parser.Parser;
exports.parse = function () { return rust_parser.parse.apply(rust_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}