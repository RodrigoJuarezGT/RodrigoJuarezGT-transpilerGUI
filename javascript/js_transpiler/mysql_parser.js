/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mysql_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,4],$V2=[1,6],$V3=[1,7],$V4=[1,9],$V5=[1,11],$V6=[1,12],$V7=[1,14],$V8=[7,24,39,84],$V9=[1,29],$Va=[1,22],$Vb=[1,24],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[2,69],$Vg=[4,11,19,21,23,25],$Vh=[4,7,17,24,29,32,39,41,43,45,76,84],$Vi=[1,55],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[11,21,25,31,33,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,69,73],$VA=[1,66],$VB=[11,19,21,25,31,33,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,69,73],$VC=[1,68],$VD=[21,73],$VE=[2,75],$VF=[1,120],$VG=[1,121],$VH=[11,21,25,31,33,47,48,49,50,69,73],$VI=[11,21,25,31,33,47,48,49,50,51,52,69,73],$VJ=[11,21,25,31,33,42,47,48,49,50,51,52,53,55,57,58,69,73],$VK=[11,21,25,31,33,42,47,48,49,50,51,52,53,54,55,56,57,58,69,73],$VL=[11,21,25,31,33,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,69,73],$VM=[1,137],$VN=[1,136],$VO=[11,21];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"IDENTIFIER":3,"identifier":4,"expressions":5,"statements_":6,"EOF":7,"statement":8,"struct_statements":9,"struct_statement":10,",":11,"type":12,"statements":13,"access_modifier":14,"public":15,"private":16,"create":17,"function":18,"(":19,"parameters":20,")":21,"returns":22,"begin":23,"end":24,";":25,"procedure":26,"table":27,"statement_with_semicolon":28,"while":29,"e":30,"do":31,"if":32,"then":33,"elif":34,"case_statement":35,"when":36,"case_statements_":37,"case_statements":38,"else":39,"exprs":40,"return":41,"=":42,"declare":43,"parentheses_expr":44,"set":45,"access_array":46,"?":47,":":48,"||":49,"or":50,"&&":51,"and":52,"<=":53,"<":54,">=":55,">":56,"!=":57,"<>":58,"+":59,"-":60,"%":61,"*":62,"/":63,"not_expr":64,"!":65,"dot_expr":66,".":67,"[":68,"]":69,"function_call":70,"parentheses_expr_":71,"{":72,"}":73,"NUMBER":74,"STRING_LITERAL":75,"void":76,"parameter":77,"out":78,"inout":79,"expr":80,"types":81,"else_":82,"ELSE":83,"elseif":84,"identifiers":85,"bracket_statements":86,"$accept":0,"$end":1},
terminals_: {2:"error",4:"identifier",7:"EOF",11:",",15:"public",16:"private",17:"create",18:"function",19:"(",21:")",22:"returns",23:"begin",24:"end",25:";",26:"procedure",27:"table",29:"while",31:"do",32:"if",33:"then",36:"when",39:"else",41:"return",42:"=",43:"declare",45:"set",47:"?",48:":",49:"||",50:"or",51:"&&",52:"and",53:"<=",54:"<",55:">=",56:">",57:"!=",58:"<>",59:"+",60:"-",61:"%",62:"*",63:"/",65:"!",67:".",68:"[",69:"]",72:"{",73:"}",74:"NUMBER",75:"STRING_LITERAL",76:"void",78:"out",79:"inout",83:"ELSE",84:"elseif"},
productions_: [0,[3,1],[5,2],[6,2],[6,1],[9,3],[9,1],[10,2],[13,1],[14,1],[14,1],[8,12],[8,10],[8,7],[8,2],[8,7],[8,8],[8,7],[35,4],[37,2],[37,1],[38,3],[38,1],[28,3],[28,4],[28,2],[28,4],[28,6],[28,3],[28,4],[28,4],[30,5],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,4],[30,4],[30,3],[30,3],[30,2],[30,1],[64,2],[64,1],[66,3],[66,1],[46,4],[44,1],[44,1],[44,3],[44,1],[71,2],[71,3],[71,1],[71,1],[71,1],[70,3],[70,4],[12,1],[12,1],[77,3],[77,3],[77,2],[20,3],[20,1],[20,0],[40,3],[40,1],[80,1],[81,3],[81,1],[82,1],[82,1],[34,5],[34,2],[85,3],[85,1],[86,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = yytext.toLowerCase()
break;
case 2:
return ["top_level_statements",$$[$0-1]]
break;
case 3: case 19:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 4: case 6: case 20: case 55: case 74:
this.$ =
 [$$[$0]];
break;
case 5: case 54: case 73: case 76: case 79: case 85:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 7:
this.$ = ["struct_statement",$$[$0],$$[$0-1]];
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-2]];
break;
case 12:
this.$ = ["function","public","void",$$[$0-7],$$[$0-5],$$[$0-2]];
break;
case 13:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 14: case 87:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 16:
this.$ = ["if",$$[$0-6],$$[$0-4],$$[$0-3]];
break;
case 17:
this.$ = ["if",$$[$0-5],$$[$0-3]];
break;
case 18:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 21:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 23: case 66:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 24: case 67:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["return",$$[$0]];
break;
case 26:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["set_array_size",$$[$0-3],$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["initialize_empty_vars",$$[$0],[$$[$0-1]]];
break;
case 29: case 30:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 32: case 34: case 36: case 37: case 38: case 39: case 43: case 44: case 45: case 48: case 49:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["==",$$[$0-2],$$[$0]];
break;
case 41: case 42:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 46:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 47:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 50:
this.$ = ["-",$$[$0]];
break;
case 52:
this.$ = ["!", [".",$$[$0]]];
break;
case 53:
this.$ = [".", $$[$0]];
break;
case 56:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 59:
this.$ = ["parentheses",$$[$0-1]];
break;
case 61:
this.$ = ["initializer_list","Object",[]];
break;
case 62:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 63: case 64: case 65:
this.$ = yytext;
break;
case 70:
this.$ = ["out_parameter",$$[$0],$$[$0-1]];
break;
case 71:
this.$ = ["ref_parameter",$$[$0],$$[$0-1]];
break;
case 72:
this.$ = [$$[$0],$$[$0-1]];
break;
case 75:
this.$ = [];
break;
case 77: case 78: case 80: case 86:
this.$ = [$$[$0]];
break;
case 83:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 84:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:8,4:$V0,5:1,6:2,8:3,12:10,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{1:[3]},{7:[1,15]},o($V8,[2,4],{8:3,28:5,3:8,12:10,6:16,4:$V0,17:$V1,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7}),{18:[1,17],26:[1,18],27:[1,19]},{25:[1,20]},{3:31,4:$V0,19:$V9,30:21,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:35,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{4:$Vf,19:[1,36]},{3:31,4:$V0,19:$V9,30:37,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:38,4:$V0},{3:39,4:$V0},{3:41,4:$V0,46:40},o([4,11,19,21,23,25,31,33,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,73,76],[2,1]),o($Vg,[2,68]),{1:[2,2]},o($V8,[2,3]),{3:42,4:$V0},{3:43,4:$V0},{3:44,4:$V0},o($Vh,[2,14]),{31:[1,45],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{3:31,4:$V0,19:$V9,30:63,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($Vz,[2,51]),{3:31,4:$V0,19:$V9,44:26,46:27,66:64,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($Vz,[2,53]),o($Vz,[2,55],{19:$VA,67:[1,65]}),o($VB,[2,57]),o($VB,[2,58]),{3:31,4:$V0,19:$V9,30:67,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($VB,[2,60]),o($VB,[2,64],{68:$VC}),{3:31,4:$V0,19:$V9,30:72,40:70,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,73:[1,69],74:$Vd,75:$Ve,80:71},o($VB,[2,63]),o($VB,[2,65]),{33:[1,73],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{3:31,4:$V0,19:$V9,21:[1,74],30:72,40:75,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve,80:71},{25:[2,25],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{42:[1,76]},{3:78,4:$V0,12:77,76:$V7},{42:[1,79]},{42:[1,80],68:$VC},{19:[1,81]},{19:[1,82]},{19:[1,83]},{3:8,4:$V0,6:85,8:3,12:10,13:84,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{3:31,4:$V0,19:$V9,30:86,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:87,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:88,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:89,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:90,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:91,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:92,44:26,46:27,54:[1,93],60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:94,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:95,44:26,46:27,56:[1,96],60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:97,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:98,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:99,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:100,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:101,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:102,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:103,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:104,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($Vz,[2,50]),o($Vz,[2,52]),{3:31,4:$V0,19:$V9,44:26,46:27,66:105,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,21:[1,106],30:72,40:107,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve,80:71},{21:[1,108],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{3:31,4:$V0,19:$V9,30:109,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($VB,[2,61]),{73:[1,110]},o($VD,[2,77],{11:[1,111]}),o([11,21,73],[2,78],{42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),{3:8,4:$V0,6:85,8:3,12:10,13:112,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{25:[2,23]},{21:[1,113]},{3:31,4:$V0,19:$V9,30:114,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{19:[1,115],25:[2,28]},o($Vg,$Vf),{3:31,4:$V0,19:$V9,30:116,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:31,4:$V0,19:$V9,30:117,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:122,4:$V0,20:118,21:$VE,77:119,78:$VF,79:$VG},{3:122,4:$V0,20:123,21:$VE,77:119,78:$VF,79:$VG},{3:78,4:$V0,9:124,10:125,12:126,76:$V7},{24:[1,127]},o([24,39,84],[2,8]),{42:$Vi,47:$Vj,48:[1,128],49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},o($VH,[2,32],{42:$Vi,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VH,[2,33],{42:$Vi,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VI,[2,34],{42:$Vi,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VI,[2,35],{42:$Vi,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VJ,[2,36],{54:$Vp,56:$Vr,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VK,[2,37],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),{3:31,4:$V0,19:$V9,30:129,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($VJ,[2,38],{54:$Vp,56:$Vr,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VK,[2,39],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),{3:31,4:$V0,19:$V9,30:130,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($VJ,[2,40],{54:$Vp,56:$Vr,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VJ,[2,41],{54:$Vp,56:$Vr,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VJ,[2,42],{54:$Vp,56:$Vr,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VL,[2,43],{61:$Vw,62:$Vx,63:$Vy}),o($VL,[2,44],{61:$Vw,62:$Vx,63:$Vy}),o($Vz,[2,45]),o($Vz,[2,48]),o($Vz,[2,49]),o($Vz,[2,54]),o($VB,[2,66]),{21:[1,131]},o($VB,[2,59]),{42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,69:[1,132]},o($VB,[2,62]),{3:31,4:$V0,19:$V9,30:72,40:133,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve,80:71},{24:[1,135],34:134,39:$VM,84:$VN},{25:[2,24]},{25:[2,26],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{3:31,4:$V0,19:$V9,44:138,46:27,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{25:[2,29],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{25:[2,30],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{21:[1,139]},{11:[1,140],21:[2,74]},{3:141,4:$V0},{3:142,4:$V0},{3:78,4:$V0,12:143,76:$V7},{21:[1,144]},{21:[1,145]},{11:[1,146],21:[2,6]},{3:147,4:$V0},{29:[1,148]},{3:31,4:$V0,19:$V9,30:149,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},o($VK,[2,47],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VK,[2,46],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),o($VB,[2,67]),o($VB,[2,56]),o($VD,[2,76]),{24:[1,150]},{32:[1,151]},{3:31,4:$V0,19:$V9,30:152,44:26,46:27,60:$Va,64:23,65:$Vb,66:25,70:28,71:30,72:$Vc,74:$Vd,75:$Ve},{3:8,4:$V0,6:85,8:3,12:10,13:153,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{19:$VA,21:[1,154]},{22:[1,155]},{3:122,4:$V0,20:156,21:$VE,77:119,78:$VF,79:$VG},{3:78,4:$V0,12:157,76:$V7},{3:78,4:$V0,12:158,76:$V7},o($VO,[2,72]),{23:[1,159]},{25:[1,160]},{3:78,4:$V0,9:161,10:125,12:126,76:$V7},o($VO,[2,7]),{25:[1,162]},o([11,21,25,31,33,48,69,73],[2,31],{42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy}),{32:[1,163]},{25:[1,164]},{33:[1,165],42:$Vi,47:$Vj,49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy},{24:[2,84]},{25:[2,27]},{3:78,4:$V0,12:166,76:$V7},{21:[2,73]},o($VO,[2,70]),o($VO,[2,71]),{3:8,4:$V0,6:85,8:3,12:10,13:167,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},o($Vh,[2,13]),{21:[2,5]},o($Vh,[2,15]),{25:[1,168]},o($Vh,[2,17]),{3:8,4:$V0,6:85,8:3,12:10,13:169,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{23:[1,170]},{24:[1,171]},o($Vh,[2,16]),{34:172,39:$VM,84:$VN},{3:8,4:$V0,6:85,8:3,12:10,13:173,17:$V1,28:5,29:$V2,32:$V3,41:$V4,43:$V5,45:$V6,76:$V7},{25:[1,174]},{24:[2,83]},{24:[1,175]},o($Vh,[2,12]),{25:[1,176]},o($Vh,[2,11])],
defaultActions: {15:[2,2],74:[2,23],113:[2,24],153:[2,84],154:[2,27],156:[2,73],161:[2,5],172:[2,83]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 74
break;
case 2:return 75
break;
case 3:return 17
break;
case 4:return 43
break;
case 5:return 26
break;
case 6:return 27
break;
case 7:return 18
break;
case 8:return 22
break;
case 9:return 'repeat'
break;
case 10:return 23
break;
case 11:return 33
break;
case 12:return 36
break;
case 13:return 52
break;
case 14:return 50
break;
case 15:return 24
break;
case 16:return 45
break;
case 17:return "if"
break;
case 18:return 31
break;
case 19:return "else"
break;
case 20:return "elseif"
break;
case 21:return "return"
break;
case 22:return "void"
break;
case 23:return "case"
break;
case 24:return "printf"
break;
case 25:return "while"
break;
case 26:return "WHILE"
break;
case 27:return "break"
break;
case 28:return "default"
break;
case 29:return "const"
break;
case 30:return "struct"
break;
case 31:return "switch"
break;
case 32:return 79
break;
case 33:return 78
break;
case 34:return "for"
break;
case 35:return 11
break;
case 36:return 25
break;
case 37:return 67
break;
case 38:return 48
break;
case 39:return 51
break;
case 40:return '&'
break;
case 41:return 49
break;
case 42:return 58
break;
case 43:return 57
break;
case 44:return 65
break;
case 45:return 55
break;
case 46:return 56
break;
case 47:return 53
break;
case 48:return 54
break;
case 49:return 42
break;
case 50:return '*='
break;
case 51:return 62
break;
case 52:return 61
break;
case 53:return '/='
break;
case 54:return 63
break;
case 55:return '-='
break;
case 56:return '--'
break;
case 57:return 60
break;
case 58:return '++'
break;
case 59:return '+='
break;
case 60:return 59
break;
case 61:return '^'
break;
case 62:return 47
break;
case 63:return 72
break;
case 64:return 73
break;
case 65:return 68
break;
case 66:return 69
break;
case 67:return 19
break;
case 68:return 21
break;
case 69:return 4
break;
case 70:return 7
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:create\b)/i,/^(?:declare\b)/i,/^(?:procedure\b)/i,/^(?:table\b)/i,/^(?:function\b)/i,/^(?:returns\b)/i,/^(?:repeat\b)/i,/^(?:begin\b)/i,/^(?:then\b)/i,/^(?:when\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:end\b)/i,/^(?:set\b)/i,/^(?:if\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:elseif\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:case\b)/i,/^(?:printf\b)/i,/^(?:while\b)/i,/^(?:WHILE\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:const\b)/i,/^(?:struct\b)/i,/^(?:switch\b)/i,/^(?:inout\b)/i,/^(?:out\b)/i,/^(?:for\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:&&)/i,/^(?:&)/i,/^(?:\|\|)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\*=)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:-=)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mysql_parser;
exports.Parser = mysql_parser.Parser;
exports.parse = function () { return mysql_parser.parse.apply(mysql_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}