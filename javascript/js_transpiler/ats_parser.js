/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ats_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,16],$V3=[1,30],$V4=[1,24],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,26],$V9=[1,28],$Va=[1,29],$Vb=[1,31],$Vc=[5,10,12],$Vd=[5,9,10,12,13,15,32,36,59,62,64,70],$Ve=[1,38],$Vf=[1,42],$Vg=[1,47],$Vh=[1,44],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[5,9,10,12,13,15,23,31,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,59,60,62,64,66,70],$Vz=[5,9,10,12,13,15,23,27,31,32,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,59,60,62,64,66,70],$VA=[2,47],$VB=[5,8,10,12],$VC=[15,66],$VD=[5,9,10,12,13,15,23,31,32,36,38,39,40,41,42,43,44,45,46,59,60,62,64,66,70],$VE=[5,9,10,12,13,15,23,31,32,36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,62,64,66,70],$VF=[5,9,10,12,13,15,23,31,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,59,60,62,64,66,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"datatype":10,"=":11,"fun":12,"(":13,"parameters":14,")":15,":":16,"statements":17,"statement":18,"statement_with_parentheses":19,"statement_with_semicolon":20,"if":21,"e":22,"then":23,"elif":24,"case":25,"parentheses_expr":26,"of":27,"case_statements":28,"let":29,"declare_vars":30,"in":31,"end":32,"case_statement":33,"=>":34,"case_statements_":35,"_":36,"declare_var":37,"and":38,"||":39,"&&":40,"==":41,"/=":42,"<=":43,"<":44,">=":45,">":46,"++":47,"+":48,"-":49,"*":50,"/":51,"mod":52,"**":53,"^":54,"access_array":55,"!!":56,"access_arr":57,"lam":58,"[":59,"]":60,"exprs":61,"NUMBER":62,"args":63,"STRING_LITERAL":64,"list_comprehensions":65,",":66,"<-":67,"type":68,"parameter":69,"else":70,"identifiers":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",10:"datatype",11:"=",12:"fun",13:"(",15:")",16:":",21:"if",23:"then",25:"case",27:"of",29:"let",31:"in",32:"end",34:"=>",36:"_",38:"and",39:"||",40:"&&",41:"==",42:"/=",43:"<=",44:"<",45:">=",46:">",47:"++",48:"+",49:"-",50:"*",51:"/",52:"mod",53:"**",54:"^",56:"!!",58:"lam",59:"[",60:"]",62:"NUMBER",64:"STRING_LITERAL",66:",",67:"<-",70:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[6,5],[6,9],[6,4],[18,1],[18,1],[19,5],[19,4],[19,5],[19,3],[33,3],[35,2],[35,1],[28,4],[37,3],[30,3],[30,1],[20,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[55,3],[26,10],[26,3],[26,2],[26,3],[26,1],[26,1],[26,3],[26,4],[26,1],[65,5],[65,1],[68,1],[69,3],[14,3],[14,1],[57,3],[57,1],[61,3],[61,1],[63,2],[63,1],[24,2],[71,3],[71,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 16: case 61:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 17: case 21: case 56: case 58:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["algebraic_data_type",$$[$0-3],$$[$0]];
break;
case 7:
this.$ = ["function","public",$$[$0-2],$$[$0-7],$$[$0-5],$$[$0]];
break;
case 8:
this.$ = ["function","public","Object",$$[$0-2],[],$$[$0]];
break;
case 9: case 40:
this.$ = $$[$0];
break;
case 10:
this.$ = ["semicolon",$$[$0]];
break;
case 11:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 12:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["lexically_scoped_vars",$$[$0-3],$$[$0-1]];
break;
case 14: case 43: case 48:
this.$ = $$[$0-1]
break;
case 15:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 18:
this.$ = $$[$0-3].concat([["default",["statements",$$[$0]]]])
break;
case 19:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 20: case 55: case 57: case 59: case 64:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 22:
this.$ = ["return",$$[$0]];
break;
case 23: case 24: case 25: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 37:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 38:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["-",$$[$0]];
break;
case 41:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 42:
this.$ = ["anonymous_function",$$[$0-3],$$[$0-6],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 44:
this.$ = ["initializer_list","Object",[]];
break;
case 45:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 46: case 50:
this.$ = yytext;
break;
case 49:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 51:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 54:
this.$ = [$$[$0], $$[$0-2]];
break;
case 60: case 62: case 65:
this.$ = [$$[$0]];
break;
case 63:
this.$ = ["else",$$[$0]];
break;
case 66:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,10:$V0,12:$V1},{1:[3]},{5:[1,6]},{4:7,5:[2,3],6:3,10:$V0,12:$V1},{9:[1,8]},{9:[1,9]},{1:[2,1]},{5:[2,2]},{11:[1,10]},{11:[1,12],13:[1,11]},{8:[1,13]},{9:$V2,14:14,69:15},{9:$V3,13:$V4,17:17,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},{7:32,9:[1,33]},{15:[1,34]},{15:[2,56],66:[1,35]},{16:[1,36]},o($Vc,[2,8]),o($Vd,[2,66]),o($Vd,[2,9]),o($Vd,[2,10]),{9:$V3,13:$Ve,22:37,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,26:39,59:$V9,62:$Va,64:$Vb},{9:$Vf,30:40,37:41},{9:$Vg,13:$V4,19:43,21:$V5,22:46,25:$V6,26:27,29:$V7,49:$V8,55:45,58:$Vh,59:$V9,62:$Va,64:$Vb},o($Vd,[2,22],{39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),{9:$V3,13:$Ve,22:64,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},o($Vy,[2,40]),{9:$V3,13:$Ve,22:67,26:27,49:$V8,59:$V9,60:[1,65],61:66,62:$Va,64:$Vb},o($Vz,[2,46]),o($Vz,$VA),o($Vz,[2,50]),o($Vc,[2,6],{8:[1,68]}),o($VB,[2,5]),{16:[1,69]},{9:$V2,14:70,69:15},{9:[1,72],68:71},{23:[1,73],39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},{9:$Vg,13:$Ve,22:46,26:27,49:$V8,55:45,58:$Vh,59:$V9,62:$Va,64:$Vb},{27:[1,74]},{31:[1,75]},{31:[2,21],38:[1,76]},{11:[1,77]},{15:[1,78]},{13:[1,79]},{15:[1,80]},{15:[1,81],39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},o([15,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],$VA,{63:82,26:84,9:$V3,13:$Ve,56:[1,83],59:$V9,62:$Va,64:$Vb}),{9:$V3,13:$Ve,22:85,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:86,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:87,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:88,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:89,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:90,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:91,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:92,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:93,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:94,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:95,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:96,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:97,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:98,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:99,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,22:100,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},o($Vy,[2,39]),o($Vz,[2,44]),{60:[1,101]},{39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,60:[2,60],66:[1,102]},{9:[1,103]},{9:[1,104]},{15:[2,55]},o($VC,[2,54]),o($VC,[2,53]),{9:$V3,13:$V4,17:105,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,26:109,28:106,33:108,35:107,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$V4,17:110,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},{9:$Vf,30:111,37:41},{9:$V3,13:$Ve,22:112,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},o($Vd,[2,14]),{9:$V2,14:113,69:15},o($Vz,[2,43]),o($Vz,[2,48]),{15:[1,114]},{9:$V3,13:$Ve,26:116,57:115,59:$V9,62:$Va,64:$Vb},{9:$V3,13:$Ve,15:[2,62],26:84,59:$V9,62:$Va,63:117,64:$Vb},o([5,9,10,12,13,15,23,31,32,36,38,39,59,60,62,64,66,70],[2,23],{40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o([5,9,10,12,13,15,23,31,32,36,38,39,40,59,60,62,64,66,70],[2,24],{41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,25],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,26],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,27],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,28],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,29],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VD,[2,30],{47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VE,[2,31],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VE,[2,32],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VE,[2,33],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),o($VF,[2,34],{53:$Vw,54:$Vx}),o($VF,[2,35],{53:$Vw,54:$Vx}),o($VF,[2,36],{53:$Vw,54:$Vx}),o($Vy,[2,37]),o($Vy,[2,38]),o($Vz,[2,45]),{9:$V3,13:$Ve,22:67,26:27,49:$V8,59:$V9,61:118,62:$Va,64:$Vb},o($VB,[2,4]),{11:[1,119]},{24:120,70:[1,121]},o($Vd,[2,12]),{36:[1,122]},{9:$V3,13:$Ve,26:109,33:108,35:123,36:[2,17],59:$V9,62:$Va,64:$Vb},{34:[1,124]},{32:[1,125]},{31:[2,20]},o([31,38],[2,19],{39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx}),{15:[1,126]},o($Vz,[2,49]),{15:[2,41]},{15:[2,58],56:[1,127]},{15:[2,61]},{60:[2,59]},{9:$V3,13:$V4,17:128,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},o($Vd,[2,11]),{9:$V3,13:$V4,17:129,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},{34:[1,130]},{36:[2,16]},{9:$V3,13:$V4,17:131,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},o($Vd,[2,13]),{16:[1,132]},{9:$V3,13:$Ve,26:116,57:133,59:$V9,62:$Va,64:$Vb},o($Vc,[2,7]),o($Vd,[2,63]),{9:$V3,13:$V4,17:134,18:18,19:19,20:20,21:$V5,22:25,25:$V6,26:27,29:$V7,49:$V8,59:$V9,62:$Va,64:$Vb},o([9,13,36,59,62,64],[2,15]),{9:[1,135]},{15:[2,57]},o($Vd,[2,18]),{34:[1,136]},{9:$V3,13:$Ve,22:137,26:27,49:$V8,59:$V9,62:$Va,64:$Vb},{15:[1,138],39:$Vi,40:$Vj,41:$Vk,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx},o($Vz,[2,42])],
defaultActions: {6:[2,1],7:[2,2],70:[2,55],111:[2,20],115:[2,41],117:[2,61],118:[2,59],123:[2,16],133:[2,57]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 62
break;
case 2:return 64
break;
case 3:return "otherwise"
break;
case 4:return "if"
break;
case 5:return 27
break;
case 6:return 'orelse'
break;
case 7:return 'andalso'
break;
case 8:return 38
break;
case 9:return "in"
break;
case 10:return "let"
break;
case 11:return "else"
break;
case 12:return "case"
break;
case 13:return "then"
break;
case 14:return 58
break;
case 15:return "datatype"
break;
case 16:return "return"
break;
case 17:return 32
break;
case 18:return 52
break;
case 19:return 12
break;
case 20:return 66
break;
case 21:return ';'
break;
case 22:return '.'
break;
case 23:return '::'
break;
case 24:return 16
break;
case 25:return 40
break;
case 26:return 39
break;
case 27:return 8
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 43
break;
case 31:return 67
break;
case 32:return '->'
break;
case 33:return 44
break;
case 34:return 41
break;
case 35:return 11
break;
case 36:return 54
break;
case 37:return '*='
break;
case 38:return 53
break;
case 39:return 50
break;
case 40:return 42
break;
case 41:return 51
break;
case 42:return '-='
break;
case 43:return '--'
break;
case 44:return 49
break;
case 45:return 47
break;
case 46:return '+='
break;
case 47:return 48
break;
case 48:return '{'
break;
case 49:return '}'
break;
case 50:return 56
break;
case 51:return 59
break;
case 52:return 60
break;
case 53:return 13
break;
case 54:return 15
break;
case 55:return 36
break;
case 56:return 9
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:orelse\b)/,/^(?:andalso\b)/,/^(?:and\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:then\b)/,/^(?:lam\b)/,/^(?:datatype\b)/,/^(?:return\b)/,/^(?:end\b)/,/^(?:mod\b)/,/^(?:fun\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ats_parser;
exports.Parser = ats_parser.Parser;
exports.parse = function () { return ats_parser.parse.apply(ats_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}