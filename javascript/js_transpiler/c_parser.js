/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,18],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[5,23,24,29,30,33,36,38,41,42,44,46,54,55,56],$Vf=[1,39],$Vg=[10,27],$Vh=[24,82],$Vi=[2,104],$Vj=[2,105],$Vk=[1,53],$Vl=[1,64],$Vm=[1,62],$Vn=[1,65],$Vo=[1,55],$Vp=[1,57],$Vq=[1,66],$Vr=[1,67],$Vs=[1,69],$Vt=[2,122],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56],$Vy=[1,89],$Vz=[1,99],$VA=[1,107],$VB=[1,108],$VC=[1,109],$VD=[1,110],$VE=[1,111],$VF=[1,112],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[10,27,32,50,59,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,94],$VQ=[10,25,27,32,50,59,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,94],$VR=[1,131],$VS=[1,143],$VT=[2,112],$VU=[1,148],$VV=[32,51],$VW=[23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56],$VX=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56,99],$VY=[27,32],$VZ=[27,32,94],$V_=[32,94],$V$=[10,27,32,50,59,69,70,71,72,73,74,75,76,77,78,94],$V01=[10,27,32,50,59,69,70,71,72,73,74,75,76,77,78,79,80,94],$V11=[24,32,36],$V21=[27,94],$V31=[1,244],$V41=[1,247],$V51=[32,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statements_with_vars":8,"initialize_var_":9,";":10,"statements_without_vars":11,"statement":12,"initialize_var1":13,"struct_statements":14,"struct_statement":15,"type":16,"identifiers":17,"set_array_size":18,"statements":19,"access_modifier":20,"public":21,"private":22,"#define":23,"IDENTIFIER":24,"(":25,"exprs":26,")":27,"expr":28,"typedef":29,"struct":30,"{":31,"}":32,"enum":33,"enum_statements":34,"parameters":35,"void":36,"statement_with_semicolon":37,"while":38,"e":39,"bracket_statements":40,"do":41,"switch":42,"case_statements":43,"for":44,"statement_with_semicolon_":45,"if":46,"elif":47,"case_statement":48,"case":49,":":50,"break":51,"case_statements_":52,"default":53,"return":54,"continue":55,"const":56,"=":57,"[":58,"]":59,"access_array":60,"++":61,"--":62,"+=":63,"-=":64,"*=":65,"/=":66,"initialize_var":67,"initialize_vars":68,"?":69,"||":70,"&&":71,"<=":72,"<":73,">=":74,">":75,"^":76,"==":77,"!=":78,"+":79,"-":80,"%":81,"*":82,"/":83,"not_expr":84,"!":85,"dot_expr":86,"parentheses_expr":87,".":88,"function_call":89,"parentheses_expr_":90,"initialize_struct":91,"NUMBER":92,"STRING_LITERAL":93,",":94,"initialize_struct_":95,"parameter":96,"&":97,"types":98,"else":99,"enum_statement":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",21:"public",22:"private",23:"#define",24:"IDENTIFIER",25:"(",27:")",29:"typedef",30:"struct",31:"{",32:"}",33:"enum",36:"void",38:"while",41:"do",42:"switch",44:"for",46:"if",49:"case",50:":",51:"break",53:"default",54:"return",55:"continue",56:"const",57:"=",58:"[",59:"]",61:"++",62:"--",63:"+=",64:"-=",65:"*=",66:"/=",69:"?",70:"||",71:"&&",72:"<=",73:"<",74:">=",75:">",76:"^",77:"==",78:"!=",79:"+",80:"-",81:"%",82:"*",83:"/",85:"!",88:".",92:"NUMBER",93:"STRING_LITERAL",94:",",97:"&",99:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,2],[7,3],[11,2],[11,1],[8,3],[8,1],[14,2],[14,1],[15,3],[15,2],[19,1],[20,1],[20,1],[6,1],[6,2],[12,8],[12,7],[12,4],[12,6],[12,6],[12,8],[12,8],[12,2],[12,5],[12,7],[12,7],[12,9],[12,6],[12,5],[45,1],[45,1],[48,6],[52,2],[52,1],[43,4],[43,1],[37,3],[37,4],[37,2],[37,1],[37,1],[37,5],[37,7],[37,1],[37,2],[37,3],[37,3],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[13,1],[67,1],[9,4],[9,6],[68,3],[68,1],[18,2],[39,5],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,4],[39,4],[39,3],[39,3],[39,2],[39,1],[84,2],[84,1],[86,3],[86,1],[60,4],[87,1],[87,1],[87,3],[87,1],[90,2],[90,3],[90,3],[90,1],[90,1],[90,1],[91,3],[91,1],[95,4],[89,3],[89,4],[16,1],[16,1],[96,3],[96,2],[96,4],[96,3],[35,3],[35,1],[35,0],[26,3],[26,1],[28,2],[28,1],[98,3],[98,1],[47,7],[47,2],[17,3],[17,1],[34,3],[34,1],[100,3],[40,3],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 8: case 12: case 38: case 63: case 87: case 100: case 111:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [["semicolon",["initialize_var"].concat($$[$0-1])]]
break;
case 6:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-2])],["statements",$$[$0]]]]
break;
case 9:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 11: case 37:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["semicolon", $$[$0-1]];
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 19:
this.$ = ["semicolon",$$[$0-1]]
break;
case 20:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["struct",$$[$0-1],["struct_statements",$$[$0-3]]]
break;
case 22:
this.$ = ["typedef",$$[$0-2],$$[$0-1]]
break;
case 23:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 24:
this.$ = ["enum","public",$$[$0-4],$$[$0-2]];
break;
case 25:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 27: case 127:
this.$ = ["semicolon",$$[$0-1]];
break;
case 28:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 30:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 33:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 39:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 41: case 102:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 42: case 103:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 43:
this.$ = ["return",$$[$0]];
break;
case 44:
this.$ = ["return"];
break;
case 45:
this.$ = ["continue"];
break;
case 46:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 49:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 50: case 51:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 52: case 53:
this.$ = [$$[$0],$$[$0-1]];
break;
case 54: case 55: case 56: case 57: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 80: case 81:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 59:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 60:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 61:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 62: case 99:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 64:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 65:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 78:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 82:
this.$ = ["-",$$[$0]];
break;
case 84:
this.$ = ["!", [".",$$[$0]]];
break;
case 85:
this.$ = [".", $$[$0]];
break;
case 86: case 110: case 113: case 117: case 121: case 123:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 88:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 91:
this.$ = ["parentheses",$$[$0-1]];
break;
case 93:
this.$ = ["initializer_list","Object",[]];
break;
case 94:
this.$ = ["initialize_struct","Object",$$[$0-1]];
break;
case 95:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 96: case 97: case 98:
this.$ = yytext;
break;
case 101:
this.$ = ["initialize_struct_",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 107:
this.$ = [$$[$0-1],$$[$0]];
break;
case 108:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 109:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 112:
this.$ = [];
break;
case 114: case 116: case 118: case 122: case 124:
this.$ = [$$[$0]];
break;
case 115:
this.$ = ["function_call_ref",$$[$0]];
break;
case 119:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 120:
this.$ = ["else",$$[$0]];
break;
case 125:
this.$ = ["enum_statement",$$[$0-2],$$[$0]]
break;
case 126:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,9:17,12:4,13:5,16:10,18:23,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{1:[3]},{5:[1,25],6:26,9:17,12:4,13:5,16:10,18:23,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},o($Ve,[2,3]),o($Ve,[2,18]),{10:[1,27]},{24:[1,28]},{24:[1,30],30:[1,29]},{24:[1,31]},{24:[1,32]},{17:34,24:[1,33],60:35},{10:[1,36]},{25:[1,37]},{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:38,54:$Vb,55:$Vc,56:$Vd,60:24},{25:[1,42]},{25:[1,43]},{25:[1,44]},o($Vg,[2,58]),o($Vh,$Vi),{24:$Vj,25:[1,45],57:[1,46],58:$Vk,61:[1,47],62:[1,48],63:[1,49],64:[1,50],65:[1,51],66:[1,52]},o($Vg,[2,44],{39:54,84:56,86:58,87:59,60:60,89:61,90:63,24:$Vl,25:$Vm,31:$Vn,80:$Vo,85:$Vp,92:$Vq,93:$Vr}),o($Vg,[2,45]),{16:68,24:$Vs,36:$V5},o($Vg,[2,48]),{57:[1,70]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,19]),{25:[1,71]},{31:[1,72]},{24:[1,73]},{31:[1,74]},{31:[1,75]},{10:$Vt,25:[1,76],57:$Vu,58:$Vv,94:$Vw},o($Vg,[2,49]),o($Vg,[2,64]),o($Vx,[2,27]),{24:$Vl,25:$Vm,31:$Vn,39:80,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{38:[1,81]},{7:83,8:84,9:85,11:86,12:87,16:10,18:23,19:82,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{10:[1,88]},{17:34,24:$Vy,60:35},{24:$Vl,25:$Vm,31:$Vn,39:90,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{9:17,13:92,16:94,18:23,24:$V1,36:$V5,37:93,45:91,54:$Vb,55:$Vc,56:$Vd,60:24},{24:$Vl,25:$Vm,31:$Vn,39:95,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:97,27:[1,96],28:98,31:$Vn,39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr,97:$Vz},{24:$Vl,25:$Vm,31:$Vn,39:101,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($Vg,[2,52]),o($Vg,[2,53]),{24:$Vl,25:$Vm,31:$Vn,39:102,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:103,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:104,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:105,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:106,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($Vg,[2,43],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:122,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VP,[2,83]),{24:$Vl,25:$Vm,31:$Vn,60:60,86:123,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VP,[2,85]),o($VP,[2,87],{25:[1,125],88:[1,124]}),o($VQ,[2,89]),o($VQ,[2,90]),{24:$Vl,25:$Vm,31:$Vn,39:126,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VQ,[2,92]),o($VQ,[2,97],{58:$Vk}),{24:$Vl,25:$Vm,26:129,28:98,31:$Vn,32:[1,127],39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,88:$VR,89:61,90:63,91:128,92:$Vq,93:$Vr,95:130,97:$Vz},o($VQ,[2,96]),o($VQ,[2,98]),{24:[1,132]},o($Vh,$Vj),{24:$Vl,25:$Vm,31:$Vn,39:133,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:134,28:98,31:$Vn,39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr,97:$Vz},{14:135,15:136,16:137,18:138,24:$Vs,36:$V5},{10:[1,139]},{14:140,15:136,16:137,18:138,24:$Vs,36:$V5},{24:$VS,34:141,100:142},{16:147,24:$Vs,27:$VT,35:144,36:[1,145],56:$VU,96:146},{24:$Vl,25:$Vm,31:$Vn,39:149,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:106,59:[1,150],60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{17:151,24:[1,152]},{27:[1,153],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{25:[1,154]},{32:[1,155]},o($VV,[2,15]),o($VV,[2,4]),{10:[1,156]},o($VV,[2,10],{16:10,37:11,9:17,18:23,60:24,13:157,12:158,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd}),o($VW,[2,8]),o($VX,[2,127]),{10:$Vt,58:$Vk,94:$Vw},{27:[1,159],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{10:[1,160]},o($Vg,[2,34]),o($Vg,[2,35]),{17:34,24:[1,161],60:35},{27:[1,162],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($Vg,[2,41]),{27:[1,163]},o($VY,[2,114],{94:[1,164]}),{24:$Vl,25:$Vm,31:$Vn,39:165,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VZ,[2,116],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vg,[2,51],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vg,[2,54],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vg,[2,55],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vg,[2,56],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vg,[2,57],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{59:[1,166],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{24:$Vl,25:$Vm,31:$Vn,39:167,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:168,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:169,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:170,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:171,60:60,73:[1,172],80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:173,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:174,60:60,75:[1,175],80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:176,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:177,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:178,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:179,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:180,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:181,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:182,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:183,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VP,[2,82]),o($VP,[2,84]),{24:$Vl,25:$Vm,31:$Vn,60:60,86:184,87:59,89:61,90:63,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:186,27:[1,185],28:98,31:$Vn,39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr,97:$Vz},{27:[1,187],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($VQ,[2,93]),{32:[1,188],94:[1,189]},{32:[1,190]},o($V_,[2,100]),{24:[1,191]},{57:[1,192],58:[1,193]},o($Vg,[2,50],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{27:[1,194]},{32:[1,195]},{14:196,15:136,16:137,18:138,24:$Vs,32:[2,12],36:$V5},{17:197,24:$Vy,60:35},{10:[1,198]},o($Vx,[2,22]),{32:[1,199]},{32:[1,200]},{32:[2,124],94:[1,201]},{57:[1,202]},{27:[1,203]},o($Vh,$Vi,{27:[1,204]}),{27:[2,111],94:[1,205]},{24:[1,207],82:[1,206]},{16:208,24:$Vs,36:$V5},o($Vg,[2,60],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{57:[1,209]},o($Vg,[2,121]),o($Vg,$Vt,{94:$Vw}),{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:210,54:$Vb,55:$Vc,56:$Vd,60:24},{24:$Vl,25:$Vm,31:$Vn,39:211,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($VX,[2,126]),o($VV,[2,5],{16:10,37:11,18:23,60:24,8:84,9:85,11:86,12:87,7:212,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd}),{10:[1,213]},o($VW,[2,7]),{31:[1,214]},{24:$Vl,25:$Vm,31:$Vn,39:215,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($Vg,$Vt,{57:$Vu,58:$Vv,94:$Vw}),{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:216,54:$Vb,55:$Vc,56:$Vd,60:24},o($Vg,[2,42]),{24:$Vl,25:$Vm,26:217,28:98,31:$Vn,39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr,97:$Vz},o($VZ,[2,115],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o([10,25,27,32,50,57,59,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,94],[2,88]),{50:[1,218],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o([10,27,32,50,59,69,70,94],[2,66],{71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o([10,27,32,50,59,69,70,71,94],[2,67],{72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,68],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,69],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:219,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($V$,[2,70],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,71],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:220,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o([10,27,32,50,59,69,70,71,76,94],[2,72],{72:$VD,73:$VE,74:$VF,75:$VG,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,73],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,74],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V01,[2,75],{81:$VM,82:$VN,83:$VO}),o($V01,[2,76],{81:$VM,82:$VN,83:$VO}),o($VP,[2,77]),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,86]),o($VQ,[2,102]),{27:[1,221]},o($VQ,[2,91]),o($VQ,[2,94]),{88:$VR,95:222},o($VQ,[2,95]),{57:[1,223]},{24:$Vl,25:$Vm,31:$Vn,39:224,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{59:[1,225]},{25:[1,226]},{24:[1,227]},{32:[2,11]},{10:[1,228]},o($V11,[2,14]),{10:[1,229]},{10:[1,230]},{24:$VS,34:231,100:142},{92:[1,232]},{31:[1,233]},{31:[1,234]},{16:147,24:$Vs,27:$VT,35:235,36:$V5,56:$VU,96:146},{24:[1,236]},o($V21,[2,107],{58:[1,237]}),{24:[1,238]},{24:$Vl,25:$Vm,31:$Vn,39:239,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($Vx,[2,28]),{27:[1,240],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($VV,[2,6]),o($VV,[2,9]),{43:241,48:243,49:$V31,52:242},{10:[1,245],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($Vx,[2,33],{47:246,99:$V41}),o($VY,[2,113]),{24:$Vl,25:$Vm,31:$Vn,39:248,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($V$,[2,79],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V$,[2,78],{79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($VQ,[2,103]),o($V_,[2,99]),{24:$Vl,25:$Vm,31:$Vn,39:249,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},o($Vg,[2,46],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{57:[1,250]},{24:$Vl,25:$Vm,28:251,31:$Vn,39:100,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr,97:$Vz},{10:[1,252]},o($V11,[2,13]),o($Vx,[2,23]),o($Vx,[2,24]),{32:[2,123]},o($V_,[2,125]),{7:83,8:84,9:85,11:86,12:87,16:10,18:23,19:253,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{7:83,8:84,9:85,11:86,12:87,16:10,18:23,19:254,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{27:[2,110]},o($V21,[2,106]),{59:[1,255]},o($V21,[2,109]),o($Vg,[2,61],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{10:[1,256]},{32:[1,257]},{32:[2,40],53:[1,258]},o($V51,[2,38],{48:243,52:259,49:$V31}),{24:$Vl,25:$Vm,31:$Vn,39:260,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{9:17,13:92,16:94,18:23,24:$V1,36:$V5,37:93,45:261,54:$Vb,55:$Vc,56:$Vd,60:24},o($Vx,[2,32]),{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:263,46:[1,262],54:$Vb,55:$Vc,56:$Vd,60:24},o([10,27,32,50,59,94],[2,65],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($V_,[2,101],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:264,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{27:[1,265]},o($Vx,[2,21]),{32:[1,266]},{32:[1,267]},o($V21,[2,108]),o($Vx,[2,29]),o($Vx,[2,30]),{50:[1,268]},o($V51,[2,37]),{50:[1,269],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{27:[1,270]},{25:[1,271]},o($Vx,[2,120]),o($Vg,[2,47],{69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($Vx,[2,20]),o($Vx,[2,25]),o($Vx,[2,26]),{7:83,8:84,9:85,11:86,12:87,16:10,18:23,19:272,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{7:83,8:84,9:85,11:86,12:87,16:10,18:23,19:273,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24},{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:274,54:$Vb,55:$Vc,56:$Vd,60:24},{24:$Vl,25:$Vm,31:$Vn,39:275,60:60,80:$Vo,84:56,85:$Vp,86:58,87:59,89:61,90:63,92:$Vq,93:$Vr},{32:[2,39]},{51:[1,276]},o($Vx,[2,31]),{27:[1,277],69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{10:[1,278]},{16:41,18:23,24:$V1,31:$Vf,36:$V5,37:40,40:279,54:$Vb,55:$Vc,56:$Vd,60:24},o([32,49,53],[2,36]),{47:280,99:$V41},o($Vx,[2,119])],
defaultActions: {25:[2,1],196:[2,11],231:[2,123],235:[2,110],272:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 92
break;
case 4:return 93
break;
case 5:return 29
break;
case 6:return 23
break;
case 7:return "if"
break;
case 8:return 41
break;
case 9:return "else"
break;
case 10:return 33
break;
case 11:return "return"
break;
case 12:return "void"
break;
case 13:return "case"
break;
case 14:return "printf"
break;
case 15:return "while"
break;
case 16:return "break"
break;
case 17:return "default"
break;
case 18:return "const"
break;
case 19:return "struct"
break;
case 20:return "switch"
break;
case 21:return "continue"
break;
case 22:return "for"
break;
case 23:return 94
break;
case 24:return 10
break;
case 25:return 88
break;
case 26:return 50
break;
case 27:return 71
break;
case 28:return 97
break;
case 29:return 70
break;
case 30:return '|'
break;
case 31:return 78
break;
case 32:return 85
break;
case 33:return 74
break;
case 34:return '>>'
break;
case 35:return 75
break;
case 36:return 72
break;
case 37:return '<<'
break;
case 38:return 73
break;
case 39:return 77
break;
case 40:return 57
break;
case 41:return 65
break;
case 42:return 82
break;
case 43:return 81
break;
case 44:return 66
break;
case 45:return 83
break;
case 46:return 64
break;
case 47:return 62
break;
case 48:return 80
break;
case 49:return 61
break;
case 50:return 63
break;
case 51:return 79
break;
case 52:return 76
break;
case 53:return 69
break;
case 54:return 31
break;
case 55:return 32
break;
case 56:return 58
break;
case 57:return 59
break;
case 58:return 25
break;
case 59:return 27
break;
case 60:return 24
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:typedef\b)/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}