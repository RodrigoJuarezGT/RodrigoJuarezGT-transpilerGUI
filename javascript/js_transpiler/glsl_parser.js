/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var glsl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,18],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,20],$Vc=[1,21],$Vd=[5,21,26,27,32,33,37,39,41,42,44,46,54,55],$Ve=[5,21,26,27,32,33,35,37,39,41,42,44,46,51,54,55],$Vf=[1,35],$Vg=[13,30],$Vh=[2,87],$Vi=[2,88],$Vj=[1,49],$Vk=[1,60],$Vl=[1,58],$Vm=[1,61],$Vn=[1,51],$Vo=[1,53],$Vp=[1,62],$Vq=[1,63],$Vr=[1,65],$Vs=[2,107],$Vt=[1,71],$Vu=[1,72],$Vv=[1,70],$Vw=[1,73],$Vx=[1,91],$Vy=[1,99],$Vz=[1,100],$VA=[1,101],$VB=[1,102],$VC=[1,103],$VD=[1,104],$VE=[1,105],$VF=[1,106],$VG=[1,107],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,67,68,69,70,71,72,73,74,75,76,90],$VN=[5,13,21,25,26,27,28,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,90],$VO=[2,97],$VP=[1,133],$VQ=[1,129],$VR=[1,130],$VS=[1,131],$VT=[1,137],$VU=[35,51],$VV=[5,21,26,27,32,33,35,37,39,41,42,44,46,51,54,55,93],$VW=[30,35],$VX=[30,35,90],$VY=[5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,68,70,71,90],$VZ=[5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,67,68,69,70,71,90],$V_=[5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,67,68,69,70,71,72,73,90],$V$=[30,90],$V01=[1,215],$V11=[1,218],$V21=[35,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statement":8,"struct_statements":9,"struct_statement":10,"type":11,"identifiers":12,";":13,"statements":14,"access_modifier":15,"public":16,"private":17,"initialize_var1":18,"initialize_var_":19,"initialize_var":20,"IDENTIFIER":21,"=":22,"e":23,"[":24,"]":25,"#define":26,"#DEFINE":27,"(":28,"exprs":29,")":30,"expr":31,"DEFINE":32,"struct":33,"{":34,"}":35,"parameters":36,"void":37,"statement_with_semicolon":38,"while":39,"bracket_statements":40,"do":41,"switch":42,"case_statements":43,"for":44,"statement_with_semicolon_":45,"if":46,"elif":47,"case_statement":48,"case":49,":":50,"break":51,"case_statements_":52,"default":53,"return":54,"const":55,"access_array":56,"++":57,"--":58,"+=":59,"-=":60,"*=":61,"/=":62,"?":63,"||":64,"&&":65,"<=":66,"<":67,">=":68,">":69,"==":70,"!=":71,"+":72,"-":73,"%":74,"*":75,"/":76,"not_expr":77,"!":78,"dot_expr":79,"parentheses_expr":80,".":81,"function_call":82,"parentheses_expr_":83,"NUMBER":84,"STRING_LITERAL":85,"parameter":86,"out":87,"inout":88,"in":89,",":90,"&":91,"types":92,"else":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",16:"public",17:"private",21:"IDENTIFIER",22:"=",24:"[",25:"]",26:"#define",27:"#DEFINE",28:"(",30:")",32:"DEFINE",33:"struct",34:"{",35:"}",37:"void",39:"while",41:"do",42:"switch",44:"for",46:"if",49:"case",50:":",51:"break",53:"default",54:"return",55:"const",57:"++",58:"--",59:"+=",60:"-=",61:"*=",62:"/=",63:"?",64:"||",65:"&&",66:"<=",67:"<",68:">=",69:">",70:"==",71:"!=",72:"+",73:"-",74:"%",75:"*",76:"/",78:"!",81:".",84:"NUMBER",85:"STRING_LITERAL",87:"out",88:"inout",89:"in",90:",",91:"&",93:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[10,3],[14,1],[15,1],[15,1],[6,1],[6,2],[18,1],[20,1],[19,4],[19,6],[8,1],[8,8],[8,3],[8,6],[8,8],[8,8],[8,2],[8,5],[8,7],[8,7],[8,9],[8,6],[8,5],[45,1],[45,1],[48,6],[52,2],[52,1],[43,4],[43,1],[38,3],[38,4],[38,2],[38,5],[38,7],[38,2],[38,2],[38,3],[38,3],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[23,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,4],[23,4],[23,3],[23,3],[23,2],[23,1],[77,2],[77,1],[79,3],[79,1],[56,4],[80,1],[80,1],[80,3],[80,1],[83,2],[83,3],[83,1],[83,1],[83,1],[82,3],[82,4],[11,1],[11,1],[86,3],[86,3],[86,3],[86,2],[86,4],[86,3],[36,3],[36,1],[36,0],[29,3],[29,1],[31,2],[31,1],[92,3],[92,1],[47,7],[47,2],[12,3],[12,1],[40,3],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 5: case 7: case 35: case 74: case 96:
this.$ =
 [$$[$0]];
break;
case 4: case 6: case 34:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 8:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 9:
this.$ = ["statements",$$[$0]]
break;
case 13:
this.$ = ["semicolon",$$[$0-1]]
break;
case 14:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 15:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 16:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 17:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 19:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["semicolon",["initialize_constant","int","a",[".",["1"]]]];
break;
case 21:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 22:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 24: case 109:
this.$ = ["semicolon",$$[$0-1]];
break;
case 25:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 27:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 30:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 36:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 38: case 85:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 39: case 86:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 40:
this.$ = ["return",$$[$0]];
break;
case 41:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 43:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 44:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 45: case 46:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 47: case 48:
this.$ = [$$[$0],$$[$0-1]];
break;
case 49: case 50: case 51: case 52: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 67: case 68:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 65:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 66:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 69:
this.$ = ["-",$$[$0]];
break;
case 71:
this.$ = ["!", [".",$$[$0]]];
break;
case 72:
this.$ = [".", $$[$0]];
break;
case 73: case 95: case 98: case 102: case 106:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 75:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 78:
this.$ = ["parentheses",$$[$0-1]];
break;
case 80:
this.$ = ["initializer_list","Object",[]];
break;
case 81:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 82: case 83: case 84:
this.$ = yytext;
break;
case 89:
this.$ = ["out_parameter",$$[$0-1],$$[$0]]
break;
case 90:
this.$ = ["ref_parameter",$$[$0-1],$$[$0]]
break;
case 91:
this.$ = ["in_parameter",$$[$0-1],$$[$0]]
break;
case 92:
this.$ = [$$[$0-1],$$[$0]];
break;
case 93:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 94:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 97:
this.$ = [];
break;
case 99: case 101: case 103: case 107:
this.$ = [$$[$0]];
break;
case 100:
this.$ = ["function_call_ref",$$[$0]];
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["else",$$[$0]];
break;
case 108:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,8:4,11:10,18:5,19:17,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{1:[3]},{5:[1,23],6:24,8:4,11:10,18:5,19:17,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},o($Vd,[2,3]),o($Vd,[2,12]),{13:[1,25]},o($Ve,[2,18]),{21:[1,26]},{21:[1,27]},{21:[1,28]},{12:31,21:[1,29],56:30},{13:[1,32]},{28:[1,33]},{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:34,54:$Vb,55:$Vc,56:22},{28:[1,38]},{28:[1,39]},{28:[1,40]},o($Vg,[2,14]),{21:$Vh},{21:$Vi,22:[1,42],24:$Vj,28:[1,41],57:[1,43],58:[1,44],59:[1,45],60:[1,46],61:[1,47],62:[1,48]},{21:$Vk,23:50,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{11:64,21:$Vr,37:$V5},{22:[1,66]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,13]),{28:[1,67]},{21:$Vk,23:68,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{34:[1,69]},{13:$Vs,22:$Vt,24:$Vu,28:$Vv,90:$Vw},o($Vg,[2,43]),o($Vg,[2,44]),o($Ve,[2,24]),{21:$Vk,23:74,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{39:[1,75]},{7:77,8:78,11:79,14:76,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{13:[1,80]},{12:31,21:[1,81],56:30},{21:$Vk,23:82,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{11:86,18:84,19:17,21:$V0,37:$V5,38:85,45:83,54:$Vb,55:$Vc,56:22},{21:$Vk,23:87,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:92,28:$Vl,29:89,30:[1,88],31:90,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},{21:$Vk,23:93,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($Vg,[2,47]),o($Vg,[2,48]),{21:$Vk,23:94,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:95,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:96,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:97,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:98,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($Vg,[2,40],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{21:$Vk,23:113,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VM,[2,70]),{21:$Vk,28:$Vl,34:$Vm,56:56,79:114,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VM,[2,72]),o($VM,[2,74],{28:[1,116],81:[1,115]}),o($VN,[2,76]),o($VN,[2,77]),{21:$Vk,23:117,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VN,[2,79]),o($VN,[2,83],{24:$Vj}),{21:$Vk,23:92,28:$Vl,29:119,31:90,34:$Vm,35:[1,118],56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},o($VN,[2,82]),o($VN,[2,84]),{21:[1,120]},{21:$Vi},{21:$Vk,23:121,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:92,28:$Vl,29:122,31:90,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},o($Ve,[2,20],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{9:123,10:124,11:125,21:$Vr,37:$V5},{11:132,21:$Vr,30:$VO,36:126,37:[1,127],55:$VP,86:128,87:$VQ,88:$VR,89:$VS},{21:$Vk,23:134,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:98,25:[1,135],28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{12:136,21:$VT},{30:[1,138],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{28:[1,139]},{35:[1,140]},o($VU,[2,9]),o($VU,[2,5],{38:11,56:22,8:78,11:79,7:141,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc}),{12:31,21:[1,142],56:30},o($VV,[2,109]),{13:$Vs,24:$Vj,90:$Vw},{30:[1,143],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{13:[1,144]},o($Vg,[2,31]),o($Vg,[2,32]),{12:31,21:[1,145],56:30},{30:[1,146],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($Vg,[2,38]),{30:[1,147]},o($VW,[2,99],{90:[1,148]}),{21:$Vk,23:149,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VX,[2,101],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,46],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,49],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,50],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,51],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Vg,[2,52],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{25:[1,150],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{21:$Vk,23:151,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:152,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:153,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:154,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:155,28:$Vl,34:$Vm,56:56,67:[1,156],73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:157,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:158,28:$Vl,34:$Vm,56:56,69:[1,159],73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:160,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:161,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:162,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:163,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:164,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:165,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:166,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VM,[2,69]),o($VM,[2,71]),{21:$Vk,28:$Vl,34:$Vm,56:56,79:167,80:55,82:57,83:59,84:$Vp,85:$Vq},{21:$Vk,23:92,28:$Vl,29:169,30:[1,168],31:90,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},{30:[1,170],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($VN,[2,80]),{35:[1,171]},{22:[1,172],24:[1,173]},o($Vg,[2,45],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{30:[1,174]},{35:[1,175]},{9:176,10:124,11:125,21:$Vr,35:[2,7],37:$V5},{12:177,21:$VT},{30:[1,178]},{21:$Vh,30:[1,179]},{30:[2,96],90:[1,180]},{11:181,21:$Vr,37:$V5},{11:182,21:$Vr,37:$V5},{11:183,21:$Vr,37:$V5},{21:[1,184]},{11:185,21:$Vr,37:$V5},o($Vg,[2,16],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{22:[1,186]},o($Vg,[2,106]),o($Vg,$Vs,{90:$Vw}),{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:187,54:$Vb,55:$Vc,56:22},{21:$Vk,23:188,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VV,[2,108]),o($VU,[2,4]),{13:$Vs,24:$Vj,28:$Vv,90:$Vw},{34:[1,189]},{21:$Vk,23:190,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($Vg,$Vs,{22:$Vt,24:$Vu,90:$Vw}),{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:191,54:$Vb,55:$Vc,56:22},o($Vg,[2,39]),{21:$Vk,23:92,28:$Vl,29:192,31:90,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},o($VX,[2,100],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o([5,13,21,22,25,26,27,28,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,66,67,68,69,70,71,72,73,74,75,76,81,90],[2,75]),{50:[1,193],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o([5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,90],[2,54],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o([5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,63,64,65,90],[2,55],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VY,[2,56],{67:$VC,69:$VE,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VZ,[2,57],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{21:$Vk,23:194,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VY,[2,58],{67:$VC,69:$VE,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VZ,[2,59],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{21:$Vk,23:195,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VY,[2,60],{67:$VC,69:$VE,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VY,[2,61],{67:$VC,69:$VE,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V_,[2,62],{74:$VJ,75:$VK,76:$VL}),o($V_,[2,63],{74:$VJ,75:$VK,76:$VL}),o($VM,[2,64]),o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,73]),o($VN,[2,85]),{30:[1,196]},o($VN,[2,78]),o($VN,[2,81]),{21:$Vk,23:197,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{25:[1,198]},{28:[1,199]},{13:[1,200]},{35:[2,6]},{13:[1,201]},{34:[1,202]},{34:[1,203]},{11:132,21:$Vr,30:$VO,36:204,37:$V5,55:$VP,86:128,87:$VQ,88:$VR,89:$VS},{21:[1,205]},{21:[1,206]},{21:[1,207]},o($V$,[2,92],{24:[1,208]}),{21:[1,209]},{21:$Vk,23:210,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($Ve,[2,25]),{30:[1,211],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{43:212,48:214,49:$V01,52:213},{13:[1,216],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},o($Ve,[2,30],{47:217,93:$V11}),o($VW,[2,98]),{21:$Vk,23:219,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},o($VZ,[2,66],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VZ,[2,65],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($VN,[2,86]),o($Vg,[2,41],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{22:[1,220]},{21:$Vk,23:92,28:$Vl,31:221,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq,91:$Vx},o($Ve,[2,21]),o([21,35,37],[2,8]),{7:77,8:78,11:79,14:222,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{7:77,8:78,11:79,14:223,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{30:[2,95]},o($V$,[2,89]),o($V$,[2,90]),o($V$,[2,91]),{25:[1,224]},o($V$,[2,94]),o($Vg,[2,17],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{13:[1,225]},{35:[1,226]},{35:[2,37],53:[1,227]},o($V21,[2,35],{48:214,52:228,49:$V01}),{21:$Vk,23:229,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{11:86,18:84,19:17,21:$V0,37:$V5,38:85,45:230,54:$Vb,55:$Vc,56:22},o($Ve,[2,29]),{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:232,46:[1,231],54:$Vb,55:$Vc,56:22},o([5,13,21,25,26,27,30,32,33,35,37,39,41,42,44,46,50,51,54,55,90],[2,53],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{21:$Vk,23:233,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{30:[1,234]},{35:[1,235]},{35:[1,236]},o($V$,[2,93]),o($Ve,[2,26]),o($Ve,[2,27]),{50:[1,237]},o($V21,[2,34]),{50:[1,238],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{30:[1,239]},{28:[1,240]},o($Ve,[2,105]),o($Vg,[2,42],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($Ve,[2,19]),o($Ve,[2,22]),o($Ve,[2,23]),{7:77,8:78,11:79,14:241,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{7:77,8:78,11:79,14:242,21:$V0,26:$V1,27:$V2,32:$V3,33:$V4,37:$V5,38:11,39:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:22},{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:243,54:$Vb,55:$Vc,56:22},{21:$Vk,23:244,28:$Vl,34:$Vm,56:56,73:$Vn,77:52,78:$Vo,79:54,80:55,82:57,83:59,84:$Vp,85:$Vq},{35:[2,36]},{51:[1,245]},o($Ve,[2,28]),{30:[1,246],63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL},{13:[1,247]},{11:37,21:$V0,34:$Vf,37:$V5,38:36,40:248,54:$Vb,55:$Vc,56:22},o([35,49,53],[2,33]),{47:249,93:$V11},o($Ve,[2,104])],
defaultActions: {18:[2,87],23:[2,1],65:[2,88],176:[2,6],204:[2,95],241:[2,36]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 84
break;
case 4:return 85
break;
case 5:return 26
break;
case 6:return 27
break;
case 7:return "if"
break;
case 8:return 41
break;
case 9:return "else"
break;
case 10:return "return"
break;
case 11:return "inout"
break;
case 12:return 89
break;
case 13:return 87
break;
case 14:return "void"
break;
case 15:return "case"
break;
case 16:return "printf"
break;
case 17:return "while"
break;
case 18:return "break"
break;
case 19:return "default"
break;
case 20:return "const"
break;
case 21:return "struct"
break;
case 22:return "switch"
break;
case 23:return "for"
break;
case 24:return 90
break;
case 25:return 13
break;
case 26:return 81
break;
case 27:return 50
break;
case 28:return 65
break;
case 29:return 91
break;
case 30:return 64
break;
case 31:return 71
break;
case 32:return 78
break;
case 33:return 68
break;
case 34:return 69
break;
case 35:return 66
break;
case 36:return 67
break;
case 37:return 70
break;
case 38:return 22
break;
case 39:return 61
break;
case 40:return 75
break;
case 41:return 74
break;
case 42:return 62
break;
case 43:return 76
break;
case 44:return 60
break;
case 45:return 58
break;
case 46:return 73
break;
case 47:return 57
break;
case 48:return 59
break;
case 49:return 72
break;
case 50:return '^'
break;
case 51:return 63
break;
case 52:return 34
break;
case 53:return 35
break;
case 54:return 24
break;
case 55:return 25
break;
case 56:return 28
break;
case 57:return 30
break;
case 58:return 21
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:#DEFINE\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:inout\b)/,/^(?:in\b)/,/^(?:out\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = glsl_parser;
exports.Parser = glsl_parser.Parser;
exports.parse = function () { return glsl_parser.parse.apply(glsl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}