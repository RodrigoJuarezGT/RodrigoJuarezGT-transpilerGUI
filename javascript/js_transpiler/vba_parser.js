/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vba_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,28],$V2=[1,8],$V3=[1,9],$V4=[1,11],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[1,25],$Vb=[1,26],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[5,25,46,48,50,52,57,125,126],$Vi=[5,19,20,23,25,38,40,46,47,48,50,51,52,54,57,60,63,75,76,89,90,91,92,93,125,126],$Vj=[2,148],$Vk=[1,46],$Vl=[1,67],$Vm=[1,58],$Vn=[1,61],$Vo=[1,68],$Vp=[1,62],$Vq=[1,60],$Vr=[1,66],$Vs=[2,15],$Vt=[1,73],$Vu=[1,76],$Vv=[2,168],$Vw=[1,88],$Vx=[1,100],$Vy=[1,116],$Vz=[1,118],$VA=[1,115],$VB=[1,117],$VC=[1,112],$VD=[1,111],$VE=[1,113],$VF=[1,119],$VG=[1,120],$VH=[1,121],$VI=[1,122],$VJ=[1,109],$VK=[1,110],$VL=[1,114],$VM=[1,123],$VN=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,101,104,105,106,107,108,114,125,126],$VO=[1,125],$VP=[5,11,19,20,23,25,27,29,38,40,41,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,97,101,104,105,106,107,108,114,125,126],$VQ=[2,146],$VR=[1,150],$VS=[25,43,114],$VT=[25,43,101,114],$VU=[1,157],$VV=[2,155],$VW=[1,156],$VX=[5,11,19,20,23,25,38,40,46,47,48,50,51,52,54,57,60,63,75,76,89,90,91,92,93,125,126],$VY=[1,219],$VZ=[1,220],$V_=[5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,79,80,89,90,91,92,93,101,104,105,106,114,125,126],$V$=[5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,89,90,91,92,93,101,104,105,106,107,114,125,126],$V01=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,89,90,91,92,93,101,104,105,106,107,114,125,126],$V11=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,82,83,89,90,91,92,93,101,104,105,106,107,114,125,126],$V21=[2,137],$V31=[43,101],$V41=[1,233],$V51=[1,242],$V61=[1,262],$V71=[5,11,19,20,23,25,27,29,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,97,101,104,105,106,107,108,114,125,126],$V81=[19,20,25],$V91=[1,377],$Va1=[25,101];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"0":94,"error":2,"expressions":3,"statements_":4,"EOF":5,"statements_with_vars":6,"initialize_var_":7,"statements_without_vars":8,"statement":9,"initialize_var1":10,";":11,"initialize_vars":12,"initialize_var":13,"class_statements":14,"class_statements_":15,"statements":16,"class_statement":17,"access_modifier":18,"public":19,"private":20,"class_":21,"namespace":22,"IDENTIFIER":23,"{":24,"}":25,"class":26,"<":27,"types":28,">":29,"abstract":30,"interface":31,"enum":32,"identifiers":33,"extends":34,"implements":35,"top_level_statement":36,"top_level_statements":37,"import":38,"statement_with_semicolon":39,"Function":40,"(":41,"parameters":42,")":43,"As":44,"type":45,"End":46,"Do":47,"While":48,"e":49,"Loop":50,"Select":51,"Case":52,"case_statements":53,"For":54,"Each":55,"In":56,"Next":57,"=":58,"To":59,"If":60,"Then":61,"elif":62,"Sub":63,"static":64,"async":65,"statement_with_semicolon_":66,"case_statement":67,"case_statements_":68,"operator":69,"OPERATOR":70,"+=":71,"-=":72,"*=":73,"/=":74,"++":75,"--":76,"<=":77,">=":78,"&&":79,"||":80,"==":81,"+":82,"-":83,"*":84,"/":85,"|=":86,"&=":87,"!":88,"yield":89,"return":90,"throw":91,"final":92,"Dim":93,"access_array":95,"%=":96,".":97,"dot_expr":98,"exprs":99,"key_values":100,",":101,"key_value":102,"STRING_LITERAL":103,"?":104,":":105,"is":106,"!=":107,"%":108,"initializer_list":109,"not_expr":110,"await":111,"parentheses_expr":112,"[":113,"]":114,"new":115,"Dictionary":116,"named_parameters":117,"NUMBER":118,"square_brackets":119,"parameter":120,"ByRef":121,"expr":122,"ref":123,"named_parameter":124,"ElseIf":125,"Else":126,"add":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",19:"public",20:"private",22:"namespace",23:"IDENTIFIER",24:"{",25:"}",26:"class",27:"<",29:">",30:"abstract",31:"interface",32:"enum",34:"extends",35:"implements",38:"import",40:"Function",41:"(",43:")",44:"As",46:"End",47:"Do",48:"While",50:"Loop",51:"Select",52:"Case",54:"For",55:"Each",56:"In",57:"Next",58:"=",59:"To",60:"If",61:"Then",63:"Sub",64:"static",65:"async",69:"operator",71:"+=",72:"-=",73:"*=",74:"/=",75:"++",76:"--",77:"<=",78:">=",79:"&&",80:"||",81:"==",82:"+",83:"-",84:"*",85:"/",86:"|=",87:"&=",88:"!",89:"yield",90:"return",91:"throw",92:"final",93:"Dim",94:"0",96:"%=",97:".",101:",",103:"STRING_LITERAL",104:"?",105:":",106:"is",107:"!=",108:"%",111:"await",113:"[",114:"]",115:"new",116:"Dictionary",118:"NUMBER",121:"ByRef",123:"ref",125:"ElseIf",126:"Else"},
productions_: [0,[3,2],[4,1],[4,1],[4,2],[8,2],[8,1],[6,3],[6,1],[12,3],[12,1],[14,1],[16,1],[15,2],[15,1],[18,1],[18,1],[21,6],[21,9],[21,6],[21,7],[21,6],[21,9],[21,6],[21,8],[21,8],[36,1],[36,1],[37,2],[37,1],[9,2],[9,1],[9,10],[9,1],[9,7],[9,6],[9,8],[9,7],[9,9],[9,7],[9,8],[9,6],[9,7],[9,8],[9,11],[66,1],[66,1],[67,3],[68,2],[68,1],[53,1],[17,6],[17,4],[17,7],[17,8],[17,7],[17,10],[17,13],[17,9],[17,12],[17,11],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[39,3],[39,2],[39,2],[39,5],[39,3],[39,9],[39,2],[39,3],[39,3],[39,2],[39,2],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[10,1],[13,1],[7,6],[7,4],[100,3],[100,1],[102,5],[49,5],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,4],[49,4],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[49,2],[49,1],[110,2],[110,2],[110,1],[98,3],[98,3],[98,1],[95,4],[109,4],[109,5],[112,3],[112,10],[112,1],[112,3],[112,4],[112,4],[112,4],[112,5],[112,1],[112,1],[112,1],[45,1],[119,3],[119,2],[120,4],[120,3],[42,3],[42,1],[42,0],[99,3],[99,1],[122,2],[122,1],[117,3],[117,1],[124,3],[28,3],[28,1],[62,6],[62,2],[33,3],[33,1],[127,3],[127,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 3:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 4:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],["statements",$$[$0]]]]
break;
case 5: case 28:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 6: case 10: case 14: case 29: case 49: case 133: case 154:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 9: case 105: case 160:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 11:
this.$ = ["class_statements",$$[$0]]
break;
case 12:
this.$ = ["statements",$$[$0]]
break;
case 13: case 48:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 17: case 19: case 21:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 18:
this.$ = ["generic_class",$$[$0-8],$$[$0-6],$$[$0-1],$$[$0-4]];
break;
case 20:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 22:
this.$ = ["generic_interface",$$[$0-8],$$[$0-6],$$[$0-1],$$[$0-4]];
break;
case 23:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["semicolon",$$[$0]]
break;
case 30:
this.$ = ["import",$$[$0]];
break;
case 31:
this.$ = ["semicolon",$$[$0]];
break;
case 32:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-2]];
break;
case 34:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 35:
this.$ = ["do_while",$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = ["switch",$$[$0-4],$$[$0-2]];
break;
case 37:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 38:
this.$ = ["foreach_in_range","Object",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 39: case 40:
this.$ = ["if",$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 41: case 42:
this.$ = ["if",$$[$0-4],$$[$0-2]];
break;
case 43:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 47:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 51:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 52:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 53:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 54:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 55:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 56:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 57:
this.$ = ["generic_static_method",$$[$0-12],$$[$0-10],$$[$0-9],$$[$0-4],$$[$0-1],$$[$0-7]];
break;
case 58:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 59:
this.$ = ["generic_instance_method",$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-4],$$[$0-1],$$[$0-7]];
break;
case 60:
this.$ = ["static_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 81:
this.$ = ["yield",$$[$0]];
break;
case 82:
this.$ = ["return",$$[$0]];
break;
case 83:
this.$ = ["throw",$$[$0]];
break;
case 84:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 85:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 86:
this.$ = ["set_array_size",$$[$0],$$[$0-7],$$[$0-3]];
break;
case 87:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 88: case 89:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 90: case 91:
this.$ = [$$[$0],$$[$0-1]];
break;
case 92: case 93:
this.$ = [$$[$0-1],$$[$0]];
break;
case 94: case 95: case 96: case 97: case 98: case 99: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 120: case 121: case 122: case 123: case 124:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 100:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 101:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 102:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 103:
this.$ = [$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 104:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 106: case 157: case 159: case 161: case 164: case 168: case 170:
this.$ = [$$[$0]];
break;
case 107:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 108:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 118:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 119:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 126:
this.$ = ["-",$$[$0]];
break;
case 128:
this.$ = ["!", [".",$$[$0]]];
break;
case 129:
this.$ = ["await", [".",$$[$0]]]
break;
case 130:
this.$ = [".", $$[$0]];
break;
case 131: case 132: case 153: case 156: case 163: case 167: case 169:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 134:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 135:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 136:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 137:
this.$= ["parentheses",$$[$0-1]];
break;
case 138:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 140:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 141: case 142:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 143:
this.$= ["new",$$[$0-2],[]];
break;
case 144:
this.$= ["new",$$[$0-3],$$[$0-1]];
break;
case 145: case 146: case 147:
this.$ = yytext;
break;
case 149:
this.$ = $$[$0-2].concat(["[]"]);
break;
case 150:
this.$ = ["[]"]
break;
case 151:
this.$ = ["ref_parameter",$$[$0],$$[$0-2]]
break;
case 152:
this.$ = [$$[$0],$$[$0-2]];
break;
case 155:
this.$= []
break;
case 158:
this.$ = ["function_call_ref",$$[$0]];
break;
case 162:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 165:
this.$ = ["elif",$$[$0-2],$$[$0],$$[$01]]
break;
case 166:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{1:[3]},{5:[1,29]},o($Vh,[2,2]),o($Vh,[2,3],{6:3,7:4,8:5,45:6,9:7,39:10,21:12,95:24,18:27,4:30,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg}),o($Vh,[2,8],{45:6,39:10,21:12,95:24,18:27,10:31,9:32,7:33,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg}),{23:[1,34],33:35},o($Vi,[2,6]),{23:$Vj,58:[1,36],71:[1,39],72:[1,41],73:[1,42],74:[1,43],75:[1,37],76:[1,38],86:[1,40],96:[1,44],97:[1,45],113:$Vk},{23:[1,47]},o($Vi,[2,31]),{23:[1,48]},o($Vi,[2,33]),{4:51,6:3,7:4,8:5,9:7,16:50,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,48:[1,49],51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{52:[1,52]},{23:[1,54],55:[1,53]},{23:$Vl,41:[1,56],49:55,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:[1,69]},o([22,26,30,31,32],$Vs,{64:[1,70]}),{90:[1,71]},{23:$Vl,41:$Vt,49:72,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:74,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vu,45:75},{23:[1,77]},{58:[1,78]},{23:[1,79]},{23:[1,80]},{22:[1,81],26:[1,82],30:[1,83],31:[1,84],32:[1,85]},o([22,23,26,30,31,32,64],[2,16]),{1:[2,1]},o($Vh,[2,4]),{11:[1,86]},o($Vi,[2,5]),{11:[2,101]},o($Vi,$Vv,{58:[1,87],101:$Vw}),o($Vi,[2,87]),{23:$Vl,41:$Vt,49:89,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($Vi,[2,90]),o($Vi,[2,91]),{23:$Vl,41:$Vt,49:90,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:91,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:92,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:93,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:94,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:95,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,95:65,98:96,103:$Vo,109:97,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:101,83:$Vm,88:$Vn,95:65,98:63,99:98,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr,122:99,123:$Vx},o($Vi,[2,30]),{41:[1,102]},{41:[1,103]},{48:[1,104]},o([25,46,48,50,52,57,125,126],[2,12]),{41:[1,105]},{23:[1,106]},{58:[1,107]},{27:$Vy,29:$Vz,61:[1,108],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,49:124,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($VN,[2,125],{97:$VO}),{23:$Vl,41:$Vt,49:126,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($VN,[2,127]),{23:[1,129],45:127,116:[1,128]},{23:$Vl,41:$Vt,95:65,98:130,103:$Vo,109:97,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,95:65,98:131,103:$Vo,109:97,112:64,115:$Vq,118:$Vr},o($VN,[2,130]),o($VN,[2,133],{41:[1,133],97:[1,132]}),o($VP,[2,139]),o($VP,[2,145]),o($VP,$VQ,{113:$Vk}),o($VP,[2,147]),{41:[1,134]},{65:[1,135]},{23:$Vl,41:$Vt,49:136,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($Vi,[2,82],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$Vl,41:$Vt,49:137,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($Vi,[2,83],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:[1,138],33:139},o([5,19,20,23,25,29,38,40,43,46,47,48,50,51,52,54,57,60,63,69,75,76,89,90,91,92,93,101,125,126],$Vj),{41:[1,140]},{23:$Vl,41:$Vt,49:141,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($Vi,[2,92]),o($Vi,[2,93]),{23:[1,142]},{23:[1,143]},{26:[1,144]},{23:[1,145]},{23:[1,146]},o($Vh,[2,7]),{23:$Vl,24:[1,147],41:$Vt,49:148,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$VR,33:149},o($Vi,[2,89],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,94],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,95],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,96],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,97],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,98],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,99],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,100]),{97:$VO},{114:[1,151]},o($VS,[2,157],{101:[1,152]}),{23:$Vl,41:$Vt,49:153,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($VT,[2,159],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$VU,42:154,43:$VV,120:155,121:$VW},{23:$Vl,41:$Vt,49:158,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{41:[1,159]},{23:$Vl,41:$Vt,49:160,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{56:[1,161]},{23:[1,162]},{4:51,6:3,7:4,8:5,9:7,16:163,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{23:$Vl,41:$Vt,49:164,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:165,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:166,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:167,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:168,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:169,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:170,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,27:[1,172],41:$Vt,49:171,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:173,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,29:[1,175],41:$Vt,49:174,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:176,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:177,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:178,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:179,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$Vl,41:$Vt,49:180,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{27:$Vy,29:$Vz,43:[1,181],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,95:65,98:182,103:$Vo,109:97,112:64,115:$Vq,118:$Vr},o($VN,[2,126]),{24:[1,183]},{27:[1,184]},{24:$Vj,41:[1,185]},o($VN,[2,128]),o($VN,[2,129]),{23:$Vl,41:$Vt,95:65,98:186,103:$Vo,109:97,112:64,115:$Vq,118:$Vr},{23:[1,191],41:$Vt,43:[1,187],49:101,83:$Vm,88:$Vn,95:65,98:63,99:189,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,117:188,118:$Vr,122:99,123:$Vx,124:190},{23:$VU,42:192,43:$VV,120:155,121:$VW},{23:$Vu,45:193},o($Vi,[2,81],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{27:$Vy,29:$Vz,43:[1,194],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,$Vv,{58:[1,195],101:$Vw}),o($Vi,[2,85]),{94:[1,196]},o($Vi,[2,88],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{24:[1,197]},{24:[1,199],27:[1,198],34:[1,200],35:[1,201]},{23:[1,202]},{24:[1,203],27:[1,204]},{24:[1,205]},{23:$Vl,41:$Vt,49:101,83:$Vm,88:$Vn,95:65,98:63,99:206,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr,122:99,123:$Vx},o($VX,[2,104],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),o($Vi,[2,167]),o($Vi,$Vv,{101:$Vw}),o([5,11,19,20,23,25,27,29,38,40,41,43,46,47,48,50,51,52,54,57,58,60,61,63,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,97,101,104,105,106,107,108,114,125,126],[2,134]),{23:$Vl,41:$Vt,49:101,83:$Vm,88:$Vn,95:65,98:63,99:207,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr,122:99,123:$Vx},o($VT,[2,158],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{43:[1,208]},{43:[2,154],101:[1,209]},{23:[1,210]},{44:[1,211]},{27:$Vy,29:$Vz,43:[1,212],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:$Vl,41:$Vt,49:213,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{27:$Vy,29:$Vz,43:[1,214],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{23:[1,215]},{59:[1,216]},{46:[1,218],62:217,125:$VY,126:$VZ},{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,105:[1,221],106:$VK,107:$VL,108:$VM},o($V_,[2,109],{27:$Vy,29:$Vz,77:$VA,78:$VB,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,107:$VL,108:$VM}),o($V_,[2,110],{27:$Vy,29:$Vz,77:$VA,78:$VB,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,107:$VL,108:$VM}),o($V_,[2,111],{27:$Vy,29:$Vz,77:$VA,78:$VB,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,107:$VL,108:$VM}),o($V$,[2,112],{27:$Vy,29:$Vz,82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),o($V$,[2,113],{27:$Vy,29:$Vz,82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),o($V$,[2,114],{27:$Vy,29:$Vz,82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),o($V01,[2,115],{82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),{23:$Vl,41:$Vt,49:222,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($V$,[2,116],{27:$Vy,29:$Vz,82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),o($V01,[2,117],{82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),{23:$Vl,41:$Vt,49:223,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($V11,[2,120],{84:$VH,85:$VI,108:$VM}),o($V11,[2,121],{84:$VH,85:$VI,108:$VM}),o($VN,[2,122]),o($VN,[2,123]),o($VN,[2,124]),o([27,29,41,61,77,78,79,80,81,82,83,84,85,97,104,106,107,108],$V21,{6:3,7:4,8:5,45:6,9:7,39:10,21:12,95:24,18:27,4:51,16:224,19:$V0,20:$V1,23:$V2,38:$V3,40:$V4,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg}),o($VN,[2,131]),{23:$Vl,25:[1,225],41:$Vt,49:101,83:$Vm,88:$Vn,95:65,98:63,99:226,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr,122:99,123:$Vx},{23:$Vu,45:227},{23:$Vl,41:$Vt,43:[1,228],49:101,83:$Vm,88:$Vn,95:65,98:63,99:229,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr,122:99,123:$Vx},o($VN,[2,132]),o($VP,[2,140]),{43:[1,230],101:[1,231]},{43:[1,232]},o($V31,[2,161]),o([27,29,41,43,77,78,79,80,81,82,83,84,85,97,101,104,106,107,108],$VQ,{105:$V41,113:$Vk}),{43:[1,234]},{23:[1,235]},o($VP,$V21),{23:$Vl,41:$Vt,49:236,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{59:[1,237]},{14:238,15:239,17:240,18:241,19:$V51,20:$V1},{23:$Vu,28:243,45:244},{14:245,15:239,17:240,18:241,19:$V51,20:$V1},{23:[1,246]},{23:[1,247]},{24:[1,248]},{14:249,15:239,17:240,18:241,19:$V51,20:$V1},{23:$Vu,28:250,45:244},{23:$VR,33:251},{25:[1,252]},o($VS,[2,156]),{44:[1,253]},{23:$VU,42:254,43:$VV,120:155,121:$VW},{44:[1,255]},{23:$Vu,45:256},{4:51,6:3,7:4,8:5,9:7,16:257,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{27:$Vy,29:$Vz,43:[1,258],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{52:$V61,53:259,67:261,68:260},{4:51,6:3,7:4,8:5,9:7,16:263,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{23:[1,264]},{46:[1,265]},{60:[1,266]},{41:[1,267]},{4:51,6:3,7:4,8:5,9:7,16:268,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{23:$Vl,41:$Vt,49:269,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($V01,[2,119],{82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),o($V01,[2,118],{82:$VF,83:$VG,84:$VH,85:$VI,108:$VM}),{46:[1,271],62:270,125:$VY,126:$VZ},o($V71,[2,135]),{25:[1,272]},{101:[1,273]},o($VP,[2,143]),{43:[1,274]},o($VP,[2,141]),{23:[1,276],124:275},o($VP,[2,142]),{23:$Vl,41:$Vt,49:277,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{4:51,6:3,7:4,8:5,9:7,16:278,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{41:[1,279]},o($Vi,[2,84],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{23:$Vl,41:$Vt,49:280,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{25:[1,281]},{25:[2,11]},{15:282,17:240,18:241,19:$V51,20:$V1,25:[2,14]},{23:$Vu,45:283,64:[1,284]},o([23,64],$Vs),{29:[1,285]},{29:[2,164],101:[1,286]},{25:[1,287]},{24:[1,288]},{24:[1,289]},{14:290,15:239,17:240,18:241,19:$V51,20:$V1},{25:[1,291]},{29:[1,292]},{25:[1,293]},o($VX,[2,103]),{23:$Vu,45:294},{43:[2,153]},{23:$Vu,45:295},o($V31,[2,152]),{50:[1,296]},o($Vi,[2,35]),{46:[1,297]},{46:[2,50]},{46:[2,49],52:$V61,67:261,68:298},{23:$Vl,41:$Vt,49:299,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{57:[1,300]},{4:51,6:3,7:4,8:5,9:7,16:301,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{60:[1,302]},o($Vi,[2,41]),{23:$Vl,41:$Vt,49:303,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{46:[2,166]},o([5,11,19,20,23,25,38,40,43,46,47,48,50,51,52,54,57,60,61,63,75,76,89,90,91,92,93,101,105,114,125,126],[2,108],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{46:[1,304]},{60:[1,305]},o($V71,[2,136]),{23:$Vu,45:306},o($VP,[2,144]),o($V31,[2,160]),{105:$V41},o($V31,[2,162],{27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM}),{46:[1,307]},{23:$VU,42:308,43:$VV,120:155,121:$VW},{27:$Vy,29:$Vz,43:[1,309],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,[2,17]),{25:[2,13]},{23:[1,310]},{23:$Vu,45:311},{24:[1,312]},{23:$Vu,28:313,45:244},o($Vi,[2,19]),{14:314,15:239,17:240,18:241,19:$V51,20:$V1},{14:315,15:239,17:240,18:241,19:$V51,20:$V1},{25:[1,316]},o($Vi,[2,21]),{24:[1,317]},o($Vi,[2,23]),{4:51,6:3,7:4,8:5,9:7,16:318,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($V31,[2,151]),o($Vi,[2,34]),{51:[1,319]},{46:[2,48]},{4:51,6:3,7:4,8:5,9:7,16:320,18:27,19:$V0,20:$V1,21:12,23:$V2,27:$Vy,29:$Vz,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24,104:$VJ,106:$VK,107:$VL,108:$VM},o($Vi,[2,37]),{57:[1,321]},o($Vi,[2,39]),{27:$Vy,29:$Vz,43:[1,322],77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{60:[1,323]},o($Vi,[2,42]),{29:[1,324]},{63:[1,325]},{43:[1,326]},{44:[1,327]},{11:[1,329],27:[1,331],41:[1,330],58:[1,328]},{23:[1,332],69:[1,333]},{14:334,15:239,17:240,18:241,19:$V51,20:$V1},{29:[2,163]},{25:[1,335]},{25:[1,336]},o($Vi,[2,20]),{14:337,15:239,17:240,18:241,19:$V51,20:$V1},{46:[1,338]},o($Vi,[2,36]),o([46,52],[2,47]),{23:[1,339]},{4:51,6:3,7:4,8:5,9:7,16:340,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($Vi,[2,40]),{24:[1,341]},o($Vi,[2,43]),{24:[1,342]},{23:$Vu,45:343},{23:$Vl,41:$Vt,49:344,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},o($V81,[2,52]),{23:$VU,42:345,43:$VV,120:155,121:$VW},{23:$Vu,28:346,45:244},{27:[1,349],41:[1,348],58:[1,347]},{27:[1,359],29:[1,360],70:350,71:[1,351],72:[1,352],73:[1,353],74:[1,354],75:[1,355],76:[1,356],77:[1,357],78:[1,358],79:[1,361],80:[1,362],81:[1,363],82:[1,364],83:[1,365],84:[1,366],85:[1,367],86:[1,368],87:[1,369],88:[1,370]},{25:[1,371]},o($Vi,[2,24]),o($Vi,[2,25]),{25:[1,372]},{40:[1,373]},o($Vi,[2,38]),{62:374,125:$VY,126:$VZ},{24:$V91,100:375,102:376},{4:51,6:3,7:4,8:5,9:7,16:378,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($Vi,[2,86]),{11:[1,379],27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{43:[1,380]},{29:[1,381]},{23:$Vl,41:$Vt,49:382,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{23:$VU,42:383,43:$VV,120:155,121:$VW},{23:$Vu,28:384,45:244},{41:[1,385]},{41:[2,61]},{41:[2,62]},{41:[2,63]},{41:[2,64]},{41:[2,65]},{41:[2,66]},{41:[2,67]},{41:[2,68]},{41:[2,69]},{41:[2,70]},{41:[2,71]},{41:[2,72]},{41:[2,73]},{41:[2,74]},{41:[2,75]},{41:[2,76]},{41:[2,77]},{41:[2,78]},{41:[2,79]},{41:[2,80]},o($Vi,[2,18]),o($Vi,[2,22]),o($Vi,[2,32]),{46:[2,165]},{25:[1,386],101:[1,387]},o($Va1,[2,106]),{103:[1,388]},{25:[1,389]},o($V81,[2,51]),{11:[1,390],24:[1,391]},{41:[1,392]},{11:[1,393],27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},{43:[1,394]},{29:[1,395]},{23:$VU,42:396,43:$VV,120:155,121:$VW},o($VP,[2,138]),{24:$V91,102:397},{101:[1,398]},o($Vi,[2,44]),o($V81,[2,55]),{4:51,6:3,7:4,8:5,9:7,16:399,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{23:$VU,42:400,43:$VV,120:155,121:$VW},o($V81,[2,53]),{11:[1,401],24:[1,402]},{41:[1,403]},{43:[1,404]},o($Va1,[2,105]),{23:$Vl,41:$Vt,49:405,83:$Vm,88:$Vn,95:65,98:63,103:$Vo,109:57,110:59,111:$Vp,112:64,115:$Vq,118:$Vr},{25:[1,406]},{43:[1,407]},o($V81,[2,54]),{4:51,6:3,7:4,8:5,9:7,16:408,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},{23:$VU,42:409,43:$VV,120:155,121:$VW},{24:[1,410]},{25:[1,411],27:$Vy,29:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,104:$VJ,106:$VK,107:$VL,108:$VM},o($V81,[2,58]),{24:[1,412]},{25:[1,413]},{43:[1,414]},{4:51,6:3,7:4,8:5,9:7,16:415,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($Va1,[2,107]),{4:51,6:3,7:4,8:5,9:7,16:416,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($V81,[2,56]),{24:[1,417]},{25:[1,418]},{25:[1,419]},{4:51,6:3,7:4,8:5,9:7,16:420,18:27,19:$V0,20:$V1,21:12,23:$V2,38:$V3,39:10,40:$V4,45:6,47:$V5,51:$V6,54:$V7,60:$V8,63:$V9,75:$Va,76:$Vb,89:$Vc,90:$Vd,91:$Ve,92:$Vf,93:$Vg,95:24},o($V81,[2,60]),o($V81,[2,59]),{25:[1,421]},o($V81,[2,57])],
defaultActions: {29:[2,1],33:[2,101],239:[2,11],254:[2,153],260:[2,50],268:[2,166],282:[2,13],298:[2,48],313:[2,163],351:[2,61],352:[2,62],353:[2,63],354:[2,64],355:[2,65],356:[2,66],357:[2,67],358:[2,68],359:[2,69],360:[2,70],361:[2,71],362:[2,72],363:[2,73],364:[2,74],365:[2,75],366:[2,76],367:[2,77],368:[2,78],369:[2,79],370:[2,80],374:[2,165]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 118
break;
case 2:return 103
break;
case 3:return "Loop"
break;
case 4:return "As"
break;
case 5:return "To"
break;
case 6:return 52
break;
case 7:return "End"
break;
case 8:return "extends"
break;
case 9:return "default"
break;
case 10:return "import"
break;
case 11:return "Sub"
break;
case 12:return "interface"
break;
case 13:return "Function"
break;
case 14:return "private"
break;
case 15:return "static"
break;
case 16:return "If"
break;
case 17:return "Do"
break;
case 18:return "In"
break;
case 19:return "ByRef"
break;
case 20:return "out"
break;
case 21:return "Else"
break;
case 22:return "return"
break;
case 23:return "throw"
break;
case 24:return "While"
break;
case 25:return "Select"
break;
case 26:return "async"
break;
case 27:return "Each"
break;
case 28:return "For"
break;
case 29:return "new"
break;
case 30:return 107
break;
case 31:return 88
break;
case 32:return 101
break;
case 33:return 11
break;
case 34:return 97
break;
case 35:return 105
break;
case 36:return 87
break;
case 37:return 79
break;
case 38:return 86
break;
case 39:return 80
break;
case 40:return 78
break;
case 41:return 29
break;
case 42:return 77
break;
case 43:return 27
break;
case 44:return 81
break;
case 45:return 58
break;
case 46:return 96
break;
case 47:return 108
break;
case 48:return 73
break;
case 49:return 84
break;
case 50:return 74
break;
case 51:return 85
break;
case 52:return 72
break;
case 53:return 76
break;
case 54:return 83
break;
case 55:return 75
break;
case 56:return 71
break;
case 57:return 82
break;
case 58:return '^'
break;
case 59:return 104
break;
case 60:return 24
break;
case 61:return 25
break;
case 62:return 113
break;
case 63:return 114
break;
case 64:return 41
break;
case 65:return 43
break;
case 66:return 23
break;
case 67:return 5
break;
case 68:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:Loop\b)/,/^(?:As\b)/,/^(?:To\b)/,/^(?:Case\b)/,/^(?:End\b)/,/^(?:extends\b)/,/^(?:default\b)/,/^(?:import\b)/,/^(?:Sub\b)/,/^(?:interface\b)/,/^(?:Function\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:If\b)/,/^(?:Do\b)/,/^(?:In\b)/,/^(?:ByRef\b)/,/^(?:out\b)/,/^(?:Else\b)/,/^(?:return\b)/,/^(?:throw\b)/,/^(?:While\b)/,/^(?:Select\b)/,/^(?:async\b)/,/^(?:Each\b)/,/^(?:For\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&=)/,/^(?:&&)/,/^(?:\|=)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:%=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vba_parser;
exports.Parser = vba_parser.Parser;
exports.parse = function () { return vba_parser.parse.apply(vba_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}