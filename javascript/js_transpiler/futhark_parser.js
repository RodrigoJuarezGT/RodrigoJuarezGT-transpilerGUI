/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var futhark_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,6],$V3=[1,23],$V4=[1,22],$V5=[1,21],$V6=[1,61],$V7=[1,57],$V8=[1,55],$V9=[1,52],$Va=[1,58],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,59],$Vf=[1,60],$Vg=[1,62],$Vh=[15,16,62],$Vi=[1,69],$Vj=[9,15,16,34,62],$Vk=[1,74],$Vl=[5,14,33,39],$Vm=[5,8,14,33,39],$Vn=[5,9,14,21,33,34,36,39,40,41,64,79,84,86,88],$Vo=[1,88],$Vp=[1,85],$Vq=[1,93],$Vr=[1,95],$Vs=[1,94],$Vt=[1,96],$Vu=[1,91],$Vv=[1,98],$Vw=[1,99],$Vx=[1,100],$Vy=[1,101],$Vz=[1,89],$VA=[1,90],$VB=[1,92],$VC=[1,97],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[5,8,9,14,16,21,23,24,25,26,27,28,29,30,31,33,34,36,39,40,41,43,49,50,51,52,54,64,66,67,68,69,70,71,72,79,80,82,84,86,88],$VH=[1,110],$VI=[5,8,9,14,16,21,23,24,25,26,27,28,29,30,31,33,34,36,39,40,41,43,49,50,51,52,54,58,62,64,66,67,68,69,70,71,72,74,79,80,82,84,86,88],$VJ=[2,101],$VK=[16,43],$VL=[9,34],$VM=[1,126],$VN=[1,127],$VO=[2,11],$VP=[41,43],$VQ=[1,167],$VR=[2,115],$VS=[5,8,9,14,16,21,23,24,25,26,27,33,34,36,39,40,41,43,49,50,51,52,54,64,66,67,68,79,80,82,84,86,88],$VT=[2,74],$VU=[5,8,9,14,16,21,23,24,25,26,27,28,29,33,34,36,39,40,41,43,49,50,51,52,54,64,66,67,68,69,79,80,82,84,86,88],$VV=[5,8,9,14,16,21,23,24,25,26,27,28,29,30,31,33,34,36,39,40,41,43,49,50,51,52,54,64,66,67,68,69,70,79,80,82,84,86,88],$VW=[5,14,33,39,43],$VX=[36,80],$VY=[14,21,41],$VZ=[23,24,25,26,27,52,66,67,68],$V_=[43,80];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"data_type_and":10,"class_statements_":11,"class_statement":12,"class_statements":13,"let":14,":":15,"=":16,"statements":17,"parameters":18,"types":19,"type":20,"val":21,"OPERATOR":22,"<=":23,">=":24,"<":25,">":26,"==":27,"+":28,"-":29,"*":30,"/":31,"!":32,"data":33,"(":34,"op_or_identifier":35,")":36,"parallel_lhs":37,"parallel_rhs":38,"module":39,"{":40,"}":41,"'":42,",":43,"e":44,"statement":45,"statement_with_parentheses":46,"statement_with_semicolon":47,"loop":48,"while":49,"do":50,"for":51,"in":52,"if":53,"then":54,"elif":55,"case":56,"parentheses_expr":57,"of":58,"case_statements":59,"declare_vars":60,"case_statement":61,"->":62,"case_statements_":63,"_":64,"declare_var":65,"||":66,"&&":67,"/=":68,"++":69,"mod":70,"**":71,"^":72,"access_array":73,"!!":74,"access_arr":75,"key_values":76,"key_value":77,"\\\\":78,"[":79,"]":80,"exprs":81,"<-":82,"list_comprehensions":83,"NUMBER":84,"args":85,"STRING_LITERAL":86,"parameter":87,"else":88,"identifiers":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",14:"let",15:":",16:"=",21:"val",23:"<=",24:">=",25:"<",26:">",27:"==",28:"+",29:"-",30:"*",31:"/",32:"!",33:"data",34:"(",36:")",39:"module",40:"{",41:"}",42:"'",43:",",48:"loop",49:"while",50:"do",51:"for",52:"in",53:"if",54:"then",56:"case",58:"of",62:"->",64:"_",66:"||",67:"&&",68:"/=",69:"++",70:"mod",71:"**",72:"^",74:"!!",78:"\\\\",79:"[",80:"]",82:"<-",84:"NUMBER",86:"STRING_LITERAL",88:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[10,2],[10,1],[11,2],[11,1],[13,1],[13,0],[12,6],[12,4],[12,7],[12,5],[12,8],[12,6],[12,4],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[6,4],[6,6],[6,4],[6,7],[6,5],[6,8],[6,6],[6,7],[6,9],[6,4],[6,6],[6,7],[35,1],[35,1],[19,3],[19,2],[37,3],[37,3],[38,3],[38,3],[45,1],[45,1],[45,6],[45,8],[45,8],[45,10],[45,8],[45,10],[46,5],[46,4],[46,3],[46,3],[61,3],[63,2],[63,1],[59,4],[65,4],[60,2],[60,1],[47,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,1],[73,3],[76,3],[76,1],[77,3],[57,6],[57,3],[57,8],[57,3],[57,2],[57,3],[57,5],[57,7],[57,9],[57,1],[57,1],[57,3],[57,4],[57,1],[83,5],[83,1],[20,1],[87,5],[87,1],[18,2],[18,1],[75,3],[75,1],[81,3],[81,1],[85,2],[85,1],[55,2],[89,3],[89,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 8: case 43: case 62: case 66: case 110: case 116:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 9: case 44: case 63: case 67: case 111: case 113:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["data_type_and",$$[$0-1],$$[$0]];
break;
case 7: case 49: case 86:
this.$ = $$[$0];
break;
case 10:
this.$ = ["class_statements",$$[$0]]
break;
case 11:
this.$ = ["class_statements",[]]
break;
case 12:
this.$ = ["instance_method","public",$$[$0-2],$$[$0-4],[],$$[$0]];
break;
case 13:
this.$ = ["instance_method","public","Object",$$[$0-2],[],$$[$0]];
break;
case 14:
this.$ = ["instance_method","public",$$[$0-2],$$[$0-5],$$[$0-4],$$[$0]];
break;
case 15:
this.$ = ["instance_method","public","Object",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["generic_instance_method","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0],$$[$0-5]];
break;
case 17:
this.$ = ["generic_instance_method","public","Object",$$[$0-4],$$[$0-2],$$[$0],$$[$0-3]];
break;
case 18:
this.$ = ["initialize_instance_var","public",$$[$0],$$[$0-2]]
break;
case 29:
this.$ = ["algebraic_data_type",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["function","public",$$[$0-2],$$[$0-4],[],$$[$0]];
break;
case 31:
this.$ = ["function","public","Object",$$[$0-2],[],$$[$0]];
break;
case 32:
this.$ = ["function","public",$$[$0-2],$$[$0-5],$$[$0-4],$$[$0]];
break;
case 33:
this.$ = ["function","public","Object",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["generic_function","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0],$$[$0-5]];
break;
case 35:
this.$ = ["generic_function","public","Object",$$[$0-4],$$[$0-2],$$[$0],$$[$0-3]];
break;
case 36:
this.$ = ["overload_operator","public","Object",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["overload_operator","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0]];
break;
case 38:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-2]],["parallel_rhs",$$[$0]]]
break;
case 39:
this.$ = ["class","public",$$[$0-4],$$[$0-1]];
break;
case 40:
this.$ = ["scala_class","public",$$[$0-5],$$[$0-4],$$[$0-1]];
break;
case 45: case 47:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 46: case 48:
this.$ = [$$[$0-2],$$[$0]]
break;
case 50:
this.$ = ["semicolon",$$[$0]];
break;
case 51:
this.$ = ["futhark_while_loop",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 52:
this.$ = ["futhark_while_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 53:
this.$ = ["futhark_foreach",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 54:
this.$ = ["futhark_foreach",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 55:
this.$ = ["futhark_for_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["futhark_for_loop",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 57:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 58:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["lexically_scoped_vars",$$[$0-2],$$[$0]];
break;
case 60: case 94: case 102:
this.$ = $$[$0-1]
break;
case 61:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 64:
this.$ = $$[$0-3].concat([["default",["statements",$$[$0]]]])
break;
case 65:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 68:
this.$ = ["return",$$[$0]];
break;
case 69: case 70: case 71: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 83:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 72:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 82:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 84:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 85:
this.$ = ["-",$$[$0]];
break;
case 87:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 88:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 89: case 115: case 117: case 120:
this.$ = [$$[$0]];
break;
case 90:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 91:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 92:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 93:
this.$ = ["anonymous_function",$$[$0-3],$$[$0-5],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 95:
this.$ = ["initializer_list","Object",[]];
break;
case 96:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 97:
this.$ = ["initialize_tuple","Object",[$$[$0-3]].concat($$[$0-1])];
break;
case 98:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 99:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 100: case 104:
this.$ = yytext;
break;
case 103:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 105:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 108:
this.$ = [$$[$0-1],$$[$0-3]];
break;
case 109:
this.$ = ["Object",$$[$0]];
break;
case 112: case 114: case 119:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 118:
this.$ = ["else",$$[$0]];
break;
case 121:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,14:$V0,33:$V1,39:$V2},{1:[3]},{5:[1,7]},{4:8,5:[2,3],6:3,14:$V0,33:$V1,39:$V2},{9:[1,9]},{9:[1,10],34:[1,11],37:12},{9:[1,13]},{1:[2,1]},{5:[2,2]},{16:[1,14]},{9:$V3,15:[1,15],16:[1,16],18:17,19:18,34:$V4,42:$V5,43:[1,19],87:20},{9:[1,26],22:25,23:[1,27],24:[1,28],25:[1,29],26:[1,30],27:[1,31],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],35:24},{16:[1,37],43:[1,38]},{9:$V3,16:[1,39],18:40,34:$V4,87:20},{7:41,9:[1,42]},{9:[1,43]},{9:$V6,14:$V7,17:44,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{15:[1,63],16:[1,64]},{9:$V3,18:65,34:$V4,87:20},{9:[1,66]},o($Vh,[2,111],{87:20,18:67,9:$V3,34:$V4}),{9:$Vi,20:68},{9:[1,70]},o($Vj,[2,109]),{36:[1,71]},{36:[2,41]},{36:[2,42]},{36:[2,19]},{36:[2,20]},{36:[2,21]},{36:[2,22]},{36:[2,23]},{36:[2,24]},{36:[2,25]},{36:[2,26]},{36:[2,27]},{36:[2,28]},{9:$V6,29:$V8,34:$Vk,38:72,40:$Va,44:73,57:56,79:$Ve,84:$Vf,86:$Vg},{9:[1,75]},{40:[1,76]},{16:[1,77]},o($Vl,[2,29],{8:[1,78]}),o($Vm,[2,5]),{16:[1,79]},o($Vl,[2,31]),o($Vn,[2,121]),o($Vn,[2,49]),o($Vn,[2,50]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:80,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:81,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,34:$Vk,40:$Va,57:82,79:$Ve,84:$Vf,86:$Vg},{52:[1,83]},{9:$Vo,14:$V7,29:$V8,34:$V9,40:$Va,44:87,46:84,53:$Vc,56:$Vd,57:56,60:51,65:54,73:86,78:$Vp,79:$Ve,84:$Vf,86:$Vg},o($Vn,[2,68],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),{14:$V7,52:[2,67],60:105,65:54},{9:$V6,29:$V8,34:$Vk,40:$Va,44:106,57:56,79:$Ve,84:$Vf,86:$Vg},o($VG,[2,86]),{9:[1,107]},{9:$VH,76:108,77:109},{9:$V6,29:$V8,34:$Vk,40:$Va,44:113,57:56,79:$Ve,80:[1,111],81:112,84:$Vf,86:$Vg},o($VI,[2,100]),o($VI,$VJ),o($VI,[2,104]),{9:[1,114]},{9:$V6,14:$V7,17:115,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{15:[1,116],16:[1,117]},o($VK,[2,46]),o($Vh,[2,110]),o($VL,[2,44],{19:118,42:$V5}),o([9,14,16,21,34,41,42],[2,107]),{15:[1,119]},{9:$V3,18:120,34:$V4,87:20},o($Vl,[2,38],{43:[1,121]}),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,43:[1,122],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{9:$Vo,29:$V8,34:$Vk,40:$Va,44:87,57:56,73:86,78:$Vp,79:$Ve,84:$Vf,86:$Vg},o($VK,[2,45]),{11:124,12:125,13:123,14:$VM,21:$VN,41:$VO},{40:[1,128]},{9:[1,129]},{9:$V6,14:$V7,17:130,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{16:[1,132],23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,49:[1,131],51:[1,133],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,54:[1,134],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{58:[1,135]},{9:$V6,14:$V7,17:136,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{36:[1,137]},{9:$V3,18:138,34:$V4,87:20},{36:[1,139]},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,36:[1,141],43:[1,140],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o([23,24,25,26,27,28,29,30,31,36,43,66,67,68,69,70,71,72],$VJ,{85:142,57:144,9:$V6,34:$Vk,40:$Va,74:[1,143],79:$Ve,84:$Vf,86:$Vg}),{9:$V6,29:$V8,34:$Vk,40:$Va,44:145,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:146,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:147,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:148,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:149,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:150,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:151,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:152,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:153,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:154,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:155,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:156,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:157,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:158,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:159,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:160,57:56,79:$Ve,84:$Vf,86:$Vg},{52:[2,66]},o($VG,[2,85]),{16:[1,161]},{41:[1,162],43:[1,163]},o($VP,[2,89]),{16:[1,164]},o($VI,[2,95]),{80:[1,165]},{8:[1,166],23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,43:$VQ,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,80:$VR},{16:[1,168]},o($Vl,[2,33]),{9:$Vi,20:169},{9:$V6,14:$V7,17:170,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},o($VL,[2,43]),{9:[1,171]},{15:[1,173],16:[1,172]},{9:$V6,29:$V8,34:$Vk,40:$Va,44:174,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:175,57:56,79:$Ve,84:$Vf,86:$Vg},{41:[1,176]},{41:[2,10]},{11:177,12:125,14:$VM,21:$VN,41:[2,9]},{9:[1,178]},{9:[1,179]},{11:124,12:125,13:180,14:$VM,21:$VN,41:$VO},o($Vm,[2,4]),o($Vl,[2,30]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:181,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:182,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:183,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:184,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,34:$Vk,40:$Va,57:188,59:185,61:187,63:186,79:$Ve,84:$Vf,86:$Vg},o($Vn,[2,59]),o($Vn,[2,60]),{15:[1,190],62:[1,189]},o($VI,[2,94]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:192,57:56,79:$Ve,81:191,84:$Vf,86:$Vg},o($VI,[2,102]),{36:[1,193]},{9:$V6,34:$Vk,40:$Va,57:195,75:194,79:$Ve,84:$Vf,86:$Vg},{9:$V6,34:$Vk,36:[2,117],40:$Va,57:144,79:$Ve,84:$Vf,85:196,86:$Vg},o([5,8,9,14,16,21,33,34,36,39,40,41,43,49,50,51,52,54,64,66,79,80,82,84,86,88],[2,69],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o([5,8,9,14,16,21,33,34,36,39,40,41,43,49,50,51,52,54,64,66,67,79,80,82,84,86,88],[2,70],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,[2,71],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,[2,72],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,[2,73],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,$VT,{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,[2,75],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VS,[2,76],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,69:$VC,70:$VD,71:$VE,72:$VF}),o($VU,[2,77],{30:$Vx,31:$Vy,70:$VD,71:$VE,72:$VF}),o($VU,[2,78],{30:$Vx,31:$Vy,70:$VD,71:$VE,72:$VF}),o($VU,[2,79],{30:$Vx,31:$Vy,70:$VD,71:$VE,72:$VF}),o($VV,[2,80],{71:$VE,72:$VF}),o($VV,[2,81],{71:$VE,72:$VF}),o($VV,[2,82],{71:$VE,72:$VF}),o($VG,[2,83]),o($VG,[2,84]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:197,57:56,79:$Ve,84:$Vf,86:$Vg},o($VI,[2,92]),{9:$VH,77:198},{9:$V6,29:$V8,34:$Vk,40:$Va,44:199,57:56,79:$Ve,84:$Vf,86:$Vg},o($VI,[2,96]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:200,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:192,57:56,79:$Ve,81:201,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:202,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{16:[1,203]},o($Vl,[2,35]),{36:[1,204]},{9:$V6,14:$V7,17:205,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$Vi,20:206},o($VW,[2,47],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($VW,[2,48],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($Vl,[2,39]),{41:[2,8]},{9:$V3,15:[1,207],16:[1,208],18:209,19:210,34:$V4,42:$V5,87:20},{15:[1,211]},{41:[1,212]},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,213],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,49:[1,214],51:[1,215],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{23:$Vq,24:$Vr,25:[1,217],26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,52:[1,216],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{55:218,88:[1,219]},o($Vn,[2,58]),{64:[1,220]},{9:$V6,34:$Vk,40:$Va,57:188,61:187,63:221,64:[2,63],79:$Ve,84:$Vf,86:$Vg},{62:[1,222]},{9:$V6,29:$V8,34:$Vk,40:$Va,44:223,57:56,79:$Ve,84:$Vf,86:$Vg},{9:[1,224]},{36:[1,225]},o($VX,$VR,{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,43:$VQ,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($VI,[2,103]),{36:[2,87]},{36:[2,113],74:[1,226]},{36:[2,116]},o([14,52],[2,65],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($VP,[2,88]),o($VP,[2,90],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,82:[1,227]},o($VX,[2,114]),o($Vl,[2,32]),{9:$V6,14:$V7,17:228,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},o($Vj,[2,108]),o($Vl,[2,36]),{16:[1,229]},{9:[1,230]},{9:$V6,14:$V7,17:231,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{15:[1,232],16:[1,233]},{9:$V3,18:234,34:$V4,87:20},{9:$Vi,20:235},o($Vl,[2,40]),{9:$V6,14:$V7,17:236,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:237,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:238,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:239,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:240,57:56,79:$Ve,84:$Vf,86:$Vg},o($Vn,[2,57]),{9:$V6,14:$V7,17:241,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{62:[1,242]},{64:[2,62]},{9:$V6,14:$V7,17:243,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,36:[1,244],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{62:[1,245]},o($VI,[2,97]),{9:$V6,34:$Vk,40:$Va,57:195,75:246,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:248,57:56,79:$Ve,83:247,84:$Vf,86:$Vg},o($Vl,[2,34]),{9:$V6,14:$V7,17:249,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{16:[1,250]},o($VY,[2,13]),{9:[1,251]},{9:$V6,14:$V7,17:252,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{15:[1,253],16:[1,254]},o($VY,[2,18]),o($Vn,[2,51]),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,255],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{23:$Vq,24:$Vr,25:[1,257],26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,52:[1,256],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,258],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o($VZ,$VT,{28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,259],69:$VC,70:$VD,71:$VE,72:$VF}),o($Vn,[2,118]),{9:$V6,14:$V7,17:260,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},o([9,34,40,64,79,84,86],[2,61]),o($VI,[2,91]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:261,57:56,79:$Ve,84:$Vf,86:$Vg},{36:[2,112]},{43:[1,263],80:[1,262]},o($V_,[2,106],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($Vl,[2,37]),{9:$V6,14:$V7,17:264,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{16:[1,265]},o($VY,[2,15]),{9:$Vi,20:266},{9:$V6,14:$V7,17:267,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:268,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:269,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,29:$V8,34:$Vk,40:$Va,44:270,57:56,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:271,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:272,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},o($Vn,[2,64]),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,36:[1,273],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o($VI,[2,98]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:274,57:56,79:$Ve,84:$Vf,86:$Vg},o($VY,[2,12]),{9:$V6,14:$V7,17:275,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{16:[1,276]},o($VY,[2,17]),o($Vn,[2,52]),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,277],66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o($VZ,$VT,{28:$Vv,29:$Vw,30:$Vx,31:$Vy,50:[1,278],69:$VC,70:$VD,71:$VE,72:$VF}),o($Vn,[2,53]),o($Vn,[2,55]),o($VI,[2,93]),{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,80:[1,279],82:[1,280]},o($VY,[2,14]),{9:$V6,14:$V7,17:281,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:282,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},{9:$V6,14:$V7,17:283,29:$V8,34:$V9,40:$Va,44:53,45:45,46:46,47:47,48:$Vb,53:$Vc,56:$Vd,57:56,60:51,65:54,79:$Ve,84:$Vf,86:$Vg},o($VI,[2,99]),{9:$V6,29:$V8,34:$Vk,40:$Va,44:284,57:56,79:$Ve,84:$Vf,86:$Vg},o($VY,[2,16]),o($Vn,[2,54]),o($Vn,[2,56]),o($V_,[2,105],{23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF})],
defaultActions: {7:[2,1],8:[2,2],25:[2,41],26:[2,42],27:[2,19],28:[2,20],29:[2,21],30:[2,22],31:[2,23],32:[2,24],33:[2,25],34:[2,26],35:[2,27],36:[2,28],105:[2,66],124:[2,10],177:[2,8],194:[2,87],196:[2,116],221:[2,62],246:[2,112]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 84
break;
case 2:return 86
break;
case 3:return "otherwise"
break;
case 4:return "if"
break;
case 5:return 58
break;
case 6:return 50
break;
case 7:return "in"
break;
case 8:return "let"
break;
case 9:return "val"
break;
case 10:return 51
break;
case 11:return "else"
break;
case 12:return 48
break;
case 13:return "case"
break;
case 14:return "then"
break;
case 15:return "data"
break;
case 16:return "type"
break;
case 17:return "return"
break;
case 18:return "module"
break;
case 19:return 70
break;
case 20:return 43
break;
case 21:return ';'
break;
case 22:return "'"
break;
case 23:return '.'
break;
case 24:return '::'
break;
case 25:return 15
break;
case 26:return 67
break;
case 27:return 66
break;
case 28:return 8
break;
case 29:return 78
break;
case 30:return '>>'
break;
case 31:return 24
break;
case 32:return 26
break;
case 33:return 23
break;
case 34:return 82
break;
case 35:return 62
break;
case 36:return '<<'
break;
case 37:return 25
break;
case 38:return 27
break;
case 39:return 16
break;
case 40:return 72
break;
case 41:return '*='
break;
case 42:return 71
break;
case 43:return 30
break;
case 44:return 68
break;
case 45:return 31
break;
case 46:return '-='
break;
case 47:return '--'
break;
case 48:return 29
break;
case 49:return 69
break;
case 50:return '+='
break;
case 51:return 28
break;
case 52:return 40
break;
case 53:return 41
break;
case 54:return 74
break;
case 55:return 79
break;
case 56:return 80
break;
case 57:return 34
break;
case 58:return 36
break;
case 59:return 64
break;
case 60:return 9
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:val\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:case\b)/,/^(?:then\b)/,/^(?:data\b)/,/^(?:type\b)/,/^(?:return\b)/,/^(?:module\b)/,/^(?:mod\b)/,/^(?:,)/,/^(?:;)/,/^(?:')/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:\\)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = futhark_parser;
exports.Parser = futhark_parser.Parser;
exports.parse = function () { return futhark_parser.parse.apply(futhark_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}