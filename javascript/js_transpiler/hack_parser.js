/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var hack_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,24],$V2=[1,21],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,20],$Vc=[1,22],$Vd=[5,18,42],$Ve=[5,12,13,16,18,23,28,29,31,32,37,42,47,48,88,91],$Vf=[1,30],$Vg=[1,50],$Vh=[1,46],$Vi=[1,42],$Vj=[1,45],$Vk=[1,38],$Vl=[1,39],$Vm=[1,47],$Vn=[1,49],$Vo=[22,26],$Vp=[1,66],$Vq=[1,64],$Vr=[1,65],$Vs=[2,77],$Vt=[15,45],$Vu=[1,89],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,90],$VH=[1,91],$VI=[22,26,39,51,60,62,65,66,67,68,69,70,71,72,73,74,75,76,84,85],$VJ=[22,26,39,51,60,62,65,66,67,68,69,70,71,72,73,74,75,76,77,84,85],$VK=[1,117],$VL=[5,12,13,16,18,23,28,29,31,32,37,42,47,48,87,88,89,91],$VM=[2,82],$VN=[26,51],$VO=[16,72,84,91],$VP=[26,84],$VQ=[22,26,39,51,62,65,66,67,68,69,70,71,72,84,85],$VR=[22,26,39,51,60,62,65,66,67,68,69,70,71,72,73,74,84,85],$VS=[1,185],$VT=[1,202],$VU=[1,203],$VV=[18,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"statement_with_semicolon":21,";":22,"while":23,"(":24,"e":25,")":26,"bracket_statements":27,"do":28,"switch":29,"case_statements":30,"for":31,"foreach":32,"var_name":33,"as":34,"=>":35,"if_statement":36,"function":37,"parameters":38,":":39,"case_statement":40,"case":41,"break":42,"case_statements_":43,"default":44,"static":45,"type":46,"System.out.println":47,"return":48,"=":49,"[":50,"]":51,"access_array":52,"++":53,"--":54,"+=":55,"-=":56,"*=":57,"/=":58,"function_call":59,".":60,"dot_expr":61,"?":62,"...":63,"parentheses_expr":64,"||":65,"&&":66,"!==":67,"===":68,"<=":69,"<":70,">=":71,">":72,"+":73,"-":74,"*":75,"/":76,"->":77,"access_arr":78,"exprs":79,"NUMBER":80,"STRING_LITERAL":81,"types":82,"parameter":83,",":84,"][":85,"else_if":86,"else":87,"if":88,"elseif":89,"elif":90,"$":91,"var_names":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",22:";",23:"while",24:"(",26:")",28:"do",29:"switch",31:"for",32:"foreach",34:"as",35:"=>",37:"function",39:":",41:"case",42:"break",44:"default",45:"static",47:"System.out.println",48:"return",49:"=",50:"[",51:"]",53:"++",54:"--",55:"+=",56:"-=",57:"*=",58:"/=",60:".",62:"?",63:"...",65:"||",66:"&&",67:"!==",68:"===",69:"<=",70:"<",71:">=",72:">",73:"+",74:"-",75:"*",76:"/",77:"->",80:"NUMBER",81:"STRING_LITERAL",84:",",85:"][",87:"else",88:"if",89:"elseif",91:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,1],[6,8],[6,10],[40,6],[43,2],[43,1],[30,4],[30,1],[10,10],[21,4],[21,2],[21,4],[21,5],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[25,5],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[61,3],[61,1],[52,4],[59,3],[59,4],[64,7],[64,1],[64,1],[64,2],[64,3],[64,3],[64,1],[64,1],[64,1],[46,3],[46,4],[46,1],[83,1],[83,3],[38,3],[38,1],[38,0],[78,3],[78,1],[79,3],[79,1],[82,3],[82,1],[86,2],[86,1],[90,6],[90,5],[90,2],[36,6],[36,5],[33,2],[92,3],[92,1],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 25:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 26: case 62: case 81: case 84:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["class",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["class_extends",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_implements",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13: case 100:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 17:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 20:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 22:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 24:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 27:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 29:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 30:
this.$ = ["println",$$[$0-1]];
break;
case 31:
this.$ = ["return",$$[$0]];
break;
case 32:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 34: case 35:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 36: case 37:
this.$ = [$$[$0],$$[$0-1]];
break;
case 38: case 39: case 40: case 41: case 46: case 47: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 45:
this.$ = ["unpack_array",$$[$0]]
break;
case 48:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = [".", $$[$0]];
break;
case 61: case 80: case 83: case 85: case 87: case 97:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 63:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 64:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 65:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 66:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 69:
this.$ = ["initializer_list","Object",[]];
break;
case 70:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 71:
this.$ = $$[$0-1];
break;
case 72: case 73: case 74:
this.$ = yytext;
break;
case 75:
this.$ = [$$[$0-2],"[]"];
break;
case 76:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 78:
this.$ = ["Object", $$[$0]];
break;
case 79:
this.$ = [$$[$0],$$[$0-2]]
break;
case 82:
this.$ = [];
break;
case 86: case 88: case 98:
this.$ = [$$[$0]];
break;
case 91:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 92:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 93:
this.$ = ["else",$$[$0]];
break;
case 94:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 95:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 96:
this.$ = $$[$0];
break;
case 99:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{1:[3]},{5:[1,25]},o($Vd,[2,3],{6:3,21:4,14:5,36:11,46:15,33:16,52:17,59:18,11:19,4:26,12:$V0,13:$V1,16:$V2,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,37:$V8,47:$V9,48:$Va,88:$Vb,91:$Vc}),{22:[1,27]},o($Ve,[2,14]),{24:[1,28]},{16:$V2,17:$Vf,21:31,27:29,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{24:[1,32]},{24:[1,33]},{24:[1,34]},o($Ve,[2,21]),{16:[1,35]},{24:[1,36]},{16:$Vg,24:$Vh,25:37,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{33:51,91:$Vc},{49:[1,53],50:[1,52],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],60:[1,60]},{49:[1,61]},o($Vo,[2,42]),{15:[1,62]},{24:[1,63]},{24:$Vp,50:$Vq,70:$Vr,91:$Vs},{16:[1,67]},o($Vt,[2,8]),o($Vt,[2,9]),{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,13]),{16:$Vg,24:$Vh,25:68,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{23:[1,69]},{4:71,6:3,9:70,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{22:[1,72]},{16:$Vg,24:$Vh,25:73,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$V2,21:74,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{33:75,91:$Vc},{24:[1,76]},{16:$Vg,24:$Vh,25:77,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($Vo,[2,31],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),{16:$Vg,24:$Vh,33:48,37:$Vi,50:$Vj,52:43,59:44,64:92,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:93,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($VI,[2,60]),o($VI,[2,62],{77:[1,94]}),{24:[1,95]},o($VJ,[2,67]),o($VJ,[2,68]),{16:$Vg,24:$Vh,25:98,33:48,37:$Vi,50:$Vj,51:[1,96],52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,79:97,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:99,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($VJ,[2,72]),o($VJ,[2,73],{50:[1,100]}),o($VJ,[2,74]),{24:$Vp},{49:[1,101]},{16:$Vg,24:$Vh,25:104,33:48,37:$Vi,50:$Vj,51:[1,102],52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,78:103,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:105,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($Vo,[2,36]),o($Vo,[2,37]),{16:$Vg,24:$Vh,25:106,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:107,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:108,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:109,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,33:48,37:$Vi,50:$Vj,52:43,59:44,61:110,64:41,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:111,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:[1,112]},{16:$Vg,24:$Vh,25:113,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{51:[1,114]},{16:$VK,46:116,82:115},{16:$Vg,24:$Vh,25:98,26:[1,118],33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,79:119,80:$Vm,81:$Vn,91:$Vc},o([22,26,34,35,39,49,50,51,53,54,55,56,57,58,60,62,65,66,67,68,69,70,71,72,73,74,75,76,77,84,85],[2,96]),{26:[1,120],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{24:[1,121]},{18:[1,122]},o([18,42],[2,5]),o($VL,[2,100]),{26:[1,123],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{22:[1,124]},{34:[1,125]},{26:$VM,33:128,38:126,83:127,91:$Vc},{26:[1,129],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{16:$Vg,24:$Vh,25:130,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:131,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:132,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:133,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:134,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:135,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:136,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:137,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:138,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:139,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:140,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:141,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:142,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:143,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($VI,[2,45]),o($VI,[2,59]),{16:$Vg,24:$Vh,33:48,37:$Vi,50:$Vj,52:43,59:44,61:144,64:41,80:$Vm,81:$Vn,91:$Vc},{26:$VM,33:128,38:145,83:127,91:$Vc},o($VJ,[2,69]),{51:[1,146]},o($VN,[2,86],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,84:[1,147]}),{26:[1,148],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{16:$Vg,24:$Vh,25:104,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,78:103,80:$Vm,81:$Vn,91:$Vc},{16:$Vg,24:$Vh,25:149,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{49:[1,150]},{51:[1,151]},{51:[2,84],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,85:[1,152]},o($Vo,[2,35],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vo,[2,38],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vo,[2,39],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vo,[2,40],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vo,[2,41],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vo,[2,43]),o($Vo,[2,34],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),{17:[1,153],19:[1,154],20:[1,155]},{26:[1,156],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($VO,[2,75]),{72:[1,157]},{72:[2,88],84:[1,158]},o([16,72,84],$Vs,{50:$Vq,70:$Vr}),o($VJ,[2,64]),{26:[1,159]},{16:$V2,17:$Vf,21:31,27:160,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{16:$Vg,24:$Vh,25:161,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($VL,[2,99]),{17:[1,162]},{16:$Vg,24:$Vh,25:163,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{33:164,91:$Vc},{26:[1,165]},{26:[2,81],84:[1,166]},o($VP,[2,78],{39:[1,167]}),o($Vo,[2,30]),{39:[1,168],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o([22,26,39,51,62,65,84,85],[2,46],{60:$Vu,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o([22,26,39,51,62,65,66,84,85],[2,47],{60:$Vu,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,48],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,49],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,50],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,51],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,52],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,53],{60:$Vu,73:$VE,74:$VF,75:$VG,76:$VH}),o($VR,[2,54],{75:$VG,76:$VH}),o($VR,[2,55],{75:$VG,76:$VH}),o($VR,[2,56],{75:$VG,76:$VH}),o($VI,[2,57]),o($VI,[2,58]),o($VI,[2,61]),{26:[1,169]},o($VJ,[2,70]),{16:$Vg,24:$Vh,25:98,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,79:170,80:$Vm,81:$Vn,91:$Vc},o($VJ,[2,71]),o($Vo,[2,32],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),{16:$Vg,24:$Vh,25:171,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o([22,26,39,49,51,60,62,65,66,67,68,69,70,71,72,73,74,75,76,77,84,85],[2,63]),{16:$Vg,24:$Vh,25:104,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,78:172,80:$Vm,81:$Vn,91:$Vc},{7:173,8:174,10:175,11:176,12:$V0,13:$V1},{16:[1,177]},{16:[1,178]},{16:$V2,17:$Vf,21:31,27:179,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},o($VO,[2,76]),{16:$VK,46:116,82:180},o($VJ,[2,65]),o($Ve,[2,15]),{26:[1,181],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{30:182,40:184,41:$VS,43:183},{22:[1,186],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,188],35:[1,187]},{17:[1,189],39:[1,190]},{26:$VM,33:128,38:191,83:127,91:$Vc},{16:[1,192]},{16:$Vg,24:$Vh,25:193,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{17:[1,194]},o($VN,[2,85]),o($Vo,[2,33],{60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),{51:[2,83]},{18:[1,195]},{18:[2,4]},{8:196,10:175,11:176,12:$V0,13:$V1,18:[2,7]},{45:[1,197]},{17:[1,198]},{17:[1,199]},o($Ve,[2,95],{90:200,86:201,87:$VT,89:$VU}),{72:[2,87]},{22:[1,204]},{18:[1,205]},{18:[2,28],44:[1,206]},o($VV,[2,26],{40:184,43:207,41:$VS}),{16:$Vg,24:$Vh,25:208,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},{16:$V2,21:209,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{33:210,91:$Vc},{16:$V2,17:$Vf,21:31,27:211,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{4:71,6:3,9:212,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{16:[1,213]},{26:[2,80]},o($VP,[2,79]),o([22,26,39,51,62,84,85],[2,44],{60:$Vu,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),{4:71,6:3,9:214,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},o($Ve,[2,10]),{18:[2,6]},{16:$VK,46:215},{7:216,8:174,10:175,11:176,12:$V0,13:$V1},{7:217,8:174,10:175,11:176,12:$V0,13:$V1},o($Ve,[2,94]),{24:[1,218]},{16:$V2,17:$Vf,21:31,27:219,33:16,46:15,47:$V9,48:$Va,52:17,59:18,88:[1,220],91:$Vc},{24:[2,90]},o($Ve,[2,16]),o($Ve,[2,17]),{39:[1,221]},o($VV,[2,25]),{39:[1,222],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,223]},{26:[1,224]},o($Ve,[2,20]),{18:[1,225]},{17:[1,226]},{18:[1,227]},{16:[1,228]},{18:[1,229]},{18:[1,230]},{16:$Vg,24:$Vh,25:231,33:48,37:$Vi,50:$Vj,52:43,59:44,61:40,63:$Vk,64:41,74:$Vl,80:$Vm,81:$Vn,91:$Vc},o($Ve,[2,93]),{24:[2,89]},{4:71,6:3,9:232,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{4:71,6:3,9:233,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{16:$V2,17:$Vf,21:31,27:234,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{16:$V2,17:$Vf,21:31,27:235,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},o($Ve,[2,22]),{4:71,6:3,9:236,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},o($VJ,[2,66]),{24:[1,237]},o($Ve,[2,11]),o($Ve,[2,12]),{26:[1,238],60:$Vu,62:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{18:[2,27]},{42:[1,239]},o($Ve,[2,18]),o($Ve,[2,19]),{18:[1,240]},{26:$VM,33:128,38:241,83:127,91:$Vc},{16:$V2,17:$Vf,21:31,27:242,33:16,46:15,47:$V9,48:$Va,52:17,59:18,91:$Vc},{22:[1,243]},o($Ve,[2,23]),{26:[1,244]},o($Ve,[2,92],{86:201,90:245,87:$VT,89:$VU}),o([18,41,44],[2,24]),{17:[1,246]},o($Ve,[2,91]),{4:71,6:3,9:247,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:11,37:$V8,46:15,47:$V9,48:$Va,52:17,59:18,88:$Vb,91:$Vc},{18:[1,248]},o([12,13,18],[2,29])],
defaultActions: {25:[2,1],172:[2,83],174:[2,4],180:[2,87],191:[2,80],196:[2,6],203:[2,90],220:[2,89],232:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 80
break;
case 2:return 81
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "implements"
break;
case 9:return "private"
break;
case 10:return "static"
break;
case 11:return "if"
break;
case 12:return "elseif"
break;
case 13:return "else"
break;
case 14:return "return"
break;
case 15:return "as"
break;
case 16:return "while"
break;
case 17:return "break"
break;
case 18:return "switch"
break;
case 19:return "default"
break;
case 20:return "case"
break;
case 21:return "foreach"
break;
case 22:return "for"
break;
case 23:return 84
break;
case 24:return 35
break;
case 25:return 77
break;
case 26:return 22
break;
case 27:return 39
break;
case 28:return 66
break;
case 29:return 65
break;
case 30:return 71
break;
case 31:return 72
break;
case 32:return 69
break;
case 33:return 70
break;
case 34:return 68
break;
case 35:return 67
break;
case 36:return 49
break;
case 37:return 57
break;
case 38:return 75
break;
case 39:return 58
break;
case 40:return 76
break;
case 41:return 56
break;
case 42:return 54
break;
case 43:return 74
break;
case 44:return 53
break;
case 45:return 55
break;
case 46:return 73
break;
case 47:return 63
break;
case 48:return 60
break;
case 49:return '^'
break;
case 50:return 62
break;
case 51:return 17
break;
case 52:return 18
break;
case 53:return 85
break;
case 54:return 50
break;
case 55:return 51
break;
case 56:return 24
break;
case 57:return 26
break;
case 58:return 16
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = hack_parser;
exports.Parser = hack_parser.Parser;
exports.parse = function () { return hack_parser.parse.apply(hack_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}