/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vb_net_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,24],$V2=[1,8],$V3=[1,10],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,6],$Vf=[1,25],$Vg=[1,26],$Vh=[5,24,36,38,40,45,54,119,120],$Vi=[5,19,23,24,27,29,35,36,38,39,40,42,45,46,49,50,54,61,62,63,64,67,71,72,119,120],$Vj=[1,52],$Vk=[1,53],$Vl=[1,44],$Vm=[1,47],$Vn=[1,46],$Vo=[1,51],$Vp=[1,58],$Vq=[1,61],$Vr=[1,63],$Vs=[2,110],$Vt=[1,75],$Vu=[1,92],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,119,120],$VK=[1,104],$VL=[5,11,19,23,24,27,29,30,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,79,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,119,120],$VM=[2,108],$VN=[2,130],$VO=[1,119],$VP=[1,131],$VQ=[1,140],$VR=[2,117],$VS=[1,139],$VT=[32,54,106],$VU=[32,54,83,106],$VV=[1,186],$VW=[1,187],$VX=[1,201],$VY=[1,202],$VZ=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,67,71,72,83,86,87,88,89,90,106,119,120],$V_=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,83,86,87,88,89,90,91,92,94,106,119,120],$V$=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,83,86,87,88,89,90,91,92,93,94,95,106,119,120],$V01=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,83,86,87,88,89,90,91,92,93,94,95,96,97,106,119,120],$V11=[2,99],$V21=[32,83],$V31=[1,215],$V41=[58,59],$V51=[1,236],$V61=[5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,65,67,71,72,79,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,119,120],$V71=[5,11,19,23,24,27,29,35,36,38,39,40,42,45,46,49,50,54,61,62,63,64,67,71,72,119,120],$V81=[19,20,24],$V91=[1,298],$Va1=[54,83];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"0":68,"error":2,"expressions":3,"statements_":4,"EOF":5,"statements_with_vars":6,"initialize_var_":7,"statements_without_vars":8,"statement":9,"initialize_var1":10,";":11,"initialize_vars":12,"initialize_var":13,"class_statements":14,"class_statements_":15,"statements":16,"class_statement":17,"access_modifier":18,"Public":19,"Private":20,"class_":21,"Class":22,"IDENTIFIER":23,"End":24,"top_level_statement":25,"top_level_statements":26,"import":27,"statement_with_semicolon":28,"Function":29,"(":30,"parameters":31,")":32,"As":33,"type":34,"Do":35,"While":36,"e":37,"Loop":38,"Select":39,"Case":40,"case_statements":41,"For":42,"Each":43,"In":44,"Next":45,"If":46,"Then":47,"elif":48,"Sub":49,"public":50,"static":51,"async":52,"{":53,"}":54,"statement_with_semicolon_":55,"case_statement":56,"case_statements_":57,"Shared":58,"Property":59,"Type":60,"yield":61,"return":62,"throw":63,"final":64,"=":65,"identifiers":66,"Dim":67,"To":69,"access_array":70,"++":71,"--":72,"+=":73,"|=":74,"-=":75,"*=":76,"/=":77,"%=":78,".":79,"dot_expr":80,"exprs":81,"key_values":82,",":83,"key_value":84,"STRING_LITERAL":85,"?":86,":":87,"is":88,"OrElse":89,"AndAlso":90,"<>":91,"<=":92,"<":93,">=":94,">":95,"+":96,"-":97,"*":98,"/":99,"mod":100,"initializer_list":101,"not_expr":102,"Not":103,"parentheses_expr":104,"[":105,"]":106,"new":107,"Dictionary":108,"named_parameters":109,"NUMBER":110,"square_brackets":111,"parameter":112,"ByRef":113,"expr":114,"ref":115,"named_parameter":116,":=":117,"types":118,"ElseIf":119,"Else":120,"add":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",19:"Public",20:"Private",22:"Class",23:"IDENTIFIER",24:"End",27:"import",29:"Function",30:"(",32:")",33:"As",35:"Do",36:"While",38:"Loop",39:"Select",40:"Case",42:"For",43:"Each",44:"In",45:"Next",46:"If",47:"Then",49:"Sub",50:"public",51:"static",52:"async",53:"{",54:"}",58:"Shared",59:"Property",60:"Type",61:"yield",62:"return",63:"throw",64:"final",65:"=",67:"Dim",68:"0",69:"To",71:"++",72:"--",73:"+=",74:"|=",75:"-=",76:"*=",77:"/=",78:"%=",79:".",83:",",85:"STRING_LITERAL",86:"?",87:":",88:"is",89:"OrElse",90:"AndAlso",91:"<>",92:"<=",93:"<",94:">=",95:">",96:"+",97:"-",98:"*",99:"/",100:"mod",103:"Not",105:"[",106:"]",107:"new",108:"Dictionary",110:"NUMBER",113:"ByRef",115:"ref",117:":=",119:"ElseIf",120:"Else"},
productions_: [0,[3,2],[4,1],[4,1],[4,2],[8,2],[8,1],[6,3],[6,1],[12,3],[12,1],[14,1],[16,1],[15,2],[15,1],[18,1],[18,1],[21,6],[25,1],[25,1],[26,2],[26,1],[9,2],[9,1],[9,10],[9,1],[9,7],[9,6],[9,8],[9,7],[9,7],[9,8],[9,6],[9,7],[9,8],[9,11],[55,1],[55,1],[56,3],[57,2],[57,1],[41,1],[17,10],[17,5],[28,3],[28,2],[28,2],[28,5],[28,3],[28,9],[28,2],[28,3],[28,3],[28,2],[28,2],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[10,1],[13,1],[7,10],[7,6],[82,3],[82,1],[84,5],[37,5],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,4],[37,4],[37,3],[37,3],[37,3],[37,3],[37,3],[37,1],[37,2],[37,1],[102,2],[102,1],[80,3],[80,3],[80,1],[70,4],[101,4],[101,5],[104,3],[104,10],[104,1],[104,3],[104,4],[104,4],[104,4],[104,5],[104,1],[104,1],[104,1],[34,1],[111,3],[111,2],[112,4],[112,3],[31,3],[31,1],[31,0],[81,3],[81,1],[114,2],[114,1],[109,3],[109,1],[116,3],[118,3],[118,1],[48,6],[48,2],[66,3],[66,1],[121,3],[121,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 3:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 4:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],["statements",$$[$0]]]]
break;
case 5: case 20:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 6: case 10: case 14: case 21: case 40: case 95: case 116:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 9: case 68: case 122:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 11:
this.$ = ["class_statements",$$[$0]]
break;
case 12:
this.$ = ["statements",$$[$0]]
break;
case 13: case 39:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 17:
this.$ = ["class","public",$$[$0-3],$$[$0-2]];
break;
case 19:
this.$ = ["semicolon",$$[$0]]
break;
case 22:
this.$ = ["import",$$[$0]];
break;
case 23:
this.$ = ["semicolon",$$[$0]];
break;
case 24:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-2]];
break;
case 26:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["do_while",$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["switch",$$[$0-4],$$[$0-2]];
break;
case 29:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 30: case 31:
this.$ = ["if",$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 32: case 33:
this.$ = ["if",$$[$0-4],$$[$0-2]];
break;
case 34:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 42:
this.$ = ["static_method",$$[$0-9],"void",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 43:
this.$ = ["initialize_instance_var",$$[$0-4],$$[$0],$$[$0-2]];
break;
case 44:
this.$ = ["yield",$$[$0]];
break;
case 45:
this.$ = ["return",$$[$0]];
break;
case 46:
this.$ = ["throw",$$[$0]];
break;
case 47:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 49:
this.$ = ["set_array_size",$$[$0],$$[$0-7],$$[$0-3]];
break;
case 50:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 51: case 52:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 53: case 54:
this.$ = [$$[$0],$$[$0-1]];
break;
case 55: case 56:
this.$ = [$$[$0-1],$$[$0]];
break;
case 57: case 58: case 59: case 60: case 61: case 62: case 72: case 75: case 76: case 77: case 78: case 79: case 80: case 83: case 84: case 85: case 86:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 63:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 64:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 65:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 66:
this.$ = [$$[$0-4],$$[$0-8],["initializer_list",$$[$0-9],$$[$0-1]]]
break;
case 67:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 69: case 119: case 121: case 123: case 126: case 130: case 132:
this.$ = [$$[$0]];
break;
case 70:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 71:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 73:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 74:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 81:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 82:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 87:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 89:
this.$ = ["-",$$[$0]];
break;
case 91:
this.$ = ["!", [".",$$[$0]]];
break;
case 92:
this.$ = [".", $$[$0]];
break;
case 93: case 94: case 115: case 118: case 125: case 129: case 131:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 96:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 97:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 98:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 99:
this.$= ["parentheses",$$[$0-1]];
break;
case 100:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 102:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 103: case 104:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 105:
this.$= ["new",$$[$0-2],[]];
break;
case 106:
this.$= ["new",$$[$0-3],$$[$0-1]];
break;
case 107: case 108: case 109:
this.$ = yytext;
break;
case 111:
this.$ = $$[$0-2].concat(["[]"]);
break;
case 112:
this.$ = ["[]"]
break;
case 113:
this.$ = ["ref_parameter",$$[$0],$$[$0-2]]
break;
case 114:
this.$ = [$$[$0],$$[$0-2]];
break;
case 117:
this.$= []
break;
case 120:
this.$ = ["function_call_ref",$$[$0]];
break;
case 124:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 127:
this.$ = ["elif",$$[$0-2],$$[$0],$$[$01]]
break;
case 128:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{1:[3]},{5:[1,28]},o($Vh,[2,2]),o($Vh,[2,3],{6:3,7:4,8:5,9:7,28:9,21:11,34:22,70:23,4:29,19:$V0,23:$V1,27:$V2,29:$V3,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,71:$Vf,72:$Vg}),o($Vh,[2,8],{28:9,21:11,34:22,70:23,10:30,9:31,7:32,19:$V0,23:$V1,27:$V2,29:$V3,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,71:$Vf,72:$Vg}),{23:[1,33]},o($Vi,[2,6]),{23:[1,34]},o($Vi,[2,23]),{23:[1,35]},o($Vi,[2,25]),{4:38,6:3,7:4,8:5,9:7,16:37,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,36:[1,36],39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{40:[1,39]},{43:[1,40]},{23:$Vj,30:[1,42],37:41,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:[1,54]},{51:[1,55]},{62:[1,56]},{23:$Vj,30:$Vp,37:57,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:59,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vq,34:60},{23:$Vr,66:62},{65:[1,64]},{23:$Vs,65:[1,65],71:[1,66],72:[1,67],73:[1,68],74:[1,69],75:[1,70],76:[1,71],77:[1,72],78:[1,73],79:[1,74],105:$Vt},{23:[1,76]},{23:[1,77]},{22:[1,78]},{1:[2,1]},o($Vh,[2,4]),{11:[1,79]},o($Vi,[2,5]),{11:[2,64]},{30:[1,80],33:[1,81]},o($Vi,[2,22]),{30:[1,82]},{30:[1,83]},{36:[1,84]},o([24,36,38,40,45,54,119,120],[2,12]),{30:[1,85]},{23:[1,86]},{47:[1,87],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{23:$Vj,30:$Vp,37:103,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($VJ,[2,88],{79:$VK}),{23:$Vj,30:$Vp,37:105,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($VJ,[2,90]),{23:[1,108],34:106,108:[1,107]},{23:$Vj,30:$Vp,70:50,80:109,85:$Vk,101:110,104:49,107:$Vn,110:$Vo},o($VJ,[2,92]),o($VJ,[2,95],{30:[1,112],79:[1,111]}),o($VL,[2,101]),o($VL,[2,107]),o($VL,$VM,{105:$Vt}),o($VL,[2,109]),{30:[1,113]},{52:[1,114]},{23:$Vj,30:$Vp,37:115,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($Vi,[2,45],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{23:$Vj,30:$Vp,37:116,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($Vi,[2,46],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{23:[1,117],66:118},o([5,19,23,24,27,29,32,35,36,38,39,40,42,45,46,49,50,54,61,62,63,64,65,67,71,72,83,95,119,120],$Vs),o($Vi,[2,50]),o($Vi,$VN,{83:$VO}),{23:$Vj,30:$Vp,37:120,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:121,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($Vi,[2,53]),o($Vi,[2,54]),{23:$Vj,30:$Vp,37:122,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:123,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:124,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:125,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:126,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:127,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,70:50,80:128,85:$Vk,101:110,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:132,70:50,80:48,81:129,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo,114:130,115:$VP},o($Vi,[2,55]),o($Vi,[2,56]),{23:[1,133]},o($Vh,[2,7]),{32:[1,134],68:[1,135]},{23:$Vq,34:136},{23:$VQ,31:137,32:$VR,112:138,113:$VS},{23:$Vj,30:$Vp,37:141,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{30:[1,142]},{23:$Vj,30:$Vp,37:143,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{44:[1,144]},{4:38,6:3,7:4,8:5,9:7,16:145,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{23:$Vj,30:$Vp,37:146,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:147,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:148,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:149,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:150,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:151,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:152,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:153,70:50,80:48,85:$Vk,93:[1,154],97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:155,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:156,70:50,80:48,85:$Vk,95:[1,157],97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:158,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:159,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:160,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:161,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:162,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{32:[1,163],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{23:$Vj,30:$Vp,70:50,80:164,85:$Vk,101:110,104:49,107:$Vn,110:$Vo},o($VJ,[2,89]),{53:[1,165]},{93:[1,166]},{30:[1,167],53:$Vs},o($VJ,[2,91]),{79:$VK},{23:$Vj,30:$Vp,70:50,80:168,85:$Vk,101:110,104:49,107:$Vn,110:$Vo},{23:[1,173],30:$Vp,32:[1,169],37:132,70:50,80:48,81:171,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,109:170,110:$Vo,114:130,115:$VP,116:172},{23:$VQ,31:174,32:$VR,112:138,113:$VS},{23:$Vq,34:175},o($Vi,[2,44],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{32:[1,176],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($Vi,$VN,{65:[1,177],83:$VO}),o($Vi,[2,48]),{23:$Vr,66:178},o($Vi,[2,51],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,52],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,57],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,58],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,59],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,60],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,61],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,62],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($Vi,[2,63]),{106:[1,179]},o($VT,[2,119],{83:[1,180]}),{23:$Vj,30:$Vp,37:181,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($VU,[2,121],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{14:182,15:183,17:184,18:185,19:$VV,20:$VW},{33:[1,188]},{69:[1,189]},{65:[1,190]},{32:[1,191]},{32:[2,116],83:[1,192]},{23:[1,193]},{33:[1,194]},{32:[1,195],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{23:$Vj,30:$Vp,37:196,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{32:[1,197],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{23:[1,198]},{24:[1,200],48:199,119:$VX,120:$VY},{65:$Vu,86:$Vv,87:[1,203],88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($VZ,[2,72],{65:$Vu,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($VZ,[2,73],{65:$Vu,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($VZ,[2,74],{65:$Vu,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V_,[2,75],{93:$VB,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V_,[2,76],{93:$VB,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V_,[2,77],{93:$VB,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V$,[2,78],{96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{23:$Vj,30:$Vp,37:204,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($V_,[2,79],{93:$VB,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V$,[2,80],{96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{23:$Vj,30:$Vp,37:205,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($V01,[2,83],{98:$VG,99:$VH,100:$VI}),o($V01,[2,84],{98:$VG,99:$VH,100:$VI}),o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),o([30,47,65,79,86,88,89,90,91,92,93,94,95,96,97,98,99,100],$V11,{6:3,7:4,8:5,9:7,28:9,21:11,34:22,70:23,4:38,16:206,19:$V0,23:$V1,27:$V2,29:$V3,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,71:$Vf,72:$Vg}),o($VJ,[2,93]),{23:$Vj,30:$Vp,37:132,54:[1,207],70:50,80:48,81:208,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo,114:130,115:$VP},{23:$Vq,34:209},{23:$Vj,30:$Vp,32:[1,210],37:132,70:50,80:48,81:211,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo,114:130,115:$VP},o($VJ,[2,94]),o($VL,[2,102]),{32:[1,212],83:[1,213]},{32:[1,214]},o($V21,[2,123]),o([30,32,65,79,83,86,88,89,90,91,92,93,94,95,96,97,98,99,100],$VM,{105:$Vt,117:$V31}),{32:[1,216]},{23:[1,217]},o($VL,$V11),{23:$Vj,30:$Vp,37:218,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($Vi,[2,129]),o($VL,[2,96]),{23:$Vj,30:$Vp,37:132,70:50,80:48,81:219,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo,114:130,115:$VP},o($VU,[2,120],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{24:[1,220]},{24:[2,11]},{15:221,17:184,18:185,19:$VV,20:$VW,24:[2,14]},{58:[1,222],59:[1,223]},o($V41,[2,15]),o($V41,[2,16]),{23:$Vq,34:224},{23:$Vj,30:$Vp,37:225,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{23:$Vj,30:$Vp,37:226,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{33:[1,227]},{23:$VQ,31:228,32:$VR,112:138,113:$VS},{33:[1,229]},{23:$Vq,34:230},{4:38,6:3,7:4,8:5,9:7,16:231,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{32:[1,232],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{40:$V51,41:233,56:235,57:234},{4:38,6:3,7:4,8:5,9:7,16:237,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{24:[1,238]},{46:[1,239]},{30:[1,240]},{4:38,6:3,7:4,8:5,9:7,16:241,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{23:$Vj,30:$Vp,37:242,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},o($V$,[2,82],{96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($V$,[2,81],{96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{24:[1,244],48:243,119:$VX,120:$VY},o($V61,[2,97]),{54:[1,245]},{83:[1,246]},o($VL,[2,105]),{32:[1,247]},o($VL,[2,103]),{23:[1,249],116:248},o($VL,[2,104]),{23:$Vj,30:$Vp,37:250,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{4:38,6:3,7:4,8:5,9:7,16:251,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{30:[1,252]},o($Vi,[2,47],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),o($VT,[2,118]),{22:[1,253]},{24:[2,13]},{49:[1,254]},{23:[1,255]},{65:[1,256]},{32:[1,257],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V71,[2,67],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{23:$Vq,34:258},{32:[2,115]},{23:$Vq,34:259},o($V21,[2,114]),{38:[1,260]},o($Vi,[2,27]),{24:[1,261]},{24:[2,41]},{24:[2,40],40:$V51,56:235,57:262},{23:$Vj,30:$Vp,37:263,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{45:[1,264]},{46:[1,265]},o($Vi,[2,32]),{23:$Vj,30:$Vp,37:266,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{24:[2,128]},o([5,11,19,23,24,27,29,32,35,36,38,39,40,42,45,46,47,49,50,54,61,62,63,64,67,71,72,83,87,106,119,120],[2,71],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{24:[1,267]},{46:[1,268]},o($V61,[2,98]),{23:$Vq,34:269},o($VL,[2,106]),o($V21,[2,122]),{117:$V31},o($V21,[2,124],{65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI}),{24:[1,270]},{23:$VQ,31:271,32:$VR,112:138,113:$VS},o($Vi,[2,17]),{23:[1,272]},{33:[1,273]},{53:[1,274]},{33:[1,275]},{4:38,6:3,7:4,8:5,9:7,16:276,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},o($V21,[2,113]),o($Vi,[2,26]),{39:[1,277]},{24:[2,39]},{4:38,6:3,7:4,8:5,9:7,16:278,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Vu,67:$Ve,70:23,71:$Vf,72:$Vg,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($Vi,[2,29]),o($Vi,[2,30]),{32:[1,279],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{46:[1,280]},o($Vi,[2,33]),{95:[1,281]},{49:[1,282]},{32:[1,283]},{30:[1,284]},{60:[1,285]},{23:$Vj,30:$Vp,37:132,70:50,80:48,81:286,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo,114:130,115:$VP},{23:$Vq,34:287},{24:[1,288]},o($Vi,[2,28]),o([24,40],[2,38]),{4:38,6:3,7:4,8:5,9:7,16:289,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},o($Vi,[2,31]),{53:[1,290]},o($Vi,[2,34]),{53:[1,291]},{23:$VQ,31:292,32:$VR,112:138,113:$VS},o($V81,[2,43]),{54:[1,293]},o($Vi,[2,49]),{29:[1,294]},{48:295,119:$VX,120:$VY},{53:$V91,82:296,84:297},{4:38,6:3,7:4,8:5,9:7,16:299,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},{32:[1,300]},o($V71,[2,66]),o($Vi,[2,24]),{24:[2,127]},{54:[1,301],83:[1,302]},o($Va1,[2,69]),{85:[1,303]},{54:[1,304]},{4:38,6:3,7:4,8:5,9:7,16:305,19:$V0,21:11,23:$V1,27:$V2,28:9,29:$V3,34:22,35:$V4,39:$V5,42:$V6,46:$V7,49:$V8,50:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:$Ve,70:23,71:$Vf,72:$Vg},o($VL,[2,100]),{53:$V91,84:306},{83:[1,307]},o($Vi,[2,35]),{24:[1,308]},o($Va1,[2,68]),{23:$Vj,30:$Vp,37:309,70:50,80:48,85:$Vk,97:$Vl,101:43,102:45,103:$Vm,104:49,107:$Vn,110:$Vo},{49:[1,310]},{54:[1,311],65:$Vu,86:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V81,[2,42]),o($Va1,[2,70])],
defaultActions: {28:[2,1],32:[2,64],183:[2,11],221:[2,13],228:[2,115],234:[2,41],241:[2,128],262:[2,39],295:[2,127]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 110
break;
case 2:return 85
break;
case 3:return "Loop"
break;
case 4:return "As"
break;
case 5:return 103
break;
case 6:return 67
break;
case 7:return 19
break;
case 8:return 22
break;
case 9:return 40
break;
case 10:return "End"
break;
case 11:return "Enum"
break;
case 12:return "Inherits"
break;
case 13:return "MustOverride"
break;
case 14:return "import"
break;
case 15:return "Sub"
break;
case 16:return "interface"
break;
case 17:return "Function"
break;
case 18:return "private"
break;
case 19:return "Shared"
break;
case 20:return "If"
break;
case 21:return "Do"
break;
case 22:return "In"
break;
case 23:return "ByRef"
break;
case 24:return "out"
break;
case 25:return "Else"
break;
case 26:return "return"
break;
case 27:return "throw"
break;
case 28:return "While"
break;
case 29:return "Select"
break;
case 30:return "async"
break;
case 31:return "Each"
break;
case 32:return "For"
break;
case 33:return "new"
break;
case 34:return ":="
break;
case 35:return 91
break;
case 36:return '!'
break;
case 37:return 83
break;
case 38:return 11
break;
case 39:return 79
break;
case 40:return 87
break;
case 41:return '&='
break;
case 42:return 90
break;
case 43:return 74
break;
case 44:return 89
break;
case 45:return 94
break;
case 46:return 95
break;
case 47:return 92
break;
case 48:return 93
break;
case 49:return 65
break;
case 50:return 78
break;
case 51:return 100
break;
case 52:return 76
break;
case 53:return 98
break;
case 54:return 77
break;
case 55:return 99
break;
case 56:return 75
break;
case 57:return 72
break;
case 58:return 97
break;
case 59:return 71
break;
case 60:return 73
break;
case 61:return 96
break;
case 62:return '^'
break;
case 63:return 86
break;
case 64:return 53
break;
case 65:return 54
break;
case 66:return 105
break;
case 67:return 106
break;
case 68:return 30
break;
case 69:return 32
break;
case 70:return 23
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:Loop\b)/i,/^(?:As\b)/i,/^(?:Not\b)/i,/^(?:Dim\b)/i,/^(?:Public\b)/i,/^(?:Class\b)/i,/^(?:Case\b)/i,/^(?:End\b)/i,/^(?:Enum\b)/i,/^(?:Inherits\b)/i,/^(?:MustOverride\b)/i,/^(?:import\b)/i,/^(?:Sub\b)/i,/^(?:interface\b)/i,/^(?:Function\b)/i,/^(?:private\b)/i,/^(?:Shared\b)/i,/^(?:If\b)/i,/^(?:Do\b)/i,/^(?:In\b)/i,/^(?:ByRef\b)/i,/^(?:out\b)/i,/^(?:Else\b)/i,/^(?:return\b)/i,/^(?:throw\b)/i,/^(?:While\b)/i,/^(?:Select\b)/i,/^(?:async\b)/i,/^(?:Each\b)/i,/^(?:For\b)/i,/^(?:new\b)/i,/^(?::=)/i,/^(?:<>)/i,/^(?:!)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:&=)/i,/^(?:AndAlso\b)/i,/^(?:\|=)/i,/^(?:OrElse\b)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:%=)/i,/^(?:mod\b)/i,/^(?:\*=)/i,/^(?:\*)/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:-=)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vb_net_parser;
exports.Parser = vb_net_parser.Parser;
exports.parse = function () { return vb_net_parser.parse.apply(vb_net_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}