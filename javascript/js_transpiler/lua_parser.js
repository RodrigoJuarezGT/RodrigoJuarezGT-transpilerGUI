/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lua_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,17],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,6],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[5,20,77,78],$Vc=[5,17,20,21,24,27,33,36,38,39,69,72,73,77,78],$Vd=[1,41],$Ve=[1,37],$Vf=[1,36],$Vg=[1,32],$Vh=[1,33],$Vi=[2,67],$Vj=[1,55],$Vk=[1,54],$Vl=[5,17,19,20,21,24,26,27,30,32,33,34,36,38,39,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,69,70,72,73,77,78],$Vm=[2,68],$Vn=[2,87],$Vo=[1,64],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,70,72,73,77,78],$VF=[5,17,19,20,21,24,26,27,32,33,34,36,38,39,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,70,72,73,77,78],$VG=[32,70],$VH=[26,70],$VI=[26,30,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,70],$VJ=[1,105],$VK=[1,106],$VL=[1,130],$VM=[2,78],$VN=[26,43],$VO=[5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,49,50,51,52,53,54,55,67,69,70,72,73,77,78],$VP=[5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,49,50,51,52,53,54,55,56,57,58,67,69,70,72,73,77,78],$VQ=[5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,49,50,51,52,53,54,55,56,57,58,59,60,61,67,69,70,72,73,77,78],$VR=[1,156],$VS=[1,157],$VT=[5,17,20,21,24,26,27,33,36,38,39,69,72,73,77,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statements_with_vars":6,"initialize_var_":7,"statements_without_vars":8,"statement":9,"initialize_var1":10,"initialize_vars":11,"initialize_var":12,"statements":13,"top_level_statement":14,"top_level_statements":15,"statement_with_semicolon":16,"while":17,"e":18,"do":19,"end":20,"repeat":21,"bracket_statements":22,"until":23,"for":24,"_":25,",":26,"IDENTIFIER":27,"in":28,"pairs":29,"(":30,"dot_expr":31,")":32,"if":33,"then":34,"elif":35,"function":36,"parameters":37,"return":38,"local":39,"identifiers":40,"parallel_assignment":41,"access_array":42,"=":43,".":44,"function_call":45,"parallel_lhs":46,"parallel_rhs":47,"or":48,"and":49,"<=":50,"<":51,">=":52,"==":53,"~=":54,">":55,"+":56,"-":57,"..":58,"*":59,"/":60,"%":61,"^":62,"not":63,"parentheses_expr":64,"parentheses_expr_":65,"[":66,"]":67,"exprs":68,"{":69,"}":70,"key_values":71,"NUMBER":72,"STRING_LITERAL":73,"type":74,"parameter":75,"types":76,"elseif":77,"else":78,"key_value":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"while",19:"do",20:"end",21:"repeat",22:"bracket_statements",23:"until",24:"for",25:"_",26:",",27:"IDENTIFIER",28:"in",29:"pairs",30:"(",32:")",33:"if",34:"then",36:"function",38:"return",39:"local",43:"=",44:".",48:"or",49:"and",50:"<=",51:"<",52:">=",53:"==",54:"~=",55:">",56:"+",57:"-",58:"..",59:"*",60:"/",61:"%",62:"^",63:"not",66:"[",67:"]",69:"{",70:"}",72:"NUMBER",73:"STRING_LITERAL",77:"elseif",78:"else"},
productions_: [0,[3,2],[4,1],[4,1],[4,2],[8,2],[8,1],[6,2],[6,1],[11,2],[11,1],[13,1],[14,1],[14,1],[15,2],[15,1],[9,1],[9,5],[9,4],[9,12],[9,12],[9,9],[9,6],[9,5],[9,7],[16,2],[16,2],[16,1],[16,3],[16,3],[16,3],[16,1],[41,3],[46,3],[46,3],[47,3],[47,3],[10,1],[12,1],[7,4],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,2],[18,1],[31,3],[31,1],[42,4],[45,3],[45,4],[65,2],[65,3],[65,3],[65,1],[65,1],[65,1],[64,6],[64,3],[64,1],[64,1],[64,1],[74,1],[75,1],[37,3],[37,1],[37,0],[68,3],[68,1],[76,3],[76,1],[35,5],[35,4],[35,2],[40,3],[40,1],[71,3],[71,1],[79,3],[79,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 3:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 4:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],["statements",$$[$0]]]]
break;
case 5: case 9: case 14:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 6: case 10: case 15: case 59: case 77:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = $$[$0-1].concat([["semicolon",$$[$0]]]);
break;
case 11:
this.$ = ["statements",$$[$0]]
break;
case 13:
this.$ = ["semicolon",$$[$0]]
break;
case 16:
this.$ = ["semicolon",$$[$0]];
break;
case 17:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 18:
this.$ = ["do_while",$$[$0],$$[$0-2]];
break;
case 19:
this.$ = ["foreach","Object",$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["foreach_with_index","Object",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["for",$$[$0-7],["<",$$[$0-7],$$[$0-5]],["+=",$$[$0-7],$$[$0-3]],$$[$0-1]];
break;
case 22:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 23:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["return",$$[$0]];
break;
case 26:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 28: case 29:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 32:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-2]],["parallel_rhs",$$[$0]]]
break;
case 33: case 35:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 34: case 36: case 90: case 91:
this.$ = [$$[$0-2],$$[$0]]
break;
case 37:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 38:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 39:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 42: case 43: case 44: case 45: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 55:
this.$ = ["-",$$[$0]];
break;
case 56:
this.$ = ["!", [".",$$[$0]]];
break;
case 57:
this.$ = [".", $$[$0]];
break;
case 58: case 76: case 79: case 81: case 86:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 60:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 61:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 62:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 63:
this.$ = ["initializer_list","Object",[]];
break;
case 64:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 65:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 66: case 67: case 68:
this.$ = yytext;
break;
case 69:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 70:
this.$ = ["parentheses",$$[$0-1]];
break;
case 75:
this.$ = ["Object", $$[$0]];
break;
case 78:
this.$ = [];
break;
case 80: case 82: case 87: case 89:
this.$ = [$$[$0]];
break;
case 83:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 84:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 85:
this.$ = ["else",$$[$0]];
break;
case 88:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:7,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{1:[3]},{5:[1,24]},o($Vb,[2,2]),o($Vb,[2,3],{6:3,7:4,8:5,9:7,16:8,41:15,42:16,45:18,46:19,65:20,4:25,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,69:$V8,72:$V9,73:$Va}),o($Vb,[2,8],{16:8,41:15,42:16,45:18,46:19,65:20,10:26,9:27,7:28,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,69:$V8,72:$V9,73:$Va}),{27:[1,29],40:30},o($Vc,[2,6]),o($Vc,[2,16]),{18:31,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{22:[1,42]},{25:[1,43],27:[1,44]},{18:45,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:[1,46]},{18:47,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},o($Vc,[2,27]),{43:[1,48]},o([30,66],$Vi,{26:[1,51],43:[1,49],44:[1,50]}),o($Vc,[2,31]),{26:[1,53],43:[1,52]},{30:$Vj,66:$Vk},{18:59,27:[1,62],30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,68:57,69:$V8,70:[1,56],71:58,72:$V9,73:[1,61],79:60},o($Vl,[2,66]),o($Vl,$Vm),{1:[2,1]},o($Vb,[2,4]),o($Vb,[2,7]),o($Vc,[2,5]),o($Vb,[2,37]),o($Vc,$Vn,{26:$Vo,43:[1,63]}),o($Vc,[2,26]),{19:[1,65],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},{18:81,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:$Vd,30:$Ve,31:82,36:$Vf,42:38,45:39,64:35,65:40,69:$V8,72:$V9,73:$Va},o($VE,[2,57]),o($VE,[2,59],{44:[1,83]}),{30:[1,84]},{18:85,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73],{30:$Vj,66:$Vk}),o($Vl,$Vi),{23:[1,86]},{26:[1,87]},{26:[1,88]},{34:[1,89],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},{30:[1,90]},o($Vc,[2,25],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),{18:91,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:92,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:$Vd,30:$Ve,31:93,36:$Vf,42:38,45:39,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:[1,94]},{18:96,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,47:95,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:[1,97]},{18:98,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:59,27:$Vd,30:$Ve,31:34,32:[1,99],36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,68:100,69:$V8,72:$V9,73:$Va},o($Vl,[2,63]),{70:[1,101]},{26:[1,103],70:[1,102]},o($VG,[2,80],{26:[1,104],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VH,[2,89]),o($VI,$Vm,{43:$VJ}),o($VI,$Vi,{43:$VK}),{18:107,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:[1,109],40:108},{4:111,6:3,7:4,8:5,9:7,13:110,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{18:112,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:113,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:114,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:115,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:116,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:117,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:118,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:119,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:120,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:121,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:122,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:123,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:124,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:125,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:126,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},o($VE,[2,55]),o($VE,[2,56]),{27:$Vd,30:$Ve,31:127,36:$Vf,42:38,45:39,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:$VL,32:$VM,37:128,75:129},{32:[1,131],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},{18:132,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:[1,133]},{18:135,27:[1,134],30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:136,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{27:$VL,32:$VM,37:137,75:129},o($Vc,[2,28],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($Vc,[2,29],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($Vc,[2,30]),o($VN,[2,34]),o($Vc,[2,32],{26:[1,138]}),{26:[1,139],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},o($VN,[2,33]),{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,67:[1,140]},o($VF,[2,61]),{32:[1,141]},o($Vl,[2,64]),o($Vl,[2,65]),{27:[1,144],73:[1,143],79:142},{18:59,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,68:145,69:$V8,72:$V9,73:$Va},{18:146,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:147,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},o($Vc,[2,39],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($Vc,[2,86]),o($Vc,$Vn,{26:$Vo}),{20:[1,148]},o([20,77,78],[2,11]),o([5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,67,69,70,72,73,77,78],[2,40],{49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o([5,17,19,20,21,24,26,27,32,33,34,36,38,39,48,49,67,69,70,72,73,77,78],[2,41],{50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,42],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,43],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,44],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,45],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,46],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,47],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VP,[2,48],{59:$VA,60:$VB,61:$VC,62:$VD}),o($VP,[2,49],{59:$VA,60:$VB,61:$VC,62:$VD}),o($VO,[2,50],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VQ,[2,51],{62:$VD}),o($VQ,[2,52],{62:$VD}),o($VQ,[2,53],{62:$VD}),o($VQ,[2,54],{62:$VD}),o($VE,[2,58]),{32:[1,149]},{26:[1,150],32:[2,77]},o([26,32],[2,75]),o($VF,[2,70]),o($Vc,[2,18],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),{28:[1,151]},o([26,30,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66],$Vi,{28:[1,152]}),{26:[1,153],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},{20:[1,155],35:154,77:$VR,78:$VS},{32:[1,158]},{18:159,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{18:160,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},o([5,17,19,20,21,24,26,27,32,33,34,36,38,39,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,70,72,73,77,78],[2,60]),o($VF,[2,62]),o($VH,[2,88]),{43:$VJ},{43:$VK},o($VG,[2,79]),o($VH,[2,90],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VH,[2,91],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($Vc,[2,17]),{4:111,6:3,7:4,8:5,9:7,13:161,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{27:$VL,32:$VM,37:162,75:129},{29:[1,163]},{29:[1,164]},{18:165,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{20:[1,166]},o($Vc,[2,23]),{18:167,27:$Vd,30:$Ve,31:34,36:$Vf,42:38,45:39,57:$Vg,63:$Vh,64:35,65:40,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:168,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:169,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},o($VT,[2,35],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),o($VT,[2,36],{48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD}),{20:[1,170]},{32:[2,76]},{30:[1,171]},{30:[1,172]},{19:[1,173],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},o($Vc,[2,22]),{34:[1,174],48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD},{20:[2,85]},{20:[1,175]},o($VF,[2,69]),{27:$Vd,30:$Ve,31:176,36:$Vf,42:38,45:39,64:35,65:40,69:$V8,72:$V9,73:$Va},{27:$Vd,30:$Ve,31:177,36:$Vf,42:38,45:39,64:35,65:40,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:178,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:179,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},o($Vc,[2,24]),{32:[1,180]},{32:[1,181]},{20:[1,182]},{20:[2,84],35:183,77:$VR,78:$VS},{19:[1,184]},{19:[1,185]},o($Vc,[2,21]),{20:[2,83]},{4:111,6:3,7:4,8:5,9:7,13:186,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{4:111,6:3,7:4,8:5,9:7,13:187,16:8,17:$V0,21:$V1,24:$V2,27:$V3,33:$V4,36:$V5,38:$V6,39:$V7,41:15,42:16,45:18,46:19,65:20,69:$V8,72:$V9,73:$Va},{20:[1,188]},{20:[1,189]},o($Vc,[2,19]),o($Vc,[2,20])],
defaultActions: {24:[2,1],162:[2,76],168:[2,85],183:[2,83]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:return 72
break;
case 3:return 73
break;
case 4:return "$"
break;
case 5:return "function"
break;
case 6:return "end"
break;
case 7:return "then"
break;
case 8:return 77
break;
case 9:return 33
break;
case 10:return 78
break;
case 11:return 38
break;
case 12:return 17
break;
case 13:return 24
break;
case 14:return 39
break;
case 15:return 21
break;
case 16:return 23
break;
case 17:return 'of'
break;
case 18:return 63
break;
case 19:return 26
break;
case 20:return 58
break;
case 21:return 44
break;
case 22:return ':'
break;
case 23:return 49
break;
case 24:return 48
break;
case 25:return 52
break;
case 26:return '>>'
break;
case 27:return 55
break;
case 28:return 50
break;
case 29:return '<<'
break;
case 30:return 51
break;
case 31:return 54
break;
case 32:return 53
break;
case 33:return 43
break;
case 34:return '*='
break;
case 35:return 59
break;
case 36:return 60
break;
case 37:return 61
break;
case 38:return 57
break;
case 39:return 56
break;
case 40:return 62
break;
case 41:return 69
break;
case 42:return 70
break;
case 43:return 66
break;
case 44:return 67
break;
case 45:return 30
break;
case 46:return 32
break;
case 47:return 25
break;
case 48:return 29
break;
case 49:return 28
break;
case 50:return 19
break;
case 51:return 27
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:--.*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:local\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lua_parser;
exports.Parser = lua_parser.Parser;
exports.parse = function () { return lua_parser.parse.apply(lua_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}