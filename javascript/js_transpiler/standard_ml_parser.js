/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var standard_ml_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[5,10,34],$V3=[1,15],$V4=[1,22],$V5=[1,19],$V6=[1,17],$V7=[1,20],$V8=[1,21],$V9=[1,23],$Va=[13,20],$Vb=[13,20,64],$Vc=[5,8,10,32,34,70],$Vd=[1,30],$Ve=[1,28],$Vf=[1,29],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[5,8,10,13,14,16,24,27,31,32,34,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,62,63,64,70],$Vt=[5,8,9,10,11,13,14,16,24,27,31,32,34,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,60,62,63,64,65,67,70],$Vu=[2,52],$Vv=[1,55],$Vw=[2,64],$Vx=[1,79],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[5,8,10,13,14,16,24,27,31,32,34,36,40,41,42,43,44,45,46,62,63,64,70],$VC=[5,8,10,13,14,16,24,27,31,32,34,36,40,41,42,43,44,45,46,47,48,49,62,63,64,70],$VD=[5,8,10,13,14,16,24,27,31,32,34,36,40,41,42,43,44,45,46,47,48,49,50,51,52,62,63,64,70],$VE=[1,101],$VF=[31,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"fun":10,"(":11,"parameters":12,")":13,":":14,"type":15,"=":16,"statement":17,"initialize_var":18,"types":19,"->":20,"statements":21,"case":22,"e":23,"of":24,"case_statements":25,"if":26,"then":27,"elif":28,"let":29,"declare_vars":30,"in":31,"end":32,"statement_with_semicolon":33,"val":34,"case_statement":35,"=>":36,"case_statements_":37,"_":38,"declare_var":39,"||":40,"&&":41,"<>":42,"<=":43,"<":44,">=":45,">":46,"++":47,"+":48,"-":49,"*":50,"/":51,"mod":52,"**":53,"~":54,"parentheses_expr":55,"access_array":56,"!!":57,"access_arr":58,"\\\\":59,"[":60,"exprs":61,"]":62,"<-":63,",":64,"NUMBER":65,"args":66,"STRING_LITERAL":67,"parameter":68,"else_statement":69,"else":70,"identifiers":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",10:"fun",11:"(",13:")",14:":",16:"=",20:"->",22:"case",24:"of",26:"if",27:"then",29:"let",31:"in",32:"end",34:"val",36:"=>",38:"_",40:"||",41:"&&",42:"<>",43:"<=",44:"<",45:">=",46:">",47:"++",48:"+",49:"-",50:"*",51:"/",52:"mod",53:"**",54:"~",57:"!!",59:"\\\\",60:"[",62:"]",63:"<-",64:",",65:"NUMBER",67:"STRING_LITERAL",70:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[6,9],[6,7],[6,1],[19,3],[19,1],[21,1],[17,4],[17,5],[17,5],[17,1],[18,6],[18,4],[33,1],[33,1],[35,4],[37,2],[37,1],[25,4],[39,6],[39,4],[30,2],[30,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[56,3],[55,6],[55,3],[55,3],[55,7],[55,9],[55,1],[55,1],[55,3],[55,4],[55,1],[15,1],[68,3],[68,1],[12,3],[12,1],[58,3],[58,1],[61,3],[61,1],[66,2],[66,1],[28,1],[69,2],[71,3],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 21: case 26: case 65:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 10: case 22: case 27: case 60: case 62:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["function","public",$$[$0-2],$$[$0-7],$$[$0-5],$$[$0]];
break;
case 7:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 9: case 59: case 61: case 63: case 69:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 11:
this.$ = ["statements",[$$[$0]]];
break;
case 12:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 14:
this.$ = ["lexically_scoped_vars",$$[$0-3],["statements",$$[$0-1]]];
break;
case 15:
this.$ = ["semicolon",$$[$0]];
break;
case 16: case 24:
this.$ = ["lexically_scoped_var",$$[$0],$$[$0-4],$$[$0-2]]
break;
case 17: case 25:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 18:
this.$ = ["return",$$[$0]];
break;
case 20:
this.$ = ["case",$$[$0-3],$$[$0-1]]
break;
case 23:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 28: case 29: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 42:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["-",$$[$0]];
break;
case 44:
this.$ = $$[$0];
break;
case 45:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 46:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 47: case 53:
this.$ = $$[$0-1]
break;
case 48:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 49:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 50:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 51: case 55:
this.$ = yytext;
break;
case 54:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 57:
this.$ = [$$[$0], $$[$0-2]];
break;
case 58:
this.$ = ["Object",$$[$0]];
break;
case 64: case 66: case 70:
this.$ = [$$[$0]];
break;
case 68:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,10:$V0,18:5,34:$V1},{1:[3]},{5:[1,7]},{4:8,5:[2,3],6:3,10:$V0,18:5,34:$V1},{9:[1,9]},o($V2,[2,8]),{9:[1,10]},{1:[2,1]},{5:[2,2]},{11:[1,11]},{16:[1,12]},{9:$V3,12:13,68:14},{9:$V4,11:$V5,23:16,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{13:[1,24]},o($Va,[2,60],{64:[1,25]}),o($Vb,[2,58],{14:[1,26]}),o($Vc,[2,17],{14:[1,27],16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),{9:$V4,11:$V5,23:43,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vs,[2,44]),{9:[1,47],11:$V5,23:46,54:$V6,55:18,56:45,59:[1,44],60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:49,54:$V6,55:18,60:$V7,61:48,65:$V8,67:$V9},o($Vt,[2,51]),o($Vt,$Vu),o($Vt,[2,55]),{14:[1,50],16:[1,51]},{9:$V3,12:52,68:14},{9:[1,53]},{9:$Vv,15:54},{9:$V4,11:$V5,23:56,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:57,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:58,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:59,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:60,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:61,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:62,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:63,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:64,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:65,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:66,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:67,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:68,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:69,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:70,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vs,[2,43]),{9:$V3,12:71,68:14},{13:[1,72]},{13:[1,73],16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr},o([13,16,40,41,42,43,44,45,46,47,48,49,50,51,52,53],$Vu,{66:74,55:76,9:$V4,11:$V5,57:[1,75],60:$V7,65:$V8,67:$V9}),{62:[1,77]},{8:[1,78],16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,62:$Vw,64:$Vx},{9:$Vv,15:80},{9:$V4,11:$V5,17:81,18:87,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Va,[2,59]),o($Vb,[2,57]),o($Vc,[2,16]),o([5,8,10,16,31,32,34,70],[2,56]),o([5,8,10,13,14,24,27,31,32,34,36,40,62,63,64,70],[2,28],{16:$Vd,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o([5,8,10,13,14,24,27,31,32,34,36,40,41,62,63,64,70],[2,29],{16:$Vd,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,30],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,31],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,32],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,33],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,34],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VB,[2,35],{47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VC,[2,36],{50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VC,[2,37],{50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VC,[2,38],{50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($VD,[2,39],{53:$Vr}),o($VD,[2,40],{53:$Vr}),o($VD,[2,41],{53:$Vr}),o($Vs,[2,42]),{20:[1,88]},o($Vt,[2,47]),o($Vt,[2,53]),{13:[1,89]},{9:$V4,11:$V5,55:91,58:90,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,13:[2,66],55:76,60:$V7,65:$V8,66:92,67:$V9},o($Vt,[2,48]),{9:$V4,11:$V5,23:93,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:95,54:$V6,55:18,60:$V7,61:94,65:$V8,67:$V9},{16:[1,96]},o($V2,[2,7]),{9:$V4,11:$V5,23:97,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:98,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{30:99,34:$VE,39:100},o($Vc,[2,15]),o($Vc,[2,18],{16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),o($Vc,[2,19]),{9:$V4,11:$V5,23:102,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vt,[2,54]),{13:[2,45]},{13:[2,62],57:[1,103]},{13:[2,65]},{16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,63:[1,104]},{62:[2,63]},{16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,62:$Vw,64:$Vx},{9:$V4,11:$V5,17:105,18:87,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{16:$Vd,24:[1,106],40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr},{16:$Vd,27:[1,107],40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr},{31:[1,108]},{30:109,31:[2,27],34:$VE,39:100},{9:[1,110]},{13:[1,111],16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr},{9:$V4,11:$V5,55:91,58:112,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,23:113,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($V2,[2,6]),{9:$V4,11:$V5,23:117,25:114,35:116,37:115,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,17:119,18:87,21:118,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{9:$V4,11:$V5,17:119,18:87,21:120,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{31:[2,26]},{16:[1,121]},o($Vt,[2,46]),{13:[2,61]},{16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,62:[1,122],64:[1,123]},o($Vc,[2,12]),{38:[1,124]},{9:$V4,11:$V5,23:117,35:116,37:125,38:[2,22],54:$V6,55:18,60:$V7,65:$V8,67:$V9},{16:$Vd,36:[1,126],40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr},{28:127,69:128,70:[1,129]},o($Vc,[2,11]),{32:[1,130]},{9:$V4,11:$V5,23:131,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vt,[2,49]),{9:$V4,11:$V5,23:132,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{36:[1,133]},{38:[2,21]},{9:$V4,11:$V5,17:119,18:87,21:134,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vc,[2,13]),o($Vc,[2,67]),{9:$V4,11:$V5,17:135,18:87,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},o($Vc,[2,14]),o($VF,[2,25],{14:[1,136],16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr}),{16:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,53:$Vr,62:[1,137]},{9:$V4,11:$V5,17:119,18:87,21:138,22:$Vy,23:86,26:$Vz,29:$VA,33:85,34:$V1,54:$V6,55:18,60:$V7,65:$V8,67:$V9},{8:[1,139]},o($Vc,[2,68]),{9:$Vv,15:140},o($Vt,[2,50]),o($Vc,[2,23]),o([9,11,38,54,60,65,67],[2,20]),o($VF,[2,24])],
defaultActions: {7:[2,1],8:[2,2],90:[2,45],92:[2,65],94:[2,63],109:[2,26],112:[2,61],125:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 65
break;
case 2:return 67
break;
case 3:return "otherwise"
break;
case 4:return 26
break;
case 5:return 24
break;
case 6:return "in"
break;
case 7:return "let"
break;
case 8:return "end"
break;
case 9:return 34
break;
case 10:return 10
break;
case 11:return 70
break;
case 12:return 22
break;
case 13:return "then"
break;
case 14:return "data"
break;
case 15:return "return"
break;
case 16:return 52
break;
case 17:return 64
break;
case 18:return ';'
break;
case 19:return '.'
break;
case 20:return '::'
break;
case 21:return 14
break;
case 22:return 41
break;
case 23:return 40
break;
case 24:return 8
break;
case 25:return 59
break;
case 26:return 45
break;
case 27:return 46
break;
case 28:return 42
break;
case 29:return 43
break;
case 30:return 63
break;
case 31:return 20
break;
case 32:return 36
break;
case 33:return 44
break;
case 34:return 16
break;
case 35:return '*='
break;
case 36:return 53
break;
case 37:return 50
break;
case 38:return '/='
break;
case 39:return 51
break;
case 40:return '-='
break;
case 41:return '--'
break;
case 42:return 49
break;
case 43:return 47
break;
case 44:return '+='
break;
case 45:return 48
break;
case 46:return '^'
break;
case 47:return '{'
break;
case 48:return '}'
break;
case 49:return 57
break;
case 50:return 60
break;
case 51:return 62
break;
case 52:return 11
break;
case 53:return 13
break;
case 54:return 54
break;
case 55:return 38
break;
case 56:return 9
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:end\b)/,/^(?:val\b)/,/^(?:fun\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:then\b)/,/^(?:data\b)/,/^(?:return\b)/,/^(?:mod\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:\\)/,/^(?:>=)/,/^(?:>)/,/^(?:<>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:=>)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:~)/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = standard_ml_parser;
exports.Parser = standard_ml_parser.Parser;
exports.parse = function () { return standard_ml_parser.parse.apply(standard_ml_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}