/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var perl_6_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,5],$V3=[1,17],$V4=[1,6],$V5=[1,7],$V6=[1,10],$V7=[1,16],$V8=[1,12],$V9=[1,13],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[5,20],$Vg=[12,14,15,18],$Vh=[1,35],$Vi=[1,37],$Vj=[2,50],$Vk=[2,57],$Vl=[1,51],$Vm=[1,52],$Vn=[12,14,15,18,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,67],$Vo=[2,58],$Vp=[5,12,15,16,17,20,21,23,25,26,30,31,61,62,63,69,70],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[2,75],$VE=[1,86],$VF=[18,67],$VG=[1,100],$VH=[1,101],$VI=[12,14,15,17,18,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,67],$VJ=[12,14,15,18,41,42,43,44,58,67],$VK=[12,14,15,18,41,42,43,44,45,46,47,48,58,67],$VL=[12,14,15,18,41,42,43,44,45,46,47,48,49,50,51,58,67],$VM=[1,162];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"statement_with_semicolon":11,"if":12,"e":13,";":14,"unless":15,"while":16,"(":17,")":18,"{":19,"}":20,"foreach":21,"var_name":22,"for":23,"elif":24,"function":25,"IDENTIFIER":26,"parameters":27,"static":28,"parentheses_expr":29,"return":30,"my":31,"=":32,"var_names":33,"access_array":34,"++":35,"--":36,"+=":37,"-=":38,"*=":39,"/=":40,"?":41,":":42,"||":43,"&&":44,"<=":45,"<":46,">=":47,">":48,"+":49,".":50,"-":51,"*":52,"/":53,"%":54,"not_expr":55,"!":56,"[":57,"]":58,"exprs":59,"key_values":60,"NUMBER":61,"STRING_LITERAL":62,"<>":63,"type":64,"types":65,"parameter":66,",":67,"else":68,"$":69,"@":70,"key_value":71,"=>":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"if",14:";",15:"unless",16:"while",17:"(",18:")",19:"{",20:"}",21:"foreach",23:"for",25:"function",26:"IDENTIFIER",28:"static",30:"return",31:"my",32:"=",35:"++",36:"--",37:"+=",38:"-=",39:"*=",40:"/=",41:"?",42:":",43:"||",44:"&&",45:"<=",46:"<",47:">=",48:">",49:"+",50:".",51:"-",52:"*",53:"/",54:"%",56:"!",57:"[",58:"]",61:"NUMBER",62:"STRING_LITERAL",63:"<>",67:",",68:"else",69:"$",70:"@",72:"=>"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[6,4],[6,4],[6,2],[6,7],[6,8],[6,11],[6,8],[6,7],[6,7],[6,8],[10,8],[10,7],[11,1],[11,2],[11,4],[11,2],[11,3],[11,3],[11,2],[11,2],[11,3],[11,3],[11,3],[11,3],[13,5],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,1],[55,2],[55,1],[34,4],[29,1],[29,3],[29,4],[29,2],[29,3],[29,3],[29,1],[29,1],[29,1],[29,1],[64,3],[64,4],[64,1],[66,1],[27,3],[27,1],[59,3],[59,1],[65,3],[65,1],[24,9],[24,4],[22,2],[22,2],[33,3],[33,1],[60,3],[60,1],[71,3],[71,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 65:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 8:
this.$ = ["if",$$[$0-1],["statements",["semicolon",$$[$0-3]]]];
break;
case 9:
this.$ = ["unless",$$[$0-1],["statements",[["semicolon",$$[$0-3]]]]];
break;
case 10:
this.$ = ["semicolon",$$[$0-1]];
break;
case 11:
this.$ = ["while",$$[$0-4],$$[$0-1]];
break;
case 12:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 13:
this.$ = ["for",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 14:
this.$ = ["if",$$[$0-5],$$[$0-2],$$[$0]];
break;
case 15:
this.$ = ["if",$$[$0-4],$$[$0-1]];
break;
case 16:
this.$ = ["unless",$$[$0-4],$$[$0-1]];
break;
case 17:
this.$ = ["function","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["return",$$[$0]];
break;
case 22:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 24: case 25:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 26: case 27:
this.$ = [$$[$0],$$[$0-1]];
break;
case 28: case 29: case 30: case 31: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 45:
this.$ = ["-",$$[$0]];
break;
case 47:
this.$ = ["!", [".",$$[$0]]];
break;
case 49:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 51:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 52:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 53:
this.$ = ["initializer_list_or_parentheses",[]];
break;
case 54:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 55:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 56: case 57: case 58:
this.$ = yytext;
break;
case 60:
this.$ = [$$[$0-2],"[]"];
break;
case 61:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 63:
this.$ = ["Object", $$[$0]];
break;
case 64: case 66: case 68: case 74:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 67: case 69: case 75: case 77:
this.$ = [$$[$0]];
break;
case 70:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 71:
this.$ = ["else",$$[$0-1]];
break;
case 72: case 73:
this.$ = $$[$0];
break;
case 76:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 78:
this.$ = [$$[$0-2],$$[$0]]
break;
case 79:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{1:[3]},{5:[1,23]},o($Vf,[2,3],{6:3,11:4,29:11,34:14,22:15,4:24,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,23:$V5,25:$V6,26:$V7,30:$V8,31:$V9,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve}),{12:[1,25],14:[1,27],15:[1,26]},{17:[1,28]},{22:29,69:$Vd,70:$Ve},{17:[1,30]},{17:[1,31]},{17:[1,32]},{26:[1,33]},o($Vg,[2,20]),{13:34,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{22:41,33:42,69:$Vd,70:$Ve},o($Vg,$Vj,{32:[1,43]}),o($Vg,$Vk,{32:[1,44],35:[1,45],36:[1,46],37:[1,47],38:[1,48],39:[1,49],40:[1,50],57:$Vl}),{17:$Vm},{13:57,17:$V3,18:[1,53],22:40,26:[1,59],29:38,34:39,51:$Vh,55:36,56:$Vi,59:55,60:54,61:$Va,62:[1,58],63:$Vc,69:$Vd,70:$Ve,71:56},o($Vn,[2,56]),o($Vn,$Vo),o($Vn,[2,59]),{26:[1,60]},{26:[1,61]},{1:[2,1]},o($Vf,[2,2]),{13:62,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:63,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vp,[2,10]),{13:64,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{17:[1,65]},{11:66,17:$V3,22:15,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:67,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:68,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{17:[1,69]},o($Vg,[2,21],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),{13:83,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vn,[2,46]),{17:$V3,22:40,26:$V7,29:84,34:39,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vn,[2,48]),o($Vn,$Vj),o($Vn,$Vk,{57:$Vl}),o($Vg,$VD,{32:[1,85],67:$VE}),o($Vg,[2,23]),{13:87,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:88,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vg,[2,26]),o($Vg,[2,27]),{13:89,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:90,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:91,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:92,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:93,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:57,17:$V3,18:[1,94],22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,59:95,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vn,[2,53]),{18:[1,96],67:[1,97]},{18:[1,98]},o($VF,[2,77]),{18:[2,67],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,67:[1,99]},o([18,41,43,44,45,46,47,48,49,50,51,52,53,54,67],$Vo,{72:$VG}),{17:$Vm,42:$VH},o($VI,[2,72]),o($VI,[2,73]),{14:[1,102],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{14:[1,103],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{18:[1,104],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{22:105,69:$Vd,70:$Ve},{14:[1,106]},{18:[1,107],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{18:[1,108],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{22:111,27:109,66:110,69:$Vd,70:$Ve},{13:112,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:113,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:114,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:115,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:116,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:117,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:118,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:119,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:120,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:121,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:122,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:123,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:124,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vn,[2,45]),o($Vn,[2,47]),{13:125,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{22:127,33:126,69:$Vd,70:$Ve},o($Vg,[2,24],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,25],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,28],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,29],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,30],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,31],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,58:[1,128]},o($Vn,[2,51]),{18:[1,129]},o($Vn,[2,54]),{26:[1,132],62:[1,131],71:130},o($Vn,[2,55]),{13:57,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,59:133,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:134,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{13:135,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},o($Vp,[2,8]),o($Vp,[2,9]),{19:[1,136]},{18:[1,137]},{13:138,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{19:[1,139]},{19:[1,140]},{18:[1,141]},{18:[2,65],67:[1,142]},o($VF,[2,63]),{41:$Vq,42:[1,143],43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},o($VJ,[2,33],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VJ,[2,34],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VK,[2,35],{49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VK,[2,36],{49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VK,[2,37],{49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VK,[2,38],{49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VL,[2,39],{52:$VA,53:$VB,54:$VC}),o($VL,[2,40],{52:$VA,53:$VB,54:$VC}),o($VL,[2,41],{52:$VA,53:$VB,54:$VC}),o($Vn,[2,42]),o($Vn,[2,43]),o($Vn,[2,44]),o($Vg,[2,22],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vg,[2,74]),o($Vg,$VD,{67:$VE}),o([12,14,15,18,32,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,67],[2,49]),o($Vn,[2,52]),o($VF,[2,76]),{72:$VG},{42:$VH},{18:[2,66]},o($VF,[2,78],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($VF,[2,79],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),{4:145,6:3,9:144,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{19:[1,146]},{14:[1,147],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},{4:145,6:3,9:148,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{4:145,6:3,9:149,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{19:[1,150]},{22:111,27:151,66:110,69:$Vd,70:$Ve},{13:152,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{20:[1,153]},{20:[2,5]},{4:145,6:3,9:154,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{11:155,17:$V3,22:15,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{20:[1,156]},{20:[1,157]},{4:145,6:3,9:158,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{18:[2,64]},o([12,14,15,18,42,58,67],[2,32],{41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vp,[2,11]),{20:[1,159]},{18:[1,160]},o($Vp,[2,15],{24:161,68:$VM}),o($Vp,[2,16]),{20:[1,163]},o($Vp,[2,12]),{19:[1,164]},o($Vp,[2,14]),{12:[1,165],19:[1,166]},o($Vp,[2,17]),{4:145,6:3,9:167,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{17:[1,168]},{4:145,6:3,9:169,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{20:[1,170]},{13:171,17:$V3,22:40,26:$V7,29:38,34:39,51:$Vh,55:36,56:$Vi,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{20:[1,172]},o($Vp,[2,13]),{18:[1,173],41:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC},o($Vp,[2,71]),{19:[1,174]},{4:145,6:3,9:175,11:4,12:$V0,15:$V1,16:$V2,17:$V3,21:$V4,22:15,23:$V5,25:$V6,26:$V7,29:11,30:$V8,31:$V9,34:14,61:$Va,62:$Vb,63:$Vc,69:$Vd,70:$Ve},{20:[1,176]},{24:177,68:$VM},o($Vp,[2,70])],
defaultActions: {23:[2,1],133:[2,66],145:[2,5],151:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 61
break;
case 2:return 62
break;
case 3:return "$"
break;
case 4:return "@"
break;
case 5:return 21
break;
case 6:return "unless"
break;
case 7:return "function"
break;
case 8:return "class"
break;
case 9:return "public"
break;
case 10:return "extends"
break;
case 11:return "implements"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return 12
break;
case 15:return 68
break;
case 16:return 30
break;
case 17:return "sin"
break;
case 18:return "tan"
break;
case 19:return "cos"
break;
case 20:return 16
break;
case 21:return 23
break;
case 22:return 31
break;
case 23:return 67
break;
case 24:return 14
break;
case 25:return 50
break;
case 26:return 42
break;
case 27:return 44
break;
case 28:return 43
break;
case 29:return 47
break;
case 30:return 48
break;
case 31:return 63
break;
case 32:return 45
break;
case 33:return 46
break;
case 34:return 72
break;
case 35:return '=='
break;
case 36:return 32
break;
case 37:return 54
break;
case 38:return 39
break;
case 39:return 52
break;
case 40:return 40
break;
case 41:return 53
break;
case 42:return 38
break;
case 43:return 36
break;
case 44:return 51
break;
case 45:return 35
break;
case 46:return 37
break;
case 47:return 49
break;
case 48:return '^'
break;
case 49:return 41
break;
case 50:return 19
break;
case 51:return 20
break;
case 52:return 57
break;
case 53:return 58
break;
case 54:return 17
break;
case 55:return 18
break;
case 56:return 'PI'
break;
case 57:return 'E'
break;
case 58:return 26
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@)/,/^(?:foreach\b)/,/^(?:unless\b)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:sin\b)/,/^(?:tan\b)/,/^(?:cos\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:my\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = perl_6_parser;
exports.Parser = perl_6_parser.Parser;
exports.parse = function () { return perl_6_parser.parse.apply(perl_6_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}